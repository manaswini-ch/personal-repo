
import "../sel/upgradeWorkflow.stg"

// This template is to update profiling frequency using update pattern.
// @created_by Vidhya (vd0912)
// @modified_by Murthy (vk1708)
// @Api_Path : "http://localhost:8893/fireshots/nabu/upd/sq/restCatalog/updateRefreshFreq"

updateRefreshFreq(data)::=<<
{
    "input_data": $data.asString$,
    "sequential_queries": [
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "updateRefreshFreq_schema",
            "validation_key": "input_data",
            "query_type": "validation"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "updateRefreshFreq_template",
            "query_output_key": "data",
            "query_type": "update"
        }
    ],
    "output_keys": [
        "data"
    ]
}
>>

updateRefreshFreq_schema(data)::=<<
{
  "\$schema": "http://json-schema.org/draft-04/schema#",
    "definitions": {
      "recurring": {
        "description": "user defined frequency",
        "type": "object",
        "required": [
          "cron_type",
          "cron_freq",
          "cron_timezone",
          "cron_info",
          "consider_timezone"
        ],
        "properties": {
          "cron_type": {
            "title": "Type of cron whether recurring or onetime",
            "type": "string",
            "enum": [
              "recurring"
            ]
          },
          "cron_freq": {
            "title": "frequency",
            "type": "string",
  		  "pattern": "^.*\$"
          },
          "cron_timezone": {
            "title": "Zone of time Country/City",
            "type": "string",
  		  "pattern":"[A-Za-z][A-Za-z0-9~\/._+-]+\$"
          },
          "consider_timezone":{
            "type":"boolean"
          },
          "cron_info": {
            "type": "object",
            "properties": {
              "schedule_type": {
                "title": "Type of schedule whether its is Daily/Weekly/Monthly/Yearly/Advanced",
                "type": "string",
                "enum": [
                  "Daily",
                  "weekly",
                  "Monthly",
                  "Yearly",
                  "Advanced"
                ]
              },
              "start_date": {
                "title": "Start Date",
                "type": "string",
  			  "pattern":"^(([0-9]{4}[-]?((0[13-9]|1[012])[-]?(0[1-9]|[12][0-9]|30)|(0[13578]|1[02])[-]?31|02[-]?(0[1-9]|1[0-9]|2[0-8]))|([0-9]{2}(([2468][048]|[02468][48])|[13579][26])|([13579][26]|[02468][048]|0[0-9]|1[0-6])00)[-]?02[-]?29)\\\s([01][0-9]|2[0-3]):([012345][0-9]):([012345][0-9]))\$"
              },
              "end_date": {
                "title": "End Date",
                "type": "string",
  			  "pattern":"^(([0-9]{4}[-]?((0[13-9]|1[012])[-]?(0[1-9]|[12][0-9]|30)|(0[13578]|1[02])[-]?31|02[-]?(0[1-9]|1[0-9]|2[0-8]))|([0-9]{2}(([2468][048]|[02468][48])|[13579][26])|([13579][26]|[02468][048]|0[0-9]|1[0-6])00)[-]?02[-]?29)\\\s([01][0-9]|2[0-3]):([012345][0-9]):([012345][0-9]))\$"
              }
            },
            "required": [
              "schedule_type",
              "start_date"
            ]
          }
        }
      },
      "one_time": {
        "description": "User defined frequency",
        "type": "object",
        "required": [
          "cron_type",
          "cron_freq",
          "cron_timezone",
          "consider_timezone"
        ],
        "properties": {
          "cron_type": {
            "title": "Type of cron whether Recurring or Onetime",
            "type": "string",
            "enum": [
              "one_time"
            ]
          },
          "cron_freq": {
            "title": "crawl frequency",
            "type": "string",
  		  "pattern": "^.*\$"
          },
          "cron_timezone": {
            "title": "Zone of time Country/City",
            "type": "string",
  		  "pattern":"[A-Za-z][A-Za-z0-9~\/._+-]+\$"
          },
          "consider_timezone":{
            "type":"boolean"
          }
        }
      }
    },
    "type": "object",
    "properties": {
      "data_domain_id": {
        "title": "Data Domain Id",
        "type": "integer",
        "minimum": 1
      },
      "frequency": {
        "description": "Frequency",
        "\$ref": "#/definitions/$data.input_data.frequency.cron_type$"
      }
    },
    "required": [
      "data_domain_id",
      "frequency"
    ]
}
>>

updateRefreshFreq_template(data)::=<<
with datastore as(
update nabu.datastore set
filter_resolving_frequency='$data.asMap.frequency.cron_freq$',
mod_by='$data.userDetails.userId$',
mod_ts=current_timestamp
where datastore_id=$data.asMap.data_domain_id$ and valid_to_ts = '9999-12-31'
),

update_job_schedule_details as(
update nabu.job_schedule_details set valid_to_ts=now()
where datastore_id=$data.asMap.data_domain_id$
and job_type_id =(select job_type_id from nabu.job_type_lookup where job_type ='filter_resolving') and valid_to_ts  = '9999-12-31'
)

insert into nabu.job_schedule_details(job_type_id, datastore_id,refresh_frequency,additional_properties,valid_from_ts, valid_to_ts, cru_by, cru_ts) values(
(select job_type_id from nabu.job_type_lookup where job_type ='filter_resolving'),
$data.asMap.data_domain_id$,
'$data.asMap.frequency.cron_freq$',
'$resolveFilterResolvingInfo(data.asMap.frequency)$',
current_timestamp,
'9999-12-31',
'$data.userDetails.userId$',
current_timestamp
)
>>

resolveFilterResolvingInfo(data)::=<<
$if(data.cron_type)$
$resolveCronJson(data)$
$endif$
>>

//This template is to update indexing frequency using update pattern.
//@created_by Vidhya (vd0912)
//@modified_by Murthy (vk1708)
//@Api_Path : "http://localhost:8893/fireshots/nabu/upd/sq/restCatalog/updateIndexingFreq"

updateIndexingFreq(data)::=<<
{
    "input_data": $data.asString$,
    "sequential_queries": [
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "updateIndexingFreq_schema",
            "validation_key": "input_data",
            "query_type": "validation"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "updateIndexingFreq_template",
            "query_output_key": "data",
            "query_type": "update"
        }
    ],
    "output_keys": [
        "data"
    ]
}
>>

updateIndexingFreq_schema(data)::=<<
{
  "\$schema": "http://json-schema.org/draft-04/schema#",
    "definitions": {
      "recurring": {
        "description": "user defined frequency",
        "type": "object",
        "required": [
          "cron_type",
          "cron_freq",
          "cron_timezone",
          "cron_info",
          "consider_timezone"
        ],
        "properties": {
          "cron_type": {
            "title": "Type of cron whether recurring or onetime",
            "type": "string",
            "enum": [
              "recurring"
            ]
          },
          "cron_freq": {
            "title": "frequency",
            "type": "string",
  		  "pattern": "^.*\$"
          },
          "cron_timezone": {
            "title": "Zone of time Country/City",
            "type": "string",
  		  "pattern":"[A-Za-z][A-Za-z0-9~\/._+-]+\$"
          },
          "consider_timezone":{
            "type":"boolean"
          },
          "cron_info": {
            "type": "object",
            "properties": {
              "schedule_type": {
                "title": "Type of schedule whether its is Daily/Weekly/Monthly/Yearly/Advanced",
                "type": "string",
                "enum": [
                  "Daily",
                  "weekly",
                  "Monthly",
                  "Yearly",
                  "Advanced"
                ]
              },
              "start_date": {
                "title": "Start Date",
                "type": "string",
  			  "pattern":"^(([0-9]{4}[-]?((0[13-9]|1[012])[-]?(0[1-9]|[12][0-9]|30)|(0[13578]|1[02])[-]?31|02[-]?(0[1-9]|1[0-9]|2[0-8]))|([0-9]{2}(([2468][048]|[02468][48])|[13579][26])|([13579][26]|[02468][048]|0[0-9]|1[0-6])00)[-]?02[-]?29)\\\s([01][0-9]|2[0-3]):([012345][0-9]):([012345][0-9]))\$"
              },
              "end_date": {
                "title": "End Date",
                "type": "string",
  			  "pattern":"^(([0-9]{4}[-]?((0[13-9]|1[012])[-]?(0[1-9]|[12][0-9]|30)|(0[13578]|1[02])[-]?31|02[-]?(0[1-9]|1[0-9]|2[0-8]))|([0-9]{2}(([2468][048]|[02468][48])|[13579][26])|([13579][26]|[02468][048]|0[0-9]|1[0-6])00)[-]?02[-]?29)\\\s([01][0-9]|2[0-3]):([012345][0-9]):([012345][0-9]))\$"
              }
            },
            "required": [
              "schedule_type",
              "start_date"
            ]
          }
        }
      },
      "one_time": {
        "description": "User defined frequency",
        "type": "object",
        "required": [
          "cron_type",
          "cron_freq",
          "cron_timezone",
          "consider_timezone"
        ],
        "properties": {
          "cron_type": {
            "title": "Type of cron whether Recurring or Onetime",
            "type": "string",
            "enum": [
              "one_time"
            ]
          },
          "cron_freq": {
            "title": "crawl frequency",
            "type": "string",
  		  "pattern": "^.*\$"
          },
          "cron_timezone": {
            "title": "Zone of time Country/City",
            "type": "string",
  		  "pattern":"[A-Za-z][A-Za-z0-9~\/._+-]+\$"
          },
          "consider_timezone":{
            "type":"boolean"
          }
        }
      }
    },
    "type": "object",
    "properties": {
      "data_domain_id": {
        "title": "Data Domain Id",
        "type": "integer",
        "minimum": 1
      },
      "frequency": {
        "description": "Frequency",
        "\$ref": "#/definitions/$data.input_data.frequency.cron_type$"
      }
    },
    "required": [
      "data_domain_id",
      "frequency"
    ]
}
>>

updateIndexingFreq_template(data)::=<<
with datastore as(
update nabu.datastore set
indexing_frequency='$data.asMap.frequency.cron_freq$',
mod_by='$data.userDetails.userId$',
mod_ts=current_timestamp
where datastore_id=$data.asMap.data_domain_id$ and valid_to_ts = '9999-12-31'
),

update_job_schedule_details as(
update nabu.job_schedule_details set valid_to_ts=now()
where datastore_id=$data.asMap.data_domain_id$
and job_type_id =(select job_type_id from nabu.job_type_lookup where job_type ='indexing') and valid_to_ts  = '9999-12-31'
)

insert into nabu.job_schedule_details(job_type_id, datastore_id,refresh_frequency,additional_properties,valid_from_ts, valid_to_ts, cru_by, cru_ts) values(
(select job_type_id from nabu.job_type_lookup where job_type ='indexing'),
$data.asMap.data_domain_id$,
'$data.asMap.frequency.cron_freq$',
'$resolveIndexingInfo(data.asMap.frequency)$',
current_timestamp,
'9999-12-31',
'$data.userDetails.userId$',
current_timestamp
)
>>

resolveIndexingInfo(data)::=<<
$if(data.cron_type)$
$resolveCronJson(data)$
$endif$
>>



//This template is to update profiling frequency using update pattern.
//@created_by Vindhya (vb3003)
//@modified_by Murthy (vk1708)
//@Api_Path : "http://localhost:8893/fireshots/nabu/upd/sq/restCatalog/updateProfilingFreq"

updateProfilingFreq(data)::=<<
{
    "input_data": $data.asString$,
    "sequential_queries": [
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "updateProfilingFreq_schema",
            "validation_key": "input_data",
            "query_type": "validation"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "updateProfilingFreq_template",
            "query_output_key": "data",
            "query_type": "update"
        }
    ],
    "output_keys": [
        "data"
    ]
}
>>

updateProfilingFreq_schema(data)::=<<
{
  "\$schema": "http://json-schema.org/draft-04/schema#",
    "definitions": {
      "recurring": {
        "description": "user defined frequency",
        "type": "object",
        "required": [
          "cron_type",
          "cron_freq",
          "cron_timezone",
          "cron_info",
          "consider_timezone"
        ],
        "properties": {
          "cron_type": {
            "title": "Type of cron whether recurring or onetime",
            "type": "string",
            "enum": [
              "recurring"
            ]
          },
          "cron_freq": {
            "title": "frequency",
            "type": "string",
  		  "pattern": "^.*\$"
          },
          "cron_timezone": {
            "title": "Zone of time Country/City",
            "type": "string",
  		  "pattern":"[A-Za-z][A-Za-z0-9~\/._+-]+\$"
          },
          "consider_timezone":{
            "type":"boolean"
          },
          "cron_info": {
            "type": "object",
            "properties": {
              "schedule_type": {
                "title": "Type of schedule whether its is Daily/Weekly/Monthly/Yearly/Advanced",
                "type": "string",
                "enum": [
                  "Daily",
                  "weekly",
                  "Monthly",
                  "Yearly",
                  "Advanced"
                ]
              },
              "start_date": {
                "title": "Start Date",
                "type": "string",
  			  "pattern":"^(([0-9]{4}[-]?((0[13-9]|1[012])[-]?(0[1-9]|[12][0-9]|30)|(0[13578]|1[02])[-]?31|02[-]?(0[1-9]|1[0-9]|2[0-8]))|([0-9]{2}(([2468][048]|[02468][48])|[13579][26])|([13579][26]|[02468][048]|0[0-9]|1[0-6])00)[-]?02[-]?29)\\\s([01][0-9]|2[0-3]):([012345][0-9]):([012345][0-9]))\$"
              },
              "end_date": {
                "title": "End Date",
                "type": "string",
  			  "pattern":"^(([0-9]{4}[-]?((0[13-9]|1[012])[-]?(0[1-9]|[12][0-9]|30)|(0[13578]|1[02])[-]?31|02[-]?(0[1-9]|1[0-9]|2[0-8]))|([0-9]{2}(([2468][048]|[02468][48])|[13579][26])|([13579][26]|[02468][048]|0[0-9]|1[0-6])00)[-]?02[-]?29)\\\s([01][0-9]|2[0-3]):([012345][0-9]):([012345][0-9]))\$"
              }
            },
            "required": [
              "schedule_type",
              "start_date"
            ]
          }
        }
      },
      "one_time": {
        "description": "User defined frequency",
        "type": "object",
        "required": [
          "cron_type",
          "cron_freq",
          "cron_timezone",
          "consider_timezone"
        ],
        "properties": {
          "cron_type": {
            "title": "Type of cron whether Recurring or Onetime",
            "type": "string",
            "enum": [
              "one_time"
            ]
          },
          "cron_freq": {
            "title": "crawl frequency",
            "type": "string",
  		  "pattern": "^.*\$"
          },
          "cron_timezone": {
            "title": "Zone of time Country/City",
            "type": "string",
  		  "pattern":"[A-Za-z][A-Za-z0-9~\/._+-]+\$"
          },
          "consider_timezone":{
            "type":"boolean"
          }
        }
      }
    },
    "type": "object",
    "properties": {
      "data_domain_id": {
        "title": "Data Domain Id",
        "type": "integer",
        "minimum": 1
      },
      "frequency": {
        "description": "Frequency",
        "\$ref": "#/definitions/$data.input_data.frequency.cron_type$"
      }
    },
    "required": [
      "data_domain_id",
      "frequency"
    ]
}
>>

updateProfilingFreq_template(data)::=<<
with datastore as(
update nabu.datastore set
profiling_frequency='$data.asMap.frequency.cron_freq$',
mod_by='$data.userDetails.userId$',
mod_ts=current_timestamp
where datastore_id=$data.asMap.data_domain_id$ and valid_to_ts = '9999-12-31'
),

update_job_schedule_details as(
update nabu.job_schedule_details set valid_to_ts=now()
where datastore_id=$data.asMap.data_domain_id$
and job_type_id =(select job_type_id from nabu.job_type_lookup where job_type ='profiling') and valid_to_ts  = '9999-12-31'
)

insert into nabu.job_schedule_details(job_type_id, datastore_id,refresh_frequency,additional_properties,valid_from_ts, valid_to_ts, cru_by, cru_ts) values(
(select job_type_id from nabu.job_type_lookup where job_type ='profiling'),
$data.asMap.data_domain_id$,
'$data.asMap.frequency.cron_freq$',
E'$resolveProfilingInfo(data.asMap.frequency)$',
current_timestamp,
'9999-12-31',
'$data.userDetails.userId$',
current_timestamp
)
>>

resolveProfilingInfo(data)::=<<
$if(data.cron_type)$
$resolveCronJson(data)$
$endif$
>>


// This template used to create a datastore.
// @created_by Manju (ma0253u)
// @modified_by Murthy (vk1708)
// @Api_Path : "http://localhost:port/fireshots/nabu/upd/sq/restCatalog/addDataDomain"


addDataDomain(data)::=<<
{
  "input_data": $data.asString$,
  "sequential_queries": [
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "addDataDomain_schema",
      "validation_key": "input_data",
      "query_type":"validation"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "addDatastore_checks",
      "query_output_key": "checks",
      "query_type":"select",
      "post_process": ["checks"]
    },
    {
       "query_template_group": "$data.STPath$/restCatalog.stg",
        "query_template_name": "getMetadataCategory",
        "query_output_key":"metadata_category",
        "query_type":"select"
     },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "addDataDomain_template",
      "query_output_key":"data",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "getProfilingFlag",
      "query_output_key":"profiling_flag",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "addDataDomainComputeEngineMapping",
      "query_output_key":"datastore_compute_engine_mapping",
      "query_type":"insert"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "addDataDomainCollectionMapping",
      "query_output_key":"datastore_collection_mapping",
      "query_type":"insert"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "addDataDomainIndexingMapping",
      "query_output_key":"datastore_indexing_mapping",
      "query_type":"insert"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "getdataDomainDetails",
      "query_output_key":"connection",
      "query_type":"create",
      "service_name":"connection"
    },
    {
        "query_template_group": "$data.STPath$/restCatalog.stg",
        "query_template_name": "logTemplate_add_dataDomain",
        "query_type":"log",
        "log_service":"auditLog"
    }
  ],
  "output_keys":["data","connection"]
}
>>

addDataDomain_schema(data)::=<<
{
  "\$schema": "http://json-schema.org/draft-04/schema#",
   "definitions": {
   "recurring":{
   			    "description":"user defined crawling frequency",
   		    	"type":"object",
   			    "required": [
   				    "cron_type",
   				    "cron_freq",
   				    "cron_timezone",
   				    "cron_info",
				    "consider_timezone"
   			    ],
   			    "properties":{
       				"cron_type":{
   					  "title":"Type of cron whether Recurring or Onetime",
   					  "type":"string",
   				  	"enum": ["recurring"]
   				  },
   				  "cron_freq":{
     					"title":"crawl frequency",
   					  "type":"string",
   					  "pattern": "^.*\$"
   			  	},
   				  "cron_timezone":{
   					  "title":"Zone of time Country/City",
   					  "type":"string"
   			  	},
				"consider_timezone":{
					"type":"boolean"
				},
   			  	"cron_info":{
   					  "type":"object",
   					  "properties":{
   						  "schedule_type":{
   						  	"title":"Type of schedule whether its is Daily/Weekly/Monthly/Yearly/Advanced",
   							  "type":"string",
   						  	"enum": ["Daily","weekly","Monthly","Yearly","Advanced"]
   						  },
   						  "start_date":{
   							  "title":"Start Date",
   							  "type":"string"   						},
   						  "end_date":{
   							  "title":"End Date",
   							  "type":"string"   						}
   					},
   					  "required": [
   						  "schedule_type",
   						  "start_date"
   					  ]
   				  }
   			  }
   		  },
   		"one_time":{
   			"description":"user defined crawling frequency",
   			"type":"object",
   			"required": [
   				"cron_type",
   				"cron_freq",
   				"cron_timezone",
				"consider_timezone"
   			],
   			"properties":{
   				"cron_type":{
   					"title":"Type of cron whether Recurring or Onetime",
   					"type":"string",
   					"enum": ["one_time"]
   				},
   				"cron_freq":{
   					"title":"crawl frequency",
   					"type":"string",
   					"pattern": "^.*\$"
   				},
   				"cron_timezone":{
   					"title":"Zone of time Country/City",
   					"type":"string"
   				},
				"consider_timezone":{
					"type":"boolean"
				}
   			}
   		}
   	},
  "type": "object",
  "properties": {
    "data_domain_name": {
      "type": "string",
	   "minLength": 3,
       "maxLength": 75,
       "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$"
    },
    "data_domain_info": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      },
      "required": [
        "email"
      ]
    },
    "connection_type": {
      "type": "string",
	  "enum": [
        "postgres",
        "oracle",
        "sql_server",
        "mysql",
        "SAS",
        "hive",
        "gcs",
        "mongodb",
        "bigquery",
	"azure_synapse",
        "netezza"
      ]
    },
    "data_domain_details": {
      "type": "array",
      "items": [
        {
          "type": "object",
          "properties": {
            "data_connection_id": {
              "type": "integer",
			   "minimum": 1
            },
            "data_connection_name": {
              "type": "string",
              "minLength": 3,
              "maxLength": 75,
              "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$"
            },
            "schema_id": {
              "type": "integer",
			   "minimum": 1
            },
            "schema_name": {
              "type": "string"
            },
            "filter_all_tables_views": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                }
              ]
            },
            "all_tables": {
              "type": "boolean"
            },
            "all_views": {
              "type": "boolean"
            },
            "all_mviews": {
              "type": "boolean"
            },
            "filters_list": {
              "type": "array",
              "items": [
                {
                  "type": "object",
                  "properties": {
                    "filter_type_id": {
                      "type": "integer"
                    },
                    "filter_type": {
                      "type": "string"
                    },

                    "filter_value": {
                      "type": "array"
                    }

                  },
                  "required": [
                    "filter_type_id",
                    "filter_type",
                    "filter_value"
                  ]
                }
              ]
            }
          },
          "required": [
            "data_connection_id",
            "schema_id",
            "filter_all_tables_views",
            "filters_list"
          ]
        }
      ]
    },
    "profiling_frequency": {
     "description": "Profiling Frequency",
     "\$ref": "#/definitions/$data.input_data.profiling_frequency.cron_type$"
    },
    "indexing_frequency": {
       "description": "Indexing Frequency",
       "\$ref": "#/definitions/$data.input_data.indexing_frequency.cron_type$"
    },
    "filter_resolving_frequency": {
      "description": "Filter Resolving Frequency",
       "\$ref": "#/definitions/$data.input_data.filter_resolving_frequency.cron_type$"
    },
    "tags": {
      "type": "array",
      "items": [
        {
          "type": "object",
          "properties": {
            "tag_category_name": {
              "type": "string"
            },
            "tag_value": {
              "type": "string"
            },
            "tag_category_id": {
              "type": "integer"
            },
            "tag_label_id": {
              "type": "integer"
            },
            "tag_category_color": {
              "type": "string"
            },
            "previous_tag_label_id": {
              "type": "string"
            }
          },
          "required": [
            "tag_category_name",
            "tag_value",
            "tag_category_id",
            "tag_label_id",
            "tag_category_color"
          ]
        }
      ]
    },
    "data_domain_info.description": {
      "type": "string"
    },
    "profiling_configuration": {
      "type": "object",
      "properties": {
        "compute_engine_id": {
          "type": "integer",
           "minimum": 1
        },
        "workflow_engine_id": {
          "type": "integer",
           "minimum": 1
        },
        "priority": {
          "type": "string"
        }
      },
      "required": [
        "compute_engine_id",
        "workflow_engine_id",
        "priority"
      ]
    },
    "indexing_configuration": {
      "type": "object",
      "properties": {
        "compute_engine_id": {
          "type": "integer",
           "minimum": 1
        },
        "workflow_engine_id": {
          "type": "integer",
           "minimum": 1
        },
        "priority": {
          "type": "string"
        }
      },
      "required": [
        "compute_engine_id",
        "workflow_engine_id",
        "priority"
      ]
    },
    "filter_resolving_configuration": {
      "type": "object",
      "properties": {
        "workflow_engine_id": {
          "type": "integer",
           "minimum": 1
        }
      },
      "required": [
        "workflow_engine_id"
      ]
    }
  },
  "required": [
    "data_domain_name",
    "connection_type",
    "indexing_frequency",
    "tags",
    "indexing_configuration",
    "filter_resolving_frequency",
    "filter_resolving_configuration"
  ]
}
>>

addDatastore_checks(data)::=<<
select $false:UniqueDatastoreName(data)$
>>

UniqueDatastoreName(modify, data)::=<<
not exists(select * from nabu.datastore where valid_to_ts='9999-12-31' and lower(datastore_name)=lower('$data.asMap.data_domain_name$') $if(modify)$and datastore_id<>$data.input_data.data_domain_id$$endif$) "unique"
>>

getMetadataCategory(data)::=<<
with get_metadata_category  as(
select dataplace_sub_component_id, dataplace_component_type_id from nabu.dataplace_physical dp
where dataplace_id = $first(data.input_data.data_domain_details).data_connection_id$
and valid_to_ts ='9999-12-31'
)
select metadata_category from nabu.dataplace_component_mapping_lookup
where dataplace_sub_component_id=(select dataplace_sub_component_id from get_metadata_category) and
dataplace_component_type_id =(select dataplace_component_type_id from get_metadata_category)
>>

addDataDomain_template(data)::=<<
with connection_profile_id as
(
select connection_profile_id from nabu.connection_profile where connection_type = '$data.asMap.connection_type$'
),
datastore_id as
(
insert into nabu.datastore
(datastore_name,profiling_frequency,indexing_frequency,filter_resolving_frequency,valid_from_ts,valid_to_ts,crt_by,crt_ts,mod_by,mod_ts,connection_profile_id,datastore_info,additional_info)values
('$data.asMap.data_domain_name$',
'$data.asMap.profiling_frequency.cron_freq$',
'$data.asMap.indexing_frequency.cron_freq$',
'$data.asMap.filter_resolving_frequency.cron_freq$',
current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp,'$data.userDetails.userId$',current_timestamp,
(select * from connection_profile_id),E'$resolveDatastoreInfoJson(data.asMap.data_domain_info)$','{}')
returning datastore_id),
datastore_schema_definition as
(
insert into nabu.datastore_schema_definition
(datastore_id,datalayer_component_id,dataplace_id,schema_id,filter_type_id,filter_all_tables_views,filter_rule,priority_order,valid_from_ts,valid_to_ts,crt_by,crt_ts,mod_by,mod_ts)
values
$data.asMap.data_domain_details:forEachDatastoreInsert(data);separator=","$
),
dte1 as
(
INSERT INTO nabu_ui.roles_info
(role_name, role_scope_id ,valid_from_ts, valid_to_ts,crt_by, crt_ts, mod_by, mod_ts)
        VALUES('$data.input_data.data_domain_name$_read', 2, now(), '9999-12-31', '$data.userDetails.userId$', now(),
        '$data.userDetails.userId$', now())
         returning role_id
 ),
 dt1 as (
 insert into nabu_ui.datastore_role_mapping(role_id,datastore_id,data_access_type_id)
 select role_id,(select datastore_id from datastore_id),1 from dte1
 ),
 dte2 as
(
INSERT INTO nabu_ui.roles_info
(role_name, role_scope_id ,valid_from_ts, valid_to_ts,crt_by, crt_ts, mod_by, mod_ts)
        VALUES('$data.input_data.data_domain_name$_write', 2, now(),
        '9999-12-31', '$data.userDetails.userId$', now(), '$data.userDetails.userId$', now())
         returning role_id
 ),
 dt2 as (
 insert into nabu_ui.datastore_role_mapping(role_id,datastore_id,data_access_type_id)
 select role_id,(select datastore_id from datastore_id),2 from dte2
 ),
  dte3 as
(
INSERT INTO nabu_ui.roles_info
(role_name, role_scope_id ,valid_from_ts, valid_to_ts,crt_by, crt_ts, mod_by, mod_ts)
        VALUES('$data.input_data.data_domain_name$_metadata', 2, now(),
        '9999-12-31', '$data.userDetails.userId$', now(), '$data.userDetails.userId$', now())
         returning role_id
 ),
 dt3 as (
 insert into nabu_ui.datastore_role_mapping(role_id,datastore_id,data_access_type_id)
 select role_id,(select datastore_id from datastore_id),3 from dte3
 ),
 dte4 as
(
INSERT INTO nabu_ui.roles_info
(role_name, role_scope_id ,valid_from_ts, valid_to_ts,crt_by, crt_ts, mod_by, mod_ts)
        VALUES('$data.input_data.data_domain_name$_datastore_owner', 2, now(),
        '9999-12-31', '$data.userDetails.userId$', now(), '$data.userDetails.userId$', now())
         returning role_id
 ),
 dt4 as (
 insert into nabu_ui.datastore_role_mapping(role_id,datastore_id,data_access_type_id)
 select role_id,(select datastore_id from datastore_id),4 from dte4
 ),
 dte5 as
(
INSERT INTO nabu_ui.roles_info
(role_name, role_scope_id ,valid_from_ts, valid_to_ts,crt_by, crt_ts, mod_by, mod_ts)
        VALUES('$data.input_data.data_domain_name$_reviewer', 2, now(),
        '9999-12-31', '$data.userDetails.userId$', now(), '$data.userDetails.userId$', now())
         returning role_id
 ),
 dt5 as (
 insert into nabu_ui.datastore_role_mapping(role_id,datastore_id,data_access_type_id)
 select role_id,(select datastore_id from datastore_id),5 from dte5
 ),
 assign_datastore_owner_access as (
 INSERT INTO nabu_ui.env_group_role_info
(env_group_name, env_group_type_id, role_id)
VALUES('$data.userDetails.userId$',1, (select role_id from dte5)),
      ('$data.userDetails.userId$',1, (select role_id from dte4)),
      ('$data.userDetails.userId$',1, (select role_id from dte3)),
      ('$data.userDetails.userId$',1, (select role_id from dte2)),
      ('$data.userDetails.userId$',1, (select role_id from dte1))
)

$if(data.asMap.tags)$
$"datastore":resolveTags(data)$
$endif$
,table_ids as
(
$data.asMap.data_domain_details:sourceDetails();separator="\n union all \n"$
)
,insert_table_details as(
insert into nabu.datastore_table_mapping
(datastore_id,dataplace_id,schema_id,table_id,valid_from_ts,valid_to_ts,crt_by,crt_ts)
select (select datastore_id from datastore_id), dataplace_id, schema_id, table_id,
current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp
from table_ids)
,insert_job_schedule_details as(
insert into nabu.job_schedule_details(job_type_id, datastore_id,refresh_frequency,additional_properties, valid_from_ts, valid_to_ts, cru_by, cru_ts) values
$if(data.asMap.profiling_frequency.cron_type)$
((select job_type_id from nabu.job_type_lookup where job_type ='profiling'),(select datastore_id from datastore_id),'$data.asMap.profiling_frequency.cron_freq$',
'$resolveProfileInfo(data.asMap.profiling_frequency)$',current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp),
$endif$
((select job_type_id from nabu.job_type_lookup where job_type ='indexing'),(select datastore_id from datastore_id),'$data.asMap.indexing_frequency.cron_freq$',
'$resolveIndexingInfo(data.asMap.indexing_frequency)$',current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp)
$if(data.asMap.filter_resolving_frequency.cron_type)$
,((select job_type_id from nabu.job_type_lookup where job_type ='filter_resolving'),(select datastore_id from datastore_id),'$data.asMap.filter_resolving_frequency.cron_freq$',
'$resolveFilterResolvingFrequencyInfo(data.asMap.filter_resolving_frequency)$',current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp)
$endif$
)
select datastore_id as data_domain_id from datastore_id;
>>

resolveTags(resource, data)::=<<
,update_tag_category_details as(
    update nabu_ui.tag_category_details
    set mod_by='$data.userDetails.userId$',mod_ts=now()
    where tag_category_id in ($data.input_data.tags: {tag |$tag.tag_category_id$}; separator=","$)
)
,insert_tag_category_details as(
    insert into nabu_ui.tag_category_details(tag_category_id,icon_id,other_info,crt_by,crt_ts,mod_by,mod_ts)
    select * from (values
        $data.input_data.tags: {tag |  ($tag.tag_category_id$,0,'{"default":true,"checked":false\}'::jsonb,'$data.userDetails.userId$',current_timestamp,'$data.userDetails.userId$',current_timestamp)}; separator=","$
    )a (tag_category_id,icon_id,other_info,crt_by,crt_ts,mod_by,mod_ts)
    where tag_category_id not in (select tag_category_id from nabu_ui.tag_category_details)
)
,tags as(
    insert into nabu_ui.tag_$resource$($resource$_id,tag_label_id,valid_from_ts,valid_to_ts,crt_by,crt_ts,mod_by,mod_ts)(
        select distinct $resource$_id,a.* from (values
            $data.input_data.tags: {tag |  ($tag.tag_label_id$,current_timestamp,'9999-12-31'::timestamp,'$data.userDetails.userId$',current_timestamp,'$data.userDetails.userId$',current_timestamp)}; separator=",\n"$
        )a (tag_label_id,valid_from_ts,valid_to_ts,crt_by,crt_ts,mod_by,mod_ts), $resource$_id
    )
)
>>

resolveDatastoreInfoJson(datastoreInfo)::=<<
{

    "owner": "$datastoreInfo.owner$",
    "email": "$datastoreInfo.email$",
    "description": "$datastoreInfo.description$"
}
>>

resolveAdditionalInfoJson(data)::=<<
{
$if(data.asMap.profiling_frequency.cron_type)$
"profiling_frequency": $resolveCronJson(data.asMap.profiling_frequency)$
$endif$
$if(data.asMap.indexing_frequency.cron_type)$
,"indexing_frequency": $resolveCronJson(data.asMap.indexing_frequency)$
$endif$
$if(data.asMap.filter_resolving_frequency.cron_type)$
,"filter_resolving_frequency": $resolveCronJson(data.asMap.filter_resolving_frequency)$
$endif$
}
>>

resolveFilterResolvingFrequencyInfo(cronJson,data)::=<<
{
	"cron_type":"$cronJson.cron_type$",
	"cron_freq":"$cronJson.cron_freq$",
	"cron_timezone":"$cronJson.cron_timezone$",
	"consider_timezone":$cronJson.consider_timezone$
	$if(cronJson.cron_info)$
	,"cron_info":$resolveCronInfo(cronJson.cron_info)$
	$endif$
}
>>

resolveProfileInfo(cronJson,data)::=<<
{
	"cron_type":"$cronJson.cron_type$",
	"cron_freq":"$cronJson.cron_freq$",
	"cron_timezone":"$cronJson.cron_timezone$",
	"consider_timezone":$cronJson.consider_timezone$
	$if(cronJson.cron_info)$
	,"cron_info":$resolveCronInfo(cronJson.cron_info)$
	$endif$
}
>>

resolveIndexingInfo(cronJson,data)::=<<
{
	"cron_type":"$cronJson.cron_type$",
	"cron_freq":"$cronJson.cron_freq$",
	"cron_timezone":"$cronJson.cron_timezone$",
	"consider_timezone":$cronJson.consider_timezone$
	$if(cronJson.cron_info)$
	,"cron_info":$resolveCronInfo(cronJson.cron_info)$
	$endif$
}
>>

resolveCronInfo(cronInfo, data)::=<<
{
	"schedule_type":"$cronInfo.schedule_type$",
    "start_date":"$cronInfo.start_date$"
	$if(cronInfo.end_date)$
    ,"end_date":"$cronInfo.end_date$"
	$endif$
}
>>

forEachDatastoreInsert(source,data)::=<<
$source.filters_list:forEachFilter(source,data);separator=","$
>>

forEachFilter(filter,source,data)::=<<
((select * from datastore_id),1,$source.data_connection_id$,$source.schema_id$,$filter.filter_type_id$,
'[$source.filter_all_tables_views:resolveJsonArrayString();separator=","$]',
'[$filter.filter_value:resolveFilter(filter);separator=","$]',$filter.priority_order$,
current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp,'$data.userDetails.userId$',current_timestamp)
>>

forEachDatastoremappingInsert(table_id,data)::=<<
((select table_id from table_ids),(select * from datastore_id),(select dataplace_id from table_ids),(select schema_id from table_ids),(select table_id from table_ids),
current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp,'$data.userDetails.userId$',current_timestamp)
>>

sourceDetails(source)::=<<
$([first(data.metadata_category).metadata_category,"_sourceDetails",])(source,data)$
>>

relational_sourceDetails(source,data)::=<<
select table_id,a.schema_id,a.dataplace_id
from nabu.dataplace_table_metadata a
inner join nabu.dataplace_relational_component b on a.schema_id=b.schema_id
inner join nabu.dataplace c on b.dataplace_id=c.dataplace_id
where 1=1
and a.dataplace_id = $source.data_connection_id$
and a.schema_id = $source.schema_id$
and a.table_type in ('$source.filter_all_tables_views;separator="','"$')
and a.valid_to_ts='9999-12-31'
and b.valid_to_ts='9999-12-31'
and c.valid_to_ts='9999-12-31'
$source.filters_list:getFilterTable(first(data.metadata_category).metadata_category)$
>>

collection_sourceDetails(source,data)::=<<
select collection_id as table_id,a.schema_id,a.dataplace_id
from nabu.dataplace_collection_metadata a
inner join nabu.dataplace_relational_component b on a.schema_id=b.schema_id
inner join nabu.dataplace c on b.dataplace_id=c.dataplace_id
where 1=1
and a.dataplace_id = $source.data_connection_id$
and a.schema_id = $source.schema_id$
and a.valid_to_ts='9999-12-31'
and b.valid_to_ts='9999-12-31'
and c.valid_to_ts='9999-12-31'
$source.filters_list:getFilterTable(first(data.metadata_category).metadata_category)$
>>

file_sourceDetails(source,data)::=<<
select file_id as table_id,a.directory_id as schema_id,a.dataplace_id
from nabu.dataplace_file_metadata a
inner join nabu.dataplace_file_system_component b on a.directory_id = b.directory_id
inner join nabu.dataplace c on b.dataplace_id=c.dataplace_id
where 1=1
and a.dataplace_id = $source.data_connection_id$
and a.directory_id = $source.schema_id$
and a.valid_to_ts='9999-12-31'
and b.valid_to_ts='9999-12-31'
and c.valid_to_ts='9999-12-31'
$source.filters_list:getFilterTable(first(data.metadata_category).metadata_category)$
>>

getFilterTable(map,category)::=<<
$([map.filter_name,map.filter_type_id])(map,category)$
>>

inclusive_regex1(map1,category)::=<<
and $([category,"FilterColumn"])()$  ~*'$map1.filter_value;separator=""$'
>>

exclusive_regex2(map1)::=<<
and $([category,"FilterColumn"])()$ !~*'$map1.filter_value;separator=""$'
>>

inclusive_like3(map1)::=<<
and $([category,"FilterColumn"])()$ like '%$map1.filter_value;separator=""$%'
>>

exclusive_like4(map1)::=<<
and $([category,"FilterColumn"])()$ not like '%$map1.filter_value;separator=""$%'
>>

static5(map1)::=<<
and $([category,"StaticFilterColumn"])()$ in ($map1.filter_value;separator=","$)
>>

none6(map1)::=<<
>>

relationalFilterColumn()::=<<
table_name
>>

relationalStaticFilterColumn()::=<<
table_id
>>

collectionFilterColumn()::=<<
collection_name
>>

collectionStaticFilterColumn()::=<<
collection_id
>>

fileFilterColumn()::=<<
file_name
>>

fileStaticFilterColumn()::=<<
file_id
>>

resolveFilter(item,map)::=<<
$(map.filter_name)(item)$
>>

inclusive_regex(map)::=<<
$resolveJsonArrayString(map)$
>>

exclusive_regex(map)::=<<
$resolveJsonArrayString(map)$
>>

inclusive_like(map)::=<<
$resolveJsonArrayString(map)$
>>

exclusive_like(map)::=<<
$resolveJsonArrayString(map)$
>>

static(map)::=<<
$resolveJsonArrayInt(map)$
>>

none(map)::=<<
>>

resolveJsonArrayInt(element)::=<<
$element$
>>

resolveJsonArrayString(element)::=<<
"$element$"
>>

logTemplate_add_dataDomain(data)::=<<

{"audit_event_type_id" : 12 , "user_id" : "$data.userDetails.userId$","datastore_id" :$first(data.data).data_domain_id$,"log_time " : "$data.log_time$" }
>>

getProfilingFlag(data)::=<<
select case when char_length('$data.input_data.profiling_frequency$')>0 then true else false end as profiling_flag;
>>

addDataDomainComputeEngineMapping(data)::=<<
with indexing_workflow_id as (
select workflow_id from nabu.bot_configuration_workflow a inner join nabu.compute_engine b on a.engine_mapping_id  = b.engine_mapping_id
where workflow_type = 'Indexing'
and compute_engine_id = $data.input_data.indexing_configuration.compute_engine_id$ and b.valid_to_ts = '9999-12-31'
)

$if(first(data.profiling_flag).profiling_flag)$
,profiling_workflow_id as(
select workflow_id from nabu.bot_configuration_workflow a inner join nabu.compute_engine b on a.engine_mapping_id  = b.engine_mapping_id
where workflow_type = 'Profiling'
and compute_engine_id = $data.input_data.profiling_configuration.compute_engine_id$ and b.valid_to_ts = '9999-12-31'
)
$endif$

,filter_resolving_workflow_id as (
select workflow_id from nabu.bot_configuration_workflow where workflow_type = 'DatastoreFilterResolving' group by workflow_id
)


INSERT INTO nabu.datastore_compute_engine_mapping (datastore_id, compute_engine_id, workflow_engine_id, workflow_id, cru_by, cru_ts,job_type_id)

$if(first(data.profiling_flag).profiling_flag)$
select $first(data.data).data_domain_id$ as datastore_id,
$data.input_data.profiling_configuration.compute_engine_id$ as compute_engine_id,
$data.input_data.profiling_configuration.workflow_engine_id$ as workflow_engine_id,
(select workflow_id from profiling_workflow_id) as workflow_id,
'$data.userDetails.userId$' as cru_by,
now() as cru_ts,(select job_type_id from nabu.job_type_lookup where job_type ='profiling') as job_type_id
union all
$endif$

select $first(data.data).data_domain_id$ as datastore_id,
$data.input_data.indexing_configuration.compute_engine_id$ as compute_engine_id,
$data.input_data.filter_resolving_configuration.workflow_engine_id$ as workflow_engine_id,
(select workflow_id from filter_resolving_workflow_id) as workflow_id,
'$data.userDetails.userId$' as cru_by,
now() as cru_ts,(select job_type_id from nabu.job_type_lookup where job_type ='filter_resolving') as job_type_id
union all
select $first(data.data).data_domain_id$ as datastore_id,
$data.input_data.indexing_configuration.compute_engine_id$ as compute_engine_id,
$data.input_data.indexing_configuration.workflow_engine_id$ as workflow_engine_id,
(select workflow_id from indexing_workflow_id) as workflow_id,
'$data.userDetails.userId$' as cru_by,
now() as cru_ts,(select job_type_id from nabu.job_type_lookup where job_type ='indexing') as job_type_id
>>

addDataDomainCollectionMapping(data)::=<<
insert into nabu.datastore_collection_mapping(datastore_id,collection_name,status)
values($first(data.data).data_domain_id$,'datastore_$first(data.data).data_domain_id$','false')
>>

addDataDomainIndexingMapping(data)::=<<
insert into nabu.datastore_indexing_mapping(datastore_id, tables_index, columns_index, search_index, data_index, metadata_index)
values($first(data.data).data_domain_id$,'true','true','true','true','true')
>>

getdataDomainDetails(data)::=<<
select
        json_agg(
                jsonb_build_object('dataplace_id', dpc.dataplace_id, 'connection_type', dpc.connection_type,
                'jdbc_driver', jdbc_driver,'host_url', dpc.host_url, 'database_name', dpc.source_info->\>'database_name',
                'credential_id', dpc.credential_id, 'credential_type', ctl.credential_type, 'credential_source', dpc.credential_source ,
                'vault_entry_key', dpc.vault_entry_key, 'vault_entry_details', dpc.vault_entry_details,
                'vault_id', dpc.vault_id, 'directory', dpc.directory) ) as datastore_details
from
        (
        select
                case
                        when cp.connection_type = 'hive' then dpe.source_info->'jdbc_info'->\>'jdbc_url'
                        else dpe.source_info->\>'host_name' end as host_url ,
                        case when cp.connection_type = 'SAS' then dpe.source_info->\>'location_path'
                             else null end as directory,
                        case when ci.credential_type_id = 9 then cp.additional_info->\>'hive_jdbc_driver'
                                 else cp.additional_info->\>'jdbc_driver' end as jdbc_driver,
                                dpe.*,
                                cp.connection_type,
                                ci.credential_type_id,
                                cp.additional_info,
                                ci.credential_source ,
                                ci.vault_entry_key ,
                                ci.vault_entry_details,
                                ci.vault_id
                        from
                                (
                                select
                                        dp.*
                                from
                                        (
                                        select
                                                distinct dsd.dataplace_id
                                        from
                                                nabu.datastore d ,
                                                nabu.datastore_schema_definition dsd
                                        where
                                                d.datastore_id = dsd.datastore_id
                                                and d.valid_to_ts = '9999-12-31'
                                                and dsd.valid_to_ts = '9999-12-31'
                                                and d.datastore_id =$first(data.data).data_domain_id$
                                        ) as dpd
                                inner join nabu.dataplace as dp on
                                        dpd.dataplace_id = dp.dataplace_id) as dpe
                        left outer join nabu.credential_info as ci on
                                dpe.credential_id = ci.credential_id
                        inner join nabu.connection_profile cp on
                                cp.connection_profile_id = dpe.connection_profile_id ) as dpc
left outer join nabu.credential_type_lookup as ctl on
        ctl.credential_type_id = dpc.credential_type_id
>>

// This template is used to update datastore information.
// @created_by Rahul (rr0208)
// @modified_by Murthy (vk1708)
// @Api_Path : "http://localhost:8893/fireshots/nabu/upd/sq/restCatalog/modifyDataDomain"

modifyDataDomain(data)::=<<
{
  "input_data": $data.asString$,
  "sequential_queries": [
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "modifyDataDomain_schema",
      "validation_key": "input_data",
      "query_type":"validation"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "checkAccessForSuperAdminRole",
      "query_output_key": "checkAccess",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "modifyDatastore_checks",
      "query_output_key": "checks",
      "query_type":"select",
      "post_process": ["checks"]
    },
    {
       "query_template_group": "$data.STPath$/restCatalog.stg",
        "query_template_name": "getMetadataCategory",
        "query_output_key":"metadata_category",
        "query_type":"select"
     },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "modifyDataDomain_template",
      "query_output_key":"data",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "getProfilingFlag",
      "query_output_key":"profiling_flag",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "updateDataDomainComputeEngineMapping",
      "query_output_key":"datastore_compute_engine_mapping",
      "query_type":"insert"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "getDataDomainDetails",
      "query_output_key":"connection",
      "query_type":"create",
      "service_name":"connection"
    },
    {
        "query_template_group": "$data.STPath$/restCatalog.stg",
        "query_template_name": "logTemplate_modifyDataDomain",
        "query_type":"log",
        "log_service":"auditLog"
      }
  ],
  "output_keys":["data","connection"]
}
>>

modifyDataDomain_schema(data)::=<<
{
  "\$schema": "http://json-schema.org/draft-04/schema#",
   "definitions": {
   "recurring":{
   			    "description":"user defined crawling frequency",
   		    	"type":"object",
   			    "required": [
   				    "cron_type",
   				    "cron_freq",
   				    "cron_timezone",
   				    "cron_info",
				    "consider_timezone"
   			    ],
   			    "properties":{
       				"cron_type":{
   					  "title":"Type of cron whether Recurring or Onetime",
   					  "type":"string",
   				  	"enum": ["recurring"]
   				  },
   				  "cron_freq":{
     					"title":"crawl frequency",
   					  "type":"string",
   					  "pattern": "^.*\$"
   			  	},
   				  "cron_timezone":{
   					  "title":"Zone of time Country/City",
   					  "type":"string"
   			  	},
				"consider_timezone":{
					"type":"boolean"
				},
   			  	"cron_info":{
   					  "type":"object",
   					  "properties":{
   						  "schedule_type":{
   						  	"title":"Type of schedule whether its is Daily/Weekly/Monthly/Yearly/Advanced",
   							  "type":"string",
   						  	"enum": ["Daily","weekly","Monthly","Yearly","Advanced"]
   						  },
   						  "start_date":{
   							  "title":"Start Date",
   							  "type":"string"
   						},
   						  "end_date":{
   							  "title":"End Date",
   							  "type":"string"
   						    }
   					},
   					  "required": [
   						  "schedule_type",
   						  "start_date"

   					  ]
   				  }
   			  }
   		  },
   		"one_time":{
   			"description":"user defined crawling frequency",
   			"type":"object",
   			"required": [
   				"cron_type",
   				"cron_freq",
   				"cron_timezone"
   			],
   			"properties":{
   				"cron_type":{
   					"title":"Type of cron whether Recurring or Onetime",
   					"type":"string",
   					"enum": ["one_time"]
   				},
   				"cron_freq":{
   					"title":"crawl frequency",
   					"type":"string"
   				},
   				"cron_timezone":{
   					"title":"Zone of time Country/City",
   					"type":"string"
   				},
				"consider_timezone":{
					"type":"boolean"
				}
   			}
   		}
   	},
  "type": "object",
  "properties": {
    "data_domain_id":{
        "type":"integer",
         "minimum": 1
    },
    "data_domain_name": {
      "type": "string",
	   "minLength": 3,
       "maxLength": 75,
       "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$"
    },
    "data_domain_info": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      },
      "required": [
        "email"
      ]
    },
    "connection_type": {
      "type": "string",
	  "enum": [
        "postgres",
        "oracle",
        "sql_server",
        "mysql",
        "SAS",
        "hive",
        "gcs",
        "mongodb",
	"azure_synapse",
        "netezza",
        "bigquery"
      ]
    },
    "data_domain_details": {
      "type": "array",
      "items": [
        {
          "type": "object",
          "properties": {
            "data_connection_id": {
              "type": "integer",
			   "minimum": 1
            },
            "data_connection_name": {
              "type": "string"
              "minLength": 3,
              "maxLength": 75,
              "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$"
            },
            "schema_id": {
              "type": "integer",
			   "minimum": 1
            },
            "schema_name": {
              "type": "string"
            },
            "filter_all_tables_views": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                }
              ]
            },
            "all_tables": {
              "type": "boolean"
            },
            "all_views": {
              "type": "boolean"
            },
            "all_mviews": {
              "type": "boolean"
            },
            "filters_list": {
              "type": "array",
              "items": [
                {
                  "type": "object",
                  "properties": {
                    "filter_type_id": {
                      "type": "integer"
                    },
                    "filter_type": {
                      "type": "string"
                    },

                    "filter_value": {
                      "type": "array"
                    }

                  },
                  "required": [
                    "filter_type_id",
                    "filter_type",
                    "filter_value"
                  ]
                }
              ]
            }
          },
          "required": [
            "data_connection_id",
            "schema_id",
            "filter_all_tables_views",
            "filters_list"
          ]
        }
      ]
    },
    "profiling_frequency": {
     "description": "Profiling Frequency",
     "\$ref": "#/definitions/$data.input_data.profiling_frequency.cron_type$"
    },
    "indexing_frequency": {
       "description": "Indexing Frequency",
       "\$ref": "#/definitions/$data.input_data.indexing_frequency.cron_type$"
    },
    "filter_resolving_frequency": {
      "description": "Filter Resolving Frequency",
       "\$ref": "#/definitions/$data.input_data.filter_resolving_frequency.cron_type$"
    },
    "tags": {
      "type": "array",
      "items": [
        {
          "type": "object",
          "properties": {
            "tag_category_name": {
              "type": "string"
            },
            "tag_value": {
              "type": "string"
            },
            "tag_category_id": {
              "type": "integer"
            },
            "tag_label_id": {
              "type": "integer"
            },
            "tag_category_color": {
              "type": "string"
            },
            "previous_tag_label_id": {
              "type": "string"
            }
          },
          "required": [
            "tag_category_name",
            "tag_value",
            "tag_category_id",
            "tag_label_id",
            "tag_category_color"
          ]
        }
      ]
    },
    "data_domain_info.description": {
      "type": "string"
    },
    "profiling_configuration": {
      "type": "object",
      "properties": {
        "compute_engine_id": {
          "type": "integer",
           "minimum": 1
        },
        "workflow_engine_id": {
          "type": "integer",
           "minimum": 1
        },
        "priority": {
          "type": "string"
        }
      },
      "required": [
        "compute_engine_id",
        "workflow_engine_id",
        "priority"
      ]
    },
    "indexing_configuration": {
      "type": "object",
      "properties": {
        "compute_engine_id": {
          "type": "integer",
           "minimum": 1
        },
        "workflow_engine_id": {
          "type": "integer",
           "minimum": 1
        },
        "priority": {
          "type": "string"
        }
      },
      "required": [
        "compute_engine_id",
        "workflow_engine_id",
        "priority"
      ]
    },
    "filter_resolving_configuration": {
      "type": "object",
      "properties": {
        "workflow_engine_id": {
          "type": "integer",
           "minimum": 1
        }
      },
      "required": [
        "workflow_engine_id"
      ]
    }
  },
  "required": [
    "data_domain_id",
    "data_domain_name",
    "connection_type",
    "indexing_frequency",
    "tags",
    "indexing_configuration",
	"filter_resolving_frequency",
	"filter_resolving_configuration"
  ]
}
>>

modifyDatastore_checks(data)::=<<
select $ValidDatadomain(data)$, ($datastoreAccessCheck(data)$) as "access", $true:UniqueDatastoreName(data)$
>>

modifyDataDomain_template(data)::=<<
with connection_profile_id as
(select connection_profile_id from nabu.connection_profile where connection_type = '$data.asMap.connection_type$'
),
datastore as(
update nabu.datastore set
datastore_name='$data.asMap.data_domain_name$',
profiling_frequency='$data.asMap.profiling_frequency.cron_freq$',
indexing_frequency='$data.asMap.indexing_frequency.cron_freq$',
filter_resolving_frequency='$data.asMap.filter_resolving_frequency.cron_freq$',
valid_from_ts=current_timestamp,
valid_to_ts='9999-12-31',
mod_by='$data.userDetails.userId$',
mod_ts=current_timestamp,
connection_profile_id=(select * from connection_profile_id),
datastore_info=E'$resolveDatastoreInfoJson(data.asMap.data_domain_info)$'
where datastore_id=$data.asMap.data_domain_id$
returning crt_by,crt_ts
),
update_datastore_schema_definition as(
update nabu.datastore_schema_definition set valid_to_ts=now(),
mod_by='$data.userDetails.userId$',
mod_ts=current_timestamp
where datastore_id=$data.asMap.data_domain_id$
and valid_to_ts='9999-12-31'
),
update_datastore_table_mapping as(
update nabu.datastore_table_mapping set valid_to_ts=now(),
crt_by='$data.userDetails.userId$',
crt_ts=current_timestamp
where datastore_id=$data.asMap.data_domain_id$
and valid_to_ts='9999-12-31'
),
datastore_schema_definition as(
insert into nabu.datastore_schema_definition
(datastore_id,datalayer_component_id,dataplace_id,schema_id,filter_type_id,filter_all_tables_views,filter_rule,priority_order,valid_from_ts,valid_to_ts,crt_by,crt_ts,mod_by,mod_ts)
values
$data.asMap.data_domain_details:forEachDatastoreInsertUpd(data);separator=","$
returning datastore_id
),
update_roles_info_read as
(
update nabu_ui.roles_info set role_name='$data.asMap.datastore_name$_read' ,mod_by='$data.userDetails.userId$' ,mod_ts=current_timestamp
where role_id=(select role_id from nabu_ui.datastore_role_mapping where datastore_id=$data.asMap.data_domain_id$ and data_access_type_id=1)
),
update_roles_info_write as
(
update nabu_ui.roles_info set role_name='$data.asMap.data_domain_name$_write' ,mod_by='$data.userDetails.userId$' ,mod_ts=current_timestamp
where role_id=(select role_id from nabu_ui.datastore_role_mapping where datastore_id=$data.asMap.data_domain_id$ and data_access_type_id=2)
),

update_roles_info_metadata as
(
update nabu_ui.roles_info set role_name='$data.asMap.datastore_name$_metadata' ,mod_by='$data.userDetails.userId$' ,mod_ts=current_timestamp
where role_id=(select role_id from nabu_ui.datastore_role_mapping where datastore_id=$data.asMap.data_domain_id$ and data_access_type_id=3)
),
update_roles_info_datastore_owner as
(
update nabu_ui.roles_info set role_name='$data.asMap.data_domain_name$_datastore_owner' ,mod_by='$data.userDetails.userId$' ,mod_ts=current_timestamp
where role_id=(select role_id from nabu_ui.datastore_role_mapping where datastore_id=$data.asMap.data_domain_id$ and data_access_type_id=4)
),
update_roles_info_reviewer as
(
update nabu_ui.roles_info set role_name='$data.asMap.data_domain_name$_reviewer' ,mod_by='$data.userDetails.userId$' ,mod_ts=current_timestamp
where role_id=(select role_id from nabu_ui.datastore_role_mapping where datastore_id=$data.asMap.data_domain_id$ and data_access_type_id=5)
)
,table_ids as(
$data.asMap.data_domain_details:sourceDetails();separator="\n union all \n"$
),
insert_table_mappings as (
insert into nabu.datastore_table_mapping
(datastore_id,dataplace_id,schema_id,table_id,valid_from_ts,valid_to_ts,crt_by,crt_ts)
select $data.asMap.data_domain_id$, dataplace_id, schema_id, table_id,
current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp
from table_ids
),
update_job_schedule_details as(
update nabu.job_schedule_details set valid_to_ts=now()
where datastore_id=$data.asMap.data_domain_id$
),
update_job_schedule_details_write as(
insert into nabu.job_schedule_details(job_type_id, datastore_id,refresh_frequency,additional_properties, valid_from_ts, valid_to_ts, cru_by, cru_ts) values
$if(data.asMap.profiling_frequency.cron_type)$
((select job_type_id from nabu.job_type_lookup where job_type ='profiling'),$data.asMap.data_domain_id$,'$data.asMap.profiling_frequency.cron_freq$',
'$resolveProfileInfo(data.asMap.profiling_frequency)$',current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp),
$endif$
((select job_type_id from nabu.job_type_lookup where job_type ='indexing'),$data.asMap.data_domain_id$,'$data.asMap.indexing_frequency.cron_freq$',
'$resolveIndexingInfo(data.asMap.indexing_frequency)$',current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp)
$if(data.asMap.filter_resolving_frequency.cron_type)$
,((select job_type_id from nabu.job_type_lookup where job_type ='filter_resolving'),$data.asMap.data_domain_id$,'$data.asMap.filter_resolving_frequency.cron_freq$',
'$resolveFilterResolvingFrequencyInfo(data.asMap.filter_resolving_frequency)$',current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp)
$endif$
)
select $data.asMap.data_domain_id$ as data_domain_id
>>

forEachDatastoreInsertUpd(source,data)::=<<
$source.filters_list:forEachFilterUpd(source,data);separator=","$
>>

forEachFilterUpd(filter,source,data)::=<<
($data.asMap.data_domain_id$,1,$source.data_connection_id$,$source.schema_id$,$filter.filter_type_id$,
'[$source.filter_all_tables_views:resolveJsonArrayString();separator=","$]',
'[$filter.filter_value:resolveFilter(filter);separator=","$]',$filter.priority_order$,
current_timestamp,'9999-12-31',(select crt_by from datastore),(select crt_ts from datastore),'$data.userDetails.userId$',current_timestamp)
>>

logTemplate_modifyDataDomain(data)::=<<
{"audit_event_type_id" : 13 , "user_id" : "$data.userDetails.userId$","datastore_id" : $data.asMap.data_domain_id$,"log_time " : "$data.log_time$" }
>>

updateDataDomainComputeEngineMapping(data)::=<<
with indexing_workflow_id as (
select workflow_id
from nabu.bot_configuration_workflow a
inner join nabu.compute_engine b on a.engine_mapping_id  = b.engine_mapping_id
where workflow_type = 'Indexing' and b.valid_to_ts = '9999-12-31' and compute_engine_id = $data.input_data.indexing_configuration.compute_engine_id$
)

$if(first(data.profiling_flag).profiling_flag)$
,profiling_workflow_id as(
select workflow_id
from nabu.bot_configuration_workflow a
inner join nabu.compute_engine b on a.engine_mapping_id  = b.engine_mapping_id
where workflow_type = 'Profiling' and b.valid_to_ts = '9999-12-31' and compute_engine_id = $data.input_data.profiling_configuration.compute_engine_id$
)
$endif$

,filter_resolving_workflow_id as (
select workflow_id from nabu.bot_configuration_workflow where workflow_type = 'DatastoreFilterResolving' group by workflow_id
)


$if(first(data.profiling_flag).profiling_flag)$
,upsert_profiling as(
INSERT INTO nabu.datastore_compute_engine_mapping(datastore_id, compute_engine_id, workflow_engine_id, workflow_id, cru_by, cru_ts,job_type_id)
select $first(data.data).data_domain_id$ as datastore_id,$data.input_data.profiling_configuration.compute_engine_id$ as compute_engine_id,
$data.input_data.profiling_configuration.workflow_engine_id$ as workflow_engine_id, (select workflow_id from profiling_workflow_id) as workflow_id,
'$data.userDetails.userId$' as cru_by, now() as cru_ts ,(select job_type_id from nabu.job_type_lookup where job_type ='profiling') as job_type_id
ON CONFLICT(datastore_id,job_type_id) where (job_type_id = 2)
DO
	UPDATE SET
	compute_engine_id = $data.input_data.profiling_configuration.compute_engine_id$,
	workflow_engine_id = $data.input_data.profiling_configuration.workflow_engine_id$,
	workflow_id = (select workflow_id from profiling_workflow_id)
	where nabu.datastore_compute_engine_mapping.datastore_id = $data.input_data.data_domain_id$
	and nabu.datastore_compute_engine_mapping.workflow_id = (select a.workflow_id from nabu.datastore_compute_engine_mapping a
                       inner join nabu.bot_configuration_workflow b on a.workflow_id = b.workflow_id
                       and workflow_type = 'Profiling' and datastore_id = $data.input_data.data_domain_id$
					   )

)
$endif$


,update_filter_resolving as (
UPDATE nabu.datastore_compute_engine_mapping SET
compute_engine_id = $data.input_data.indexing_configuration.compute_engine_id$,
workflow_engine_id = $data.input_data.filter_resolving_configuration.workflow_engine_id$,
workflow_id = (select workflow_id from filter_resolving_workflow_id)
where datastore_id = $data.input_data.data_domain_id$
and workflow_id = (select a.workflow_id from nabu.datastore_compute_engine_mapping a
					inner join nabu.bot_configuration_workflow b on a.workflow_id = b.workflow_id
					and workflow_type = 'DatastoreFilterResolving' and datastore_id = $data.input_data.data_domain_id$
				  )
)


UPDATE nabu.datastore_compute_engine_mapping SET
compute_engine_id = $data.input_data.indexing_configuration.compute_engine_id$,
workflow_engine_id = $data.input_data.indexing_configuration.workflow_engine_id$,
workflow_id = (select workflow_id from indexing_workflow_id)
where datastore_id = $data.input_data.data_domain_id$
and workflow_id = (select a.workflow_id from nabu.datastore_compute_engine_mapping a
					inner join nabu.bot_configuration_workflow b on a.workflow_id = b.workflow_id
					and workflow_type = 'Indexing' and datastore_id = $data.input_data.data_domain_id$
				  )
>>

getDataDomainDetails(data)::=<<
select
        json_agg(
                jsonb_build_object('dataplace_id', dpc.dataplace_id, 'connection_type', dpc.connection_type,
                'jdbc_driver', jdbc_driver,'host_url', dpc.host_url, 'database_name', dpc.source_info->\>'database_name',
                'credential_id', dpc.credential_id, 'credential_type', ctl.credential_type, 'credential_source', dpc.credential_source ,
                'vault_entry_key', dpc.vault_entry_key, 'vault_entry_details', dpc.vault_entry_details,
                'vault_id', dpc.vault_id, 'directory', dpc.directory) ) as datastore_details
from
        (
        select
                case
                        when cp.connection_type = 'hive' then dpe.source_info->'jdbc_info'->\>'jdbc_url'
                        else dpe.source_info->\>'host_name' end as host_url ,
                        case when cp.connection_type = 'SAS' then dpe.source_info->\>'location_path'
                             else null end as directory,
                        case when ci.credential_type_id = 9 then cp.additional_info->\>'hive_jdbc_driver'
                                 else cp.additional_info->\>'jdbc_driver' end as jdbc_driver,
                                dpe.*,
                                cp.connection_type,
                                ci.credential_type_id,
                                cp.additional_info,
                                ci.credential_source ,
                                ci.vault_entry_key ,
                                ci.vault_entry_details,
                                ci.vault_id
                        from
                                (
                                select
                                        dp.*
                                from
                                        (
                                        select
                                                distinct dsd.dataplace_id
                                        from
                                                nabu.datastore d ,
                                                nabu.datastore_schema_definition dsd
                                        where
                                                d.datastore_id = dsd.datastore_id
                                                and d.valid_to_ts = '9999-12-31'
                                                and dsd.valid_to_ts = '9999-12-31'
                                                and d.datastore_id =$first(data.data).data_domain_id$
                                        ) as dpd
                                inner join nabu.dataplace as dp on
                                        dpd.dataplace_id = dp.dataplace_id) as dpe
                        left outer join nabu.credential_info as ci on
                                dpe.credential_id = ci.credential_id
                        inner join nabu.connection_profile cp on
                                cp.connection_profile_id = dpe.connection_profile_id ) as dpc
left outer join nabu.credential_type_lookup as ctl on
        ctl.credential_type_id = dpc.credential_type_id
>>

// This template is to update crawl frequency using update pattern.
// @created_by Rahul (rr0208)
// @modified_by Murthy (vk1708)
// @Api_Path : "http://localhost:8893/fireshots/nabu/upd/sq/restCatalog/crawlFreq"


updateCrawlFreq(data)::=<<
{
  "input_data": $data.asString$,
  "sequential_queries": [
		{
			"query_template_group": "$data.STPath$/restCatalog.stg",
			"query_template_name": "modifyDataConnectionSchedule_schema",
			"validation_key": "input_data",
			"query_type":"validation"
		},
		{
			"query_template_group": "$data.STPath$/restCatalog.stg",
			"query_template_name": "modifyDataConnectionSchedule_template",
			"query_output_key": "data",
			"query_type":"update"
		},
		{
			"query_template_group": "$data.STPath$/restCatalog.stg",
			"query_template_name": "logTemplate_modifyDataConnectionSchedule",
			"query_type":"log",
			"log_service":"auditLog"
		}
    ],
    "output_keys":["data"]
}
>>

modifyDataConnectionSchedule_schema(data)::=<<
{
  "\$schema": "http://json-schema.org/draft-04/schema#",
  "definitions": {
    "recurring": {
      "description": "user defined frequency",
      "type": "object",
      "required": [
        "cron_type",
        "cron_freq",
        "cron_timezone",
        "cron_info",
        "consider_timezone"
      ],
      "properties": {
        "cron_type": {
          "title": "Type of cron whether recurring or onetime",
          "type": "string",
          "enum": [
            "recurring"
          ]
        },
        "cron_freq": {
          "title": "frequency",
          "type": "string",
		  "pattern": "^.*\$"
        },
        "cron_timezone": {
          "title": "Zone of time Country/City",
          "type": "string",
		  "pattern":"[A-Za-z][A-Za-z0-9~\/._+-]+\$"
        },
        "consider_timezone":{
          "type":"boolean"
        },
        "cron_info": {
          "type": "object",
          "properties": {
            "schedule_type": {
              "title": "Type of schedule whether its is Daily/Weekly/Monthly/Yearly/Advanced",
              "type": "string",
              "enum": [
                "Daily",
                "weekly",
                "Monthly",
                "Yearly",
                "Advanced"
              ]
            },
            "start_date": {
              "title": "Start Date",
              "type": "string",
			  "pattern":"^(([0-9]{4}[-]?((0[13-9]|1[012])[-]?(0[1-9]|[12][0-9]|30)|(0[13578]|1[02])[-]?31|02[-]?(0[1-9]|1[0-9]|2[0-8]))|([0-9]{2}(([2468][048]|[02468][48])|[13579][26])|([13579][26]|[02468][048]|0[0-9]|1[0-6])00)[-]?02[-]?29)\\\s([01][0-9]|2[0-3]):([012345][0-9]):([012345][0-9]))\$"
            },
            "end_date": {
              "title": "End Date",
              "type": "string",
			  "pattern":"^(([0-9]{4}[-]?((0[13-9]|1[012])[-]?(0[1-9]|[12][0-9]|30)|(0[13578]|1[02])[-]?31|02[-]?(0[1-9]|1[0-9]|2[0-8]))|([0-9]{2}(([2468][048]|[02468][48])|[13579][26])|([13579][26]|[02468][048]|0[0-9]|1[0-6])00)[-]?02[-]?29)\\\s([01][0-9]|2[0-3]):([012345][0-9]):([012345][0-9]))\$"
            }
          },
          "required": [
            "schedule_type",
            "start_date"
          ]
        }
      }
    },
    "one_time": {
      "description": "User defined frequency",
      "type": "object",
      "required": [
        "cron_type",
        "cron_freq",
        "cron_timezone",
        "consider_timezone"
      ],
      "properties": {
        "cron_type": {
          "title": "Type of cron whether Recurring or Onetime",
          "type": "string",
          "enum": [
            "one_time"
          ]
        },
        "cron_freq": {
          "title": "crawl frequency",
          "type": "string",
		  "pattern": "^.*\$"
        },
        "cron_timezone": {
          "title": "Zone of time Country/City",
          "type": "string",
		  "pattern":"[A-Za-z][A-Za-z0-9~\/._+-]+\$"
        },
        "consider_timezone":{
          "type":"boolean"
        }
      }
    }
  },
  "type": "object",
  "properties": {
    "data_connection_id": {
      "title": "Data Connection Id",
      "type": "integer",
      "minimum": 1
    },
    "crawl_frequency": {
      "description": "Crawl Frequency",
      "\$ref": "#/definitions/$data.input_data.crawl_frequency.cron_type$"
    }
  },
  "required": [
    "data_connection_id",
    "crawl_frequency"
  ]
}
>>

modifyDataConnectionSchedule_template(data)::=<<
with update_dataplace as(
update nabu.dataplace set
crawl_frequency = '$data.asMap.crawl_frequency.cron_freq$',
mod_by = '$data.userDetails.userId$',
mod_ts = current_timestamp
where dataplace_id = $data.input_data.data_connection_id$ and valid_to_ts='9999-12-31'
),

update_ts as(
update nabu.job_schedule_details set
valid_to_ts = current_timestamp
where dataplace_id = $data.input_data.data_connection_id$
and valid_to_ts='9999-12-31'
and job_type_id = (select job_type_id from nabu.job_type_lookup where job_type in ('ondemand_crawling','crawling'))
)

insert into nabu.job_schedule_details(job_type_id, dataplace_id,refresh_frequency,additional_properties, valid_from_ts, valid_to_ts, cru_by, cru_ts)
values(
(select job_type_id from nabu.job_type_lookup where job_type ='crawling'),
$data.input_data.data_connection_id$,
'$data.input_data.crawl_frequency.cron_freq$',
E'$resolveCrawlInfo(data.input_data.crawl_frequency)$',
current_timestamp,
'9999-12-31',
'$data.userDetails.userId$',
current_timestamp
)
>>

resolveCrawlInfo(data)::=<<
$if(data.cron_type)$
{"crawl_frequency": $resolveCronJson(data)$}
$endif$
>>

logTemplate_modifyDataConnectionSchedule(data)::=<<
{"audit_event_type_id":10 ,"dataplace_id":$data.input_data.data_connection_id$,"user_id": "$data.userDetails.userId$","log_time ": "$data.log_time$"}
>>

// This template is used to update the existing datasource
// @created_by Rahul (rr0208)
// @modified_by Murthy (vk1708)
// @Api_Path : "http://localhost:port/fireshots/nabu/upd/sq/restCatalog/modifyDataSource"

modifyDataSource(data)::=<<
{
  "input_data": $data.asString$,
  "sequential_queries": [
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "modifyDataSource_schema",
          "validation_key": "input_data",
          "query_type":"validation"
  },
  {
          "query_template_group": "$data.STPath$/manageDataSource.stg",
          "query_template_name": "checkAccessForSuperAdminRole",
          "query_output_key": "checkAccess",
          "query_type":"select"
  },
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "modifyDataSource_checks",
          "query_output_key":"checks",
          "query_type":"select",
          "post_process":["checks"]
  },
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "modifyDataSource_template",
          "query_output_key":"data",
          "query_type":"update"
  },
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "logTemplate_modifyDataSource",
          "query_type":"log",
          "log_service":"auditLog"
  }

  ],
  "output_keys":["data"]
}
>>

modifyDataSource_schema(data)::=<<
{
  "\$schema": "http://json-schema.org/draft-04/schema#",
  "definitions": {
      "postgres": {
        "type": "object",
        "required": [
                  "database_name","host_name"
                ],
        "properties": {
          "database_name": {
            "type": "string",
            "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$",
            "minLength": 3,
			"maxLength" : 50
          },
          "host_name": {
            	"title": "Host Name",
            	"type": "string",
            	"anyOf":[
            	{"pattern": "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"},
            	{"pattern":"^(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z-]*[A-Za-z])+:(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"}
            	]
           }
        }

      },
            "netezza": {
                    "type": "object",
                    "required": [
                              "database_name","host_name"
                            ],
                    "properties": {
                      "database_name": {
                        "type": "string",
                        "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$",
                        "minLength": 3
                      },
                      "host_name": {
                        	"title": "Host Name",
                        	"type": "string",
                        	"oneOf":[
                        	{"pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"},
                        	{"pattern":"^(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z-]*[A-Za-z])+:(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"}
                        	]
                       }
                    }

                  },

      "mysql": {
              "type": "object",
              "properties": {
                "database_name": {
                  "type": "string",
                  "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$",
                        "minLength": 3,
						"maxLength":50
                },
                "host_name": {
                  	"title": "Host Name",
                  	"type": "string",
                  	"anyOf":[
                     {"pattern": "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"},
                     {"pattern":"^(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z-]*[A-Za-z])+:(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"}
                     ]
                 }
              },
              "required": [
                "database_name","host_name"
              ]
       },
       "sql_server": {
            "type": "object",
             "properties": {
              "database_name": {
                   "type": "string",
                    "pattern":  "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$",
                        "minLength": 3,
						"maxLength": 50
               },
                "host_name": {
                   "title": "Host Name",
                   "type": "string",
                    "anyOf":[
                    {"pattern": "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"},
                     {"pattern":"^(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z-]*[A-Za-z])+:(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"}
                     ]
                  }
                 },
          "required": [
               "database_name","host_name"
           ]
       },
       "oracle": {
                   "type": "object",
                    "properties": {
                     "database_name": {
                          "type": "string",
                           "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$",
                            "minLength": 3,
							"maxLength":50
                      },
                       "host_name": {
                          "title": "Host Name",
                          "type": "string",
                           "oneOf":[
                            {"pattern": "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"},
                             {"pattern":"^(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z-]*[A-Za-z])+:(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"}
                          ]
                         }
                        },
                 "required": [
                      "database_name","host_name"
                  ]
       },
       "SAS": {
                          "type": "object",
                           "properties": {
                            "location_path": {
                                 "type": "string",
								 "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                             }
                               },
                        "required": [
                             "location_path"
                         ]
        },
        "hive":{
            "type": "object",
             "required": ["connection_mode","metastore_info","jdbc_info"
              ],
            "properties":{
                "metastore_info": {
                "title": "Metastore Info",
                "type": "object",
                "required": ["credential_id",
                			"jdbc_url"
                ],
             "properties": {
                  "credential_id": {
                    	"title": "Credential Id",
                    	"type": "integer",
                    	"minimum": 1
                    },
                    "credential_type_id": {
                    	"title": "Credential Type Id",
                    	"type": "integer",
                    	"minimum": 1
                    },
                    "jdbc_url": {
                    	"title": "Jdbc Url",
                    	"type": "string",
                        oneOf:[
                        {"pattern": "^((([a-zA-Z0-9]*\\\:){2,3})+([\/]{2}|(\\\@\/\/)|[\\\:\\\@]))(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"},
                         {"pattern":"^((([a-zA-Z0-9]*\\\:){2,3})+([\/]{2}|(\\\@\/\/)|[\\\:\\\@]))(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])[\\\:|\/][\\\w\\\-\\\.\\\;\\\=\\\@\/(\\\)\\\{\}]*\$"},
                         {"pattern":"^((([a-zA-Z0-9]*\\\:){2,3})+([\/]{2}|(\\\@\/\/)|[\\\:\\\@]))(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z\\\-]*[A-Za-z])+\\\:(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"},
                         {"pattern":"^((([a-zA-Z0-9]*\\\:){2,3})+([\/]{2}|(\\\@\/\/)|[\\\:\\\@]))(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z\\\-]*[A-Za-z])+\\\:(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])[\\\:|\/][\\\w\\\-\\\.\\\;\\\=\\\@\/(\\\)\\\{\}]*\$"}
                        ]
                    },
                    "credential_type": {
                    	"title": "Credential Type",
                    	"type": "string",
                    	"pattern":"^(?=)(Plain|LDAP|Kerberos|Kerberos Truststore|AWS)\$"
                    },
                    "metastore_schema_name": {
                        "title": "Meta Store Schema Name",
                        "type": "string"
                    }
                }
            },
            		"jdbc_info": {

            					"title": "Jdbc Info",
            					"type": "object",
            					"required": [
            						"credential_id",
            						"database_name",
            						"jdbc_url"
            					],
            					"properties": {
            						"credential_type": {

            							"title": "Credential Type",
            							"type": "string",
            							"pattern":"^(?=)(Plain|LDAP|Kerberos|Kerberos Truststore|AWS)\$"
            						},
            						"credential_type_id": {

            							"title": "Credential Type Id",
            							"type": "integer",
            							"minimum": 1
            						},
            						"credential_id": {

            							"title": "Credential Id",
            							"type": "integer",
            							"minimum": 1
            						},
            						"database_name": {

            							"title": "Database Name",
            							"type": "string",
            							"pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$",
                                        "minLength": 3
            						},
            						"jdbc_url": {

            							"title": "Jdbc Url",
            							"type": "string",
            		                    oneOf:[
                                        {"pattern": "^((([a-zA-Z0-9]*\\\:){2,3})+([\/]{2}|(\\\@\/\/)|[\\\:\\\@]))(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"},
                                         {"pattern":"^((([a-zA-Z0-9]*\\\:){2,3})+([\/]{2}|(\\\@\/\/)|[\\\:\\\@]))(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])[\\\:|\/][\\\w\\\-\\\.\\\;\\\=\\\@\/(\\\)\\\{\}]*\$"},
                                         {"pattern":"^((([a-zA-Z0-9]*\\\:){2,3})+([\/]{2}|(\\\@\/\/)|[\\\:\\\@]))(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z\\\-]*[A-Za-z])+\\\:(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"},
                                         {"pattern":"^((([a-zA-Z0-9]*\\\:){2,3})+([\/]{2}|(\\\@\/\/)|[\\\:\\\@]))(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z\\\-]*[A-Za-z])+\\\:(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])[\\\:|\/][\\\w\\\-\\\.\\\;\\\=\\\@\/(\\\)\\\{\}]*\$"}
                                         ]
            					}
            					}


            				},

            				"filesystem_info": {

            					"title": "Filesystem Info",
            					"type": "object",
            					"required": [
            						"file_system_type",
            						"file_system_type_id",
            						"ingestion_root_path"
            					],
            					"properties": {
            						"hdfs_uri": {

            							"title": "Hdfs Uri",
            							"type": "string",
                                        "oneOf":[
                                         {"pattern": "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"},
                                         {"pattern":"^(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z-]*[A-Za-z])+:(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"}
                                        ]

            						},
            						"directory": {

            							"title": "Directory",
            							"type": "string",
                                        "pattern": "^(\/[^\/][\\\w\\\-]*)*\$"
            						},
            						"file_system_type": {

            							"title": "File System Type",
            							"type": "string",
                                                                 "enum": ["HDFS","S3A"]
            						},
            						"file_system_type_id": {

            							"title": "File System Type Id",
            							"type": "integer",
            							"minimum": 1
            						},
            						"ingestion_root_path": {

            							"title": "Ingestion Root Path",
            							"type": "string",
            							"pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
            						},
            						"credential_type_id": {
            							"title": "Credential Type Id",
            							"type": "integer",
            							"minimum": 1
            						},
            						"credential_id": {
            							"title": "Credential Id",
            							"type": "integer",
            							"minimum": 1
            						}
            					}
            				},
            		"connection_mode": {
                    					"title": "Connection Mode",
                    					"type": "string",
                    					"enum": ["JDBC mode","Cluster mode"]
                    	}
                   }
        },
        "mongodb":{
            "type": "object",
                                   "properties": {
                                    "database_name": {
                                         "type": "string",
                                         "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$",
                                          "minLength": 3,
										  "maxLength":50

                                     },
                                      "host_name": {
                                         "title": "Host Name",
                                         "type": "string",
                                          "oneOf":[
                                           {"pattern": "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"},
                                           {"pattern":"^(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z-]*[A-Za-z])+:(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"}
                                         ]
                                        }
                                     },
                                "required": [
                                     "database_name","host_name"
                                 ]
        },
        "redshift":{
          "type": "object",
          "properties": {
            "database_name": {
              "type": "string",
        	  "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$",
              "minLength": 3,
              "maxLength": 50
            },
            "host_name": {
              "title": "Host Name",
        	  "oneOf":[
        			{"pattern": "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"},
        			{"pattern":"^(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z-]*[A-Za-z])+:(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"}
             ],
              "type": "string"
            },
            "filesystem_info": {
              "title": "Filesystem Info",
              "type": "object",
              "required": [
                "file_system_type",
                "bucket",
                "credential_id",
                "region"
              ],
              "properties": {
                "region": {
                  "title": "Region",
                  "type": "string",
        		  "pattern":"^([a-z0-9])([a-z0-9-])*[a-z0-9]\$",
        		  "minLength": 3,
                  "maxLength": 16
                },
                "bucket": {
                  "title": "Bucket",
                  "type": "string",
        		  "pattern": "^([a-z0-9])([A-Za-z0-9-_.])*[A-Za-z0-9]\$",
                  "minLength": 3,
                  "maxLength": 255
                },
                "file_system_type": {
                  "title": "File System Type",
                  "type": "string"
                },
                "ingestion_root_path": {
                  "title": "Ingestion Root Path",
        		  "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$",
                  "type": "string"
                },
                "credential_id": {
                  "title": "Credential Id",
                  "type": "integer",
                  "minimum": 1
                }
              }
            }
          },
          "required": [
            "database_name",
            "host_name",
        	"filesystem_info"
          ]
        },
         "db2": {
                                  "type": "object",
                                   "properties": {
                                    "database_name": {
                                         "type": "string",
                                        "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$",
                                          "minLength": 3,
										  "maxLength":50
                                     },
                                      "host_name": {
                                         "title": "Host Name",
                                         "type": "string",
                                          "oneOf":[
                                           {"pattern": "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"},
                                           {"pattern":"^(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z-]*[A-Za-z])+:(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"}
                                         ]
                                        }
                                     },
                                "required": [
                                     "database_name","host_name"
                                 ]
         },
          "teradata": {
                                  "type": "object",
                                   "properties": {
                                    "database_name": {
                                         "type": "string",
                                         "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$",
                                          "minLength": 3,
										  "maxLength":50
                                     },
                                      "host_name": {
                                         "title": "Host Name",
                                         "type": "string",
                                          "oneOf":[
                                           {"pattern": "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"},
                                           {"pattern":"^(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z-]*[A-Za-z])+:(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"}
                                         ]
                                        }
                                     },
                                "required": [
                                     "database_name","host_name"
                                 ]
         },
          "unix":{
            "type": "object",
             "properties": {
                    "path": {
                      "type": "string",
                      "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                     },
                       "is_delimiter":{
                        "type": "boolean"
                         },
                          "mount_source_path":{
                              "type": "boolean"
                            },
                            "nfs_server_host_name":{
                                 "type": "string"
                            },
                            "source_path":{
                                  "type": "string"
                             },
                             "fetch_stats_type": {
                                "title": "Fetch Stats Type",
                                 "type": "string",
                                  "pattern":"^(?i)(directory|file)*\$"
                          },
                          "fetch_column_metadata": {
                                "type": "object",
                                "properties": {
                                  "csv": {
                                    "type": "boolean"
                                  },
                                  "tsv": {
                                    "type": "boolean"
                                  },
                                  "avro": {
                                    "type": "boolean"
                                  },
                                  "parquet": {
                                    "type": "boolean"
                                  },
                                  "no_of_rows_for_delimiter_files_scan": {
                                    "type": "integer"
                                  }
                                }
                          }
             },
             "required":[
                   "mount_source_path",
                    "path",
                   "fetch_stats_type"

             ]
         },
         "smb":{
            "type": "object",
                         "properties": {
                                "path": {
                                  "type": "string",
                                  "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_[ ]]*)*\$"
                                 },
                                   "is_delimiter":{
                                    "type": "boolean"
                                     },
                                      "host_name": {
                                            "title": "Host Name",
                                            "type": "string",
                                            "oneOf":[
                                             {"pattern": "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\$"},
                                              {"pattern":"^(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z-]*[A-Za-z])\$"}
                                          ]
                                         },
                                         "share_name": {
                                            "title": "Share Name",
                                             "type": "string",
                                             "pattern":"^([A-Za-z])([A-Za-z-!@\$%^'_.~(){}&&[^0-9]])*\$",
                                             "maxLength":80
                                          },
                                          "domain": {
                                              "title": "Domain",
                                               "type": "string",
                                               "pattern":"^([A-Za-z0-9])([A-Za-z0-9.])*[A-Za-z0-9]\$",
                                                "minLength":1,
                                                 "maxLength":15
                                       },
                                       "fetch_stats_type": {
                                                "title": "Fetch Stats Type",
                                                 "type": "string",
                                                  "pattern":"^(?i)(directory|file|share)*\$"
                                        },
                                        "fetch_column_metadata":{
                                              "type": "object",
                                              "properties": {
                                                "csv": {
                                                  "type": "boolean"
                                                },
                                                "tsv": {
                                                  "type": "boolean"
                                                },
                                                "avro": {
                                                  "type": "boolean"
                                                },
                                                "no_of_rows_for_delimiter_files_scan": {
                                                  "type": "integer"
                                                }
                                              }
                                            }
                         },
                          "required":[
                                "host_name",
                                 "share_name",
                                 "domain",
                                 "path",
                                "fetch_stats_type"

                           ]
         },
         "SMB2":{
            "type": "object",
                         "properties": {
                             "location_path": {
                                 "title": "Location Path",
                                  "type": "string",
                                  "pattern" : "^(\\\S)(\/|[A-Za-z0-9\\\-\\\.\\\_ ]*)*\$"
                                    }
                              },
                          "required": [
                                  "location_path"
                        ]
         },
         "CIFS":{
                     "type": "object",
                                  "properties": {
                                      "location_path": {
                                          "title": "Location Path",
                                           "type": "string",
                                           "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                                             }
                                       },
                                   "required": [
                                           "location_path"
                                 ]
         },
         "sharepoint":{
            "type": "object",
              "properties": {
                 "site_url": {
                     "title": "Site Url",
                      "type": "string",
                       "pattern": "^(https?:\/\/)([A-Za-z0-9-_.\/:])*[A-Za-z0-9]\$",
                       "maxLength":400
                        },
                  "site_domain": {
                    "title": "Site Domain",
                        "type": "string",
                         "pattern": "^([a-z0-9])*(.sharepoint.com)\$"
                  },
                  "ingestion_root_path":{
                    "title": "Path",
                     "type": "string",
                     "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                  },
                  "is_delimiter":{
                       "type": "boolean"
                   },
                     "fetch_column_metadata":{
                           "type": "object",
                           "properties": {
                             "csv": {
                               "type": "boolean"
                             },
                             "tsv": {
                               "type": "boolean"
                             },
                             "avro": {
                               "type": "boolean"
                             },
                             "no_of_rows_for_delimiter_files_scan": {
                               "type": "integer"
                             }
                           }
                    }
               },
               "required": [
                     "site_url", "site_domain", "ingestion_root_path"
                   ]
         },
         "aws_s3":{
            "type": "object",
                       "properties": {
                          "region": {
                              "title": "Region",
                               "type": "string",
                               "pattern":"^([a-z0-9])([a-z0-9-])*[a-z0-9]\$",
                               "maxLength": 16
                                 },
                           "bucket": {
                                "title": "Bucket",
                                 "type": "string",
                                 "pattern": "^([a-z0-9])([A-Za-z0-9-_.])*[A-Za-z0-9]\$",
                                 "minLength": 3,
                                  "maxLength": 255
                                 },
                            "accessKey": {
                                  "title": "AccessKey",
                                  "type": "string"
                                  },
                              "secretKey": {
                                   "title": "SecretKey",
                                    "type": "string"
                                }
                        },
                        "required": [
                              "region","bucket","accessKey","secretKey"
                         ]
         },
         "gcs":{
                 "type": "object",
                 "properties": {
                   "project_id": {
                     "title": "Project Id",
                     "type": "string",
                     "minLength": 6,
                     "maxLength": 30,
               	  "pattern":"^([a-z])([a-z0-9-])*[a-z0-9]\$"
                   },
                   "bucket_name": {
                     "title": "Bucket Name",
                     "type": "string",
                     "minLength": 3,
                     "maxLength": 63,
               	  "pattern":"^(?!goog)(?!(\\\d+\\\.)+\\\d+\$)([a-z0-9])([a-z0-9])(?!.*(google|g00gle))([a-z0-9-_\\\.]*)([a-z0-9])\$"
                   },
                   "path": {
               	  "title": "Path",
                     "type": "string",
               	     "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                   },
                   "fetch_stats_type": {
                     "title": "Fetch Stats Type",
                     "type": "string",
                     "enum": [
                       "bucket",
                       "directory",
                       "file"
                     ]
                   },
                   "ingestion_root_path": {
                     "title": "Ingestion Root Path",
                     "type": "string",
               	     "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                   },
                   "is_delimiter": {
                     "type": "boolean"
                   },
                   "fetch_column_metadata": {
                     "type": "object",
                     "properties": {
                       "csv": {
                         "type": "boolean"
                       },
                       "tsv": {
                         "type": "boolean"
                       },
                       "avro": {
                         "type": "boolean"
                       },
                       "no_of_rows_for_delimiter_files_scan": {
                         "type": "integer"
                       }
                     }
                   }
                 },
                 "required": [
                   "project_id",
                   "bucket_name",
                   "fetch_stats_type",
                   "path"
                 ]
               },
               "bigquery":{
                 "type": "object",
                 "properties": {
                   "project_id": {
                     "title": "Project Id",
                     "type": "string",
                     "minLength": 6,
                     "maxLength": 30,
               	  "pattern":"^([a-z])([a-z0-9-])*[a-z0-9]\$"
                   },
                   "bucket_name": {
                     "title": "Bucket Name",
                     "type": "string",
               	  "oneOf":[
               		{
               			"pattern":"^\$"
               		},
                       {
               			"pattern":"^(?!goog)(?!(\\\d+\\\.)+\\\d+\$)([a-z0-9])([a-z0-9])(?!.*(google|g00gle))([a-z0-9-_\\\.]*)([a-z0-9])\$",
                            "minLength":3,
                            "maxLength":63
               		}
                    ]
                   },
                   "ingestion_root_path": {
                     "title": "Ingestion Root Path",
                     "type": "string",
               	     "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                   }
                 },
                 "required": [
                   "project_id","bucket_name"
                 ]
               },
                  "adls_gen1":{
                    "type": "object",
                    "properties": {
                      "data_lake_name": {
                        "title": "Data Lake Name",
                        "type": "string",
                        "minLength": 3,
                        "maxLength": 63,
                  	  "pattern":"^[a-z0-9](?!.*--)[a-z0-9-]{1,61}[a-z0-9]\$"
                      },
                      "accountFQDN": {
                        "title": "AccountFQDN",
                        "type": "string",
                        "minLength": 3,
                        "maxLength": 64,
                  	  "pattern":"^([a-z0-9])([a-z0-9.])*[a-z0-9]\$"
                      },
                      "path": {
                        "type": "string",
                  	    "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                      },
                      "fetch_stats_type": {
                        "title": "Fetch Stats Type",
                        "type": "string",
                  	  "enum": ["container","directory","file"]
                      },
                      "ingestion_root_path": {
                        "title": "Ingestion Root Path",
                        "type": "string",
                  	    "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                      },
                      "fetch_column_metadata": {
                        "type": "object",
                        "properties": {
                          "csv": {
                            "type": "boolean"
                          },
                          "tsv": {
                            "type": "boolean"
                          },
                          "avro": {
                            "type": "boolean"
                          },
                          "no_of_rows_for_delimiter_files_scan": {
                            "type": "integer"
                          }
                        }
                      },
                      "is_delimiter": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "data_lake_name",
                      "accountFQDN",
                      "path",
                      "fetch_stats_type"
                    ]
                  },
                  "http":{
                    "type": "object",
                    "properties": {
                      "isDepth": {
                        "type": "boolean"
                      },
                      "is_delimiter": {
                        "type": "boolean"
                      },
                      "links_to_parse": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "link": {
                              "type": "string",
                  			"pattern":"^(http[s]?:\/\/)([A-Za-z0-9-_.?=\/:])*\$"
                            },
                            "isDepth": {
                              "type": "boolean"
                            },
                            "showError": {
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "link",
                            "isDepth",
                            "showError"
                          ]
                        }
                      }
                    },
                    "required": [
                      "links_to_parse"
                    ]
                  },
              "azure_synapse": {
                "type": "object",
                "properties": {
                  "host_name": {
                    "title": "Host Name",
                    "type": "string",
                    "oneOf": [
                      {
                        "pattern": "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"
                      },
                      {
                        "pattern": "^(([a-zA-Z]|[\\\\w][\\\\w\\\\-]*[\\\\w])\\\\.)*([\\\\w]|[\\\\w][A-Za-z-]*[A-Za-z])+:(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"
                      }
                    ]
                  },
                "database_name": {
                  "type": "string",
                  "maxLength": 252,
                  "minLength": 3,
                  "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$"
                },
                "filesystem_info": {
                  "title": "Filesystem Info",
                  "type": "object",
                  "required": [
                    "file_system_type",
                    "container",
                    "credential_id",
                    "accountName"
                  ],
                  "properties": {
                    "container": {
                      "title": "Container",
                      "type": "string",
                      "minLength": 3,
                      "pattern": "^[a-z0-9](?!.*--)[a-z0-9-]{1,61}[a-z0-9]\$",
                      "maxLength": 60
                    },
                    "file_system_type": {
                      "title": "File System Type",
                      "enum":["adls_gen2"],
                      "type": "string"
                    },
                    "accountName": {
                      "title": "Account Name",
                      "type": "string",
                      "pattern": "^([a-z0-9])([a-z0-9])*[a-z0-9]\$",
                      "minLength": 3,
                      "maxLength": 24
                    },
                    "ingestion_root_path": {
                      "title": "Ingestion Root Path",
                      "type": "string",
                      "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                    },
                    "credential_id": {
                      "title": "Credential Id",
                      "type": "integer",
                      "minimum": 1
                    }
                  }
                }
              },
              "required": [
              "host_name",
              "database_name",
              "filesystem_info"
              ]
              },
			  "snowflake": {
				"type": "object",
				"properties": {
					"host_name": {
						"title": "Host Name",
						"type": "string"
					},
					"database_name": {
						"type": "string",
						"maxLength": 252,
						"minLength": 3,
						"pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$"
					},
					"filesystem_info": {
						"title": "Filesystem Info",
						"type": "object",
						"required": [
							"file_system_type",
							"credential_id"
						],
						"properties": {
							"container": {
								"title": "Container",
								"type": "string",
								"pattern": "^(\$)|[a-z0-9](?!.*--)[a-z0-9-]{1,61}[a-z0-9]\$",
								"maxLength": 60
							},
							"file_system_type": {
								"title": "File System Type",
								"enum": [
									"adls_gen2",
									"s3"
								],
								"type": "string"
							},
							"bucket": {
								"title": "Bucket",
								"type": "string",
								"pattern": "^(\$)|([a-z0-9])([A-Za-z0-9-_.])*[A-Za-z0-9]\$",
								"maxLength": 255
							},
							"accountName": {
								"title": "Account Name",
								"type": "string",
								"pattern": "^(\$)|([a-z0-9])([a-z0-9])*[a-z0-9]\$",
								"maxLength": 24
							},
							"ingestion_root_path": {
								"title": "Ingestion Root Path",
								"type": "string",
								"pattern": "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
							},
							"credential_id": {
								"title": "Credential Id",
								"type": "integer",
								"minimum": 1
							}
						}
					}
				},
				"required": [
					"host_name",
					"database_name",
					"filesystem_info"
				]
			},
              "adls_gen2":{
                "type": "object",
                "properties": {
                  "accountName": {
                    "title": "Account Name",
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 24,
              	  "pattern":"^([a-z0-9])([a-z0-9])*[a-z0-9]\$"
                  },
                  "container": {
                    "title": "Container",
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 63,
              	  "pattern":"^[a-z0-9](?!.*--)[a-z0-9-]{1,61}[a-z0-9]\$"
                  },
                  "path": {
                    "type": "string",
              	    "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                  },
                  "fetch_stats_type": {
                    "title": "Fetch Stats Type",
                    "type": "string",
              	  "enum": ["container","directory","file"]
                  },
                  "ingestion_root_path": {
                    "title": "Ingestion Root Path",
                    "type": "string",
              	    "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                  },
                  "is_delimiter": {
                    "type": "boolean"
                  },
                  "fetch_column_metadata": {
                    "type": "object",
                    "properties": {
                      "csv": {
                        "type": "boolean"
                      },
                      "tsv": {
                        "type": "boolean"
                      },
                      "avro": {
                        "type": "boolean"
                      },
                      "no_of_rows_for_delimiter_files_scan": {
                        "type": "integer"
                      }
                    }
                  }
                },
                "required": [
                  "accountName",
                  "container",
              	"path",
              	"fetch_stats_type"
                ]
              },
              "azure_blob":{
                "type": "object",
                "properties": {
                  "accountName": {
                    "title": "Account Name",
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 24,
              	  "pattern":"^([a-z0-9])([a-z0-9])*[a-z0-9]\$"
                  },
                  "container": {
                    "title": "Container",
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 63,
              	  "pattern":"^[a-z0-9](?!.*--)[a-z0-9-]{1,61}[a-z0-9]\$"
                  },
                  "path": {
                    "type": "string",
              	    "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                  },
                  "fetch_stats_type": {
                    "title": "Fetch Stats Type",
                    "type": "string",
              	  "enum": ["container","directory","file"]
                  },
                  "ingestion_root_path": {
                    "title": "Ingestion Root Path",
                    "type": "string",
              	    "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                  },
                  "is_delimiter": {
                    "type": "boolean"
                  },
                  "fetch_column_metadata": {
                    "type": "object",
                    "properties": {
                      "csv": {
                        "type": "boolean"
                      },
                      "tsv": {
                        "type": "boolean"
                      },
                      "avro": {
                        "type": "boolean"
                      },
                      "parquet": {
                           "type": "boolean"
                      },
                      "no_of_rows_for_delimiter_files_scan": {
                        "type": "integer"
                      }
                    }
                  }
                },
                "required": [
                  "accountName",
                  "container",
              	"path",
              	"fetch_stats_type"
                ]
              },
         "s3":{
                  "type": "object",
                  "properties": {
                    "bucket": {
                      "type": "string",
                      "pattern": "^([a-z0-9])([A-Za-z0-9-_.])*[A-Za-z0-9]\$",
                      "minLength": 3,
                      "maxLength": 255
                    },
                    "region": {
                      "type": "string",
                      "pattern":"^([a-z0-9])([a-z0-9-])*[a-z0-9]\$",
                      "maxLength": 16
                    },
                    "path": {
                      "type": "string",
                      "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                    },
                    "ingestion_root_path": {
                      "type": "string",
					  "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                    },
                    "fetch_stats_type": {
                      "type": "string",
                      "pattern":"^(?i)(bucket|directory|file)\$"
                    },
                    "fetch_column_metadata": {
                      "type": "object",
                      "properties": {
                        "csv": {
                          "type": "boolean"
                        },
                        "tsv": {
                          "type": "boolean"
                        },
                        "parquet": {
                          "type": "boolean"
                        },
                        "avro": {
                          "type": "boolean"
                        },
                        "num_of_rows_for_delimiter_files_scan": {
                          "type": "integer"
                        }
                      },
                      "required": [
                        "csv",
                        "tsv",
                        "parquet",
                        "avro",
                        "num_of_rows_for_delimiter_files_scan"
                      ]
                    }
                  },
                  "required": [
                    "bucket",
                    "region",
                    "path",
                    "fetch_column_metadata"
                  ]
         },
         "glue":{
         "type": "object",
                           "properties": {
                           "region": {
                                 "title": "Region",
                                  "type": "string",
                                  "pattern":"^([a-z0-9])([a-z0-9-])*[a-z0-9]\$",
                                  "minLength": 3,
                                  "maxLength": 16
                            },
                            "bucket": {
                                 "title": "Bucket",
                                  "type": "string",
                                  "pattern": "^([a-z0-9])([A-Za-z0-9-_.])*[A-Za-z0-9]\$",
                                   "minLength": 3,
                                   "maxLength": 255
                            },
                            "database_name": {
                                          "type": "string",
                                          "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$",
                                          "minLength": 3,
                                          "maxLength": 252
                                        }
                           },
                           "required":[
                                "region","bucket",database_name
                           ]
         },
         "athena": {
           "type": "object",
           "properties": {
             "region": {
               "title": "Region",
               "type": "string",
               "maxLength": 16,
         	  "pattern":"^([a-z0-9])([a-z0-9-])*[a-z0-9]\$"
             },
             "bucket": {
               "title": "Bucket",
               "type": "string",
               "minLength": 3,
               "maxLength": 255,
         	  "pattern": "^([a-z0-9])([A-Za-z0-9-_.])*[A-Za-z0-9]\$"
             },
             "ingestion_root_path": {
               "title": "Ingestion Root Path",
               "type": "string",
         	   "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
             },
             "database_name": {
               "type": "string",
               "maxLength": 252,
         	  "pattern": "^([a-z0-9])([a-z0-9_])*[a-z0-9]\$"
             },
             "query_results_location": {
         	  "title": "Query Results Location",
               "type": "string",
         	  "pattern":"^[A-Za-z0-9,\\\.\/~`;!@#\$%&()_{}\'\\\-+=]*\$"
             }
           },
           "required": [
             "region",
             "bucket",
             "database_name",
             "query_results_location"
           ]
         },
         "ftp":{
          "type": "object",
                           "properties": {
                              "path": {
                                  "type": "string",
                                  "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                              },
                                "is_delimiter":{
                                    "type": "boolean"
                                 },
                                  "host_name": {
                                       "title": "Host Name",
                                       "type": "string",
                                       "oneOf":[
                                       {"pattern": "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\$"},
                                       {"pattern":"^(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z-]*[A-Za-z])\$"}
                                     ]
                                  },
                                  "fetch_stats_type": {
                                                 "title": "Fetch Stats Type",
                                                  "type": "string",
                                                   "enum":["directory","file"]
                                  },
            		                  "connection_mode": {
                    					          "title": "Connection Mode",
                    					          "type": "string",
												  "enum": ["active","passive"]
                    	            },
		"fetch_column_metadata": {
          "type": "object",
          "properties": {
            "csv": {
              "type": "boolean"
            },
            "tsv": {
              "type": "boolean"
            },
            "avro": {
              "type": "boolean"
            },
            "no_of_rows_for_delimiter_files_scan": {
              "type": "integer"
            }
          }
        }
                              },
                                 "required":[
                                    "host_name",
                                    "connection_mode",
									"path",
									"fetch_stats_type",
						            "is_delimiter"
                                   ]
         },
         "sftp":{
          "type": "object",
                                    "properties": {
                                       "path": {
                                           "type": "string",
                                           "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                                       },
                                         "is_delimiter":{
                                             "type": "boolean"
                                          },

                                           "host_name": {
                                                "title": "Host Name",
                                                "type": "string",
                                                "oneOf":[
                                                 {"pattern": "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\$"},
                                                 {"pattern":"^(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z-]*[A-Za-z])\$"}
                                              ]
                                           },
                                           "fetch_stats_type": {
                                                 "title": "Fetch Stats Type",
                                                  "type": "string",
                                                   "pattern":"^(?i)(directory|file)*\$"
                                           },

                                            "fetch_column_metadata": {
                                                 "type": "object",
                                                 "properties": {
                                                   "csv": {
                                                     "type": "boolean"
                                                   },
                                                   "tsv": {
                                                     "type": "boolean"
                                                   },
                                                   "avro": {
                                                     "type": "boolean"
                                                   },
                                                   "no_of_rows_for_delimiter_files_scan": {
                                                     "type": "integer"
                                                   }
                                                 }
                                               }
                                      },
                                          "required":[
                                             "host_name",
                                              "path",
                                              "fetch_stats_type",
                                              "is_delimiter",
                                              "fetch_column_metadata"
                                            ]
         },
		"bigtable":{
		   "type": "object",
		   "properties": {
			  "project_id": {
				 "title": "Project Id",
				 "type": "string",
				 "pattern": "^([a-z])([a-z0-9-])*[a-z0-9]\$",
				 "minLength": 3,
				 "maxLength": 30
			  },
			  "instance_id": {
				 "title": "Instance Id",
				 "type": "string",
				 "pattern": "^([a-z])([a-z0-9-])*[a-z0-9]\$",
				 "minLength": 3,
				 "maxLength": 30
			  },
			  "app_profile_id": {
				 "title": "App Profile Id",
				 "type": "string",
				 "maxLength": 30
			  }
		   },
		   "required": [
			  "project_id",
			  "instance_id"
		   ]
		},
         "salesforce": {
			      "type": "object",
            "properties" : {
              "login_url": {
                "type": "string"
              },
              "api_version": {
                "type": "string"
              }
            }
		     },
         "recurring":{
			"description":"user defined crawling frequency",
			"type":"object",
			"required": [
				"cron_type",
				"cron_freq",
				"cron_timezone",
				"cron_info",
				"consider_timezone"
			],
			"properties":{
				"cron_type":{
					"title":"Type of cron whether Recurring or Onetime",
					"type":"string",
					"enum": ["recurring"]
				},
				"cron_freq":{
					"title":"crawl frequency",
					"type":"string",
					"pattern": "^.*\$"
				},
				"cron_timezone":{
					"title":"Zone of time Country/City",
					"type":"string",
					"pattern":"[A-Za-z][A-Za-z0-9~\/._+-]+\$"
				},
				"consider_timezone":{
					"type":"boolean"
				},
				"cron_info":{
					"type":"object",
					"properties":{
						"schedule_type":{
							"title":"Type of schedule whether its is Daily/Weekly/Monthly/Yearly/Advanced",
							"type":"string",
							"enum": ["Daily","weekly","Monthly","Yearly","Advanced"]
						},
						"start_date":{
							"title":"Start Date",
							"type":"string"						},
						"end_date":{
							"title":"End Date",
							"type":"string"		}
					},
					"required": [
						"schedule_type",
						"start_date"
					]
				}
			}
		},
		"one_time":{
			"description":"user defined crawling frequency",
			"type":"object",
			"required": [
				"cron_type",
				"cron_freq",
				"cron_timezone",
				"consider_timezone"
			],
			"properties":{
				"cron_type":{
					"title":"Type of cron whether Recurring or Onetime",
					"type":"string",
					"enum": ["one_time"]
				},
				"cron_freq":{
					"title":"crawl frequency",
					"type":"string",
					"pattern": "^.*\$"
				},
				"cron_timezone":{
					"title":"Zone of time Country/City",
					"type":"string",
					"pattern":"[A-Za-z][A-Za-z0-9~\/._+-]+\$"
				},
				"consider_timezone":{
					"type":"boolean"
				}
			}
		}
    },
  "title":"Modify Datasource",
  "type": "object",
  "required": [
      "crawl_frequency",
  		"source_info",
  		"data_connection_name",
  		"credential_id",
  		"data_connection_id",
        "connection_type",
		"contact_info",
		"is_sensitive",
		"is_active"
  	],
  	"properties": {
  		"contact_info": {

  			"title": "Contact Info",
  			"type": "object",
  			"required":[
  			    "email"
  			],
  			"properties": {
  				"email": {
  					"title": "Email",
  					"type": "string",
  					"pattern": "^([a-zA-Z0-9]+([\\\.\\\_]?[a-zA-Z0-9]+){1,64})@([a-zA-Z0-9]+([\\\.]?[a-zA-Z0-9]){1,64}\\\.[a-zA-Z0-9]+)\$"
  				},
  				"owner": {

  					"title": "Owner",
  					"type": "string",
                    "pattern": "^([A-Za-z0-9_-])([A-Za-z0-9_-]|[ ]){3,}[A-Za-z0-9]\$"
  				},
  				"description": {
  					"title": "Description",
  					"type": "string",
  					"maxLength": 500
  				}
  			}
  		},
  		"source_info": {
  			"description": "source information",
             "\$ref": "#/definitions/$data.input_data.connection_type$"
  		},
      "crawl_frequency":{
        "description": "Crawl Frequency",
		    "\$ref": "#/definitions/$data.input_data.crawl_frequency.cron_type$"
		},
  		"data_connection_name": {

  			"title": "Data Connection Name",
  			"type": "string",
  			"pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$",
             "minLength": 3,
             "maxLength": 75
  		},
  		"credential_id": {

  			"title": "Credential Id",
  			"type": "integer",
  			"minimum": 1
  		},
  		"connection_type": {

  			"title": "Connection Type",
  			"type": "string",
                         "enum": ["postgres","oracle","sql_server","mysql","SAS","hive","redshift","gcs","s3","bigquery","sharepoint","unix","mongodb","azure_blob","adls_gen2","adls_gen1","athena","glue","smb","ftp","sftp","teradata","db2","salesforce",
			           "bigtable","http","azure_synapse","netezza","snowflake"]
  		},
  		"connection_profile_id":{
  		    "title": "Connection Profile Id",
              			"type": "integer",
              			"minimum": 1
  		},
  		"data_connection_id":{
  		    "title": "Data Connection Id",
            "type": "integer",
            "minimum": 1
  		},
		"is_sensitive": {
            "type": "boolean"
  		},
		"is_active": {
            "type": "boolean"
  		},
		"tags": {
        "type": "array",
        "items": [
        {
		    "title": "Add Tag",
            "type": "object",
			"required": [
    		"tag_category_id",
    		"tag_label_id",
    		"tag_category_color"
    	],
            "properties": {
                "tag_category_id": {
				    "description": "The unique identifier of a tag category",
                    "type": "integer",
					"minimum": 1
                },
                "tag_label_id": {
                    "description": "The unique identifier of a tag",
					"type": "integer",
					"minimum": 1
                },
                "tag_category_color": {
				    "description": "The color selected for the tag category",
                    "type": "string",
					"pattern": "^#(?:[0-9a-fA-F]{3}){1,2}\$"
                }
            }
        }
      ]
    }
  	}

}
>>

modifyDataSource_checks(data)::=<<
select $ValidDatasource(data)$, $true:UniqueDatasourceName(data)$ , ($true:dataSourceAccesscheck(data)$) as "access"
>>

modifyDataSource_template(data)::=<<
with update_dataplace as(
update nabu.dataplace
set
contact_info = E'$contactInfo(data.asMap.contact_info)$',
is_active = '$data.asMap.is_active$',
dataplace_name = '$data.asMap.data_connection_name$',
is_sensitive = '$data.asMap.is_sensitive$',
crawl_frequency = '$data.asMap.crawl_frequency.cron_freq$',
mod_by = '$data.userDetails.userId$',
mod_ts = current_timestamp,
credential_id = $data.input_data.credential_id$
where dataplace_id = $data.input_data.data_connection_id$),

update_ts as(
update nabu.job_schedule_details set valid_to_ts = current_timestamp where dataplace_id = $data.input_data.data_connection_id$ and valid_to_ts='9999-12-31' and job_type_id = (select job_type_id from nabu.job_type_lookup where job_type ='crawling')
)

insert into nabu.job_schedule_details(job_type_id, dataplace_id,refresh_frequency,additional_properties, valid_from_ts, valid_to_ts, cru_by, cru_ts) values
((select job_type_id from nabu.job_type_lookup where job_type ='crawling'),$data.input_data.data_connection_id$,'$data.input_data.crawl_frequency.cron_freq$',
'$resolveCrawlInfo(data.input_data.crawl_frequency)$',current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp)

>>

logTemplate_modifyDataSource(data)::=<<
{"audit_event_type_id": 10"dataplace_id":$data.input_data.data_connection_id$,"user_id": "$data.userDetails.userId$","log_time ": "$data.log_time$"}
>>

httpSourceInfo(data)::=<<
{
"links_to_parse":$resolveListOfLinks(data.source_info.links_to_parse)$,
"isDepth":$data.source_info.isDepth$,
"is_delimiter":$data.source_info.is_delimiter$
}
>>

resolveListOfLinks(list)::=<<
[$list:{item | $resolveLinksMap(item)$}; separator = ","$]
>>

resolveLinksMap(map)::=<<
{
"link":"$map.link$",
"isDepth":$map.isDepth$,
"showError":$map.showError$
}
>>


// This template is used to add the datasources.
// @created_by Rahul (rr0208)
//@modified_by Murthy (vk1708)
// @Api_Path : "http://localhost:port/fireshots/nabu/upd/sq/restCatalog/addDataSource"
addDataSource(data)::=<<
{
  "input_data": $data.asString$,
  "sequential_queries": [
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "addDataSource_schema",
          "validation_key": "input_data",
          "query_type":"validation"
  },
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "addDataSource_checks",
          "query_output_key":"checks",
          "query_type":"select",
          "post_process":["checks"]
  },
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "addDataSource_template",
          "query_output_key":"data",
          "query_type":"select"
  },
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "addDataSource_logDetails",
          "query_output_key":"logDetails",
          "query_type":"select"
  },
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "logTemplate_addDataSource",
          "query_type":"log",
          "log_service":"auditLog"
  }

  ],
  "output_keys":["data"]
}
>>

addDataSource_schema(data)::=<<
{
  "\$schema": "http://json-schema.org/draft-04/schema#",
  "definitions": {
      "postgres": {
        "type": "object",
        "required": [
                  "database_name","host_name"
                ],
        "properties": {
          "database_name": {
            "type": "string",
            "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$",
            "minLength": 3,
			"maxLength" : 50
          },
          "host_name": {
            	"title": "Host Name",
            	"type": "string",
            	"oneOf":[
            	{"pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"},
            	{"pattern":"^(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z-]*[A-Za-z])+:(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"}
            	]
           }
        }

      },
            "netezza": {
                    "type": "object",
                    "required": [
                              "database_name","host_name"
                            ],
                    "properties": {
                      "database_name": {
                        "type": "string",
                        "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$",
                        "minLength": 3
                      },
                      "host_name": {
                        	"title": "Host Name",
                        	"type": "string",
                        	"oneOf":[
                        	{"pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"},
                        	{"pattern":"^(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z-]*[A-Za-z])+:(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"}
                        	]
                       }
                    }

                  },

      "mysql": {
              "type": "object",
              "properties": {
                "database_name": {
                  "type": "string",
                   "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$",
                        "minLength": 3,
						"maxLength":50
                },
                "host_name": {
                  	"title": "Host Name",
                  	"type": "string",
                  	"anyOf":[
                     {"pattern": "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"},
                     {"pattern":"^(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z-]*[A-Za-z])+:(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"}
                     ]
                 }
              },
              "required": [
                "database_name","host_name"
              ]
       },
       "sql_server": {
            "type": "object",
             "properties": {
              "database_name": {
                   "type": "string",
                     "pattern":  "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$",
                        "minLength": 3,
						"maxLength": 50
               },
                "host_name": {
                   "title": "Host Name",
                   "type": "string",
                    "anyOf":[
                    {"pattern": "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"},
                     {"pattern":"^(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z-]*[A-Za-z])+:(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"}
                     ]
                  }
                 },
          "required": [
               "database_name","host_name"
           ]
       },
       "oracle": {
                   "type": "object",
                    "properties": {
                     "database_name": {
                          "type": "string",
                           "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$",
                            "minLength": 3,
							"maxLength":50
                      },
                       "host_name": {
                          "title": "Host Name",
                          "type": "string",
                           "oneOf":[
                            {"pattern": "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"},
                             {"pattern":"^(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z-]*[A-Za-z])+:(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"}
                          ]
                         }
                        },
                 "required": [
                      "database_name","host_name"
                  ]
       },
       "SAS": {
                          "type": "object",
                           "properties": {
                            "location_path": {
                                 "type": "string",
								 "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                                }
                               },
                        "required": [
                             "location_path"
                         ]
        },
        "hive":{
            "type": "object",
              "required": ["connection_mode","metastore_info","jdbc_info"
              ],
            "properties":{
                "metastore_info": {
                "title": "Metastore Info",
                "type": "object",
                "required": ["credential_id",
                			"jdbc_url"
                ],
             "properties": {
                  "credential_id": {
                    	"title": "Credential Id",
                    	"type": "integer",
                    	"minimum": 1
                    },
                    "credential_type_id": {
                    	"title": "Credential Type Id",
                    	"type": "integer",
                    	"minimum": 1
                    },
                    "jdbc_url": {
                    	"title": "Jdbc Url",
                    	"type": "string",
                        oneOf:[
                        {"pattern": "^((([a-zA-Z0-9]*\\\:){2,3})+([\/]{2}|(\\\@\/\/)|[\\\:\\\@]))(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"},
                         {"pattern":"^((([a-zA-Z0-9]*\\\:){2,3})+([\/]{2}|(\\\@\/\/)|[\\\:\\\@]))(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])[\\\:|\/][\\\w\\\-\\\.\\\;\\\=\\\@\/(\\\)\\\{\}]*\$"},
                         {"pattern":"^((([a-zA-Z0-9]*\\\:){2,3})+([\/]{2}|(\\\@\/\/)|[\\\:\\\@]))(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z\\\-]*[A-Za-z])+\\\:(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"},
                         {"pattern":"^((([a-zA-Z0-9]*\\\:){2,3})+([\/]{2}|(\\\@\/\/)|[\\\:\\\@]))(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z\\\-]*[A-Za-z])+\\\:(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])[\\\:|\/][\\\w\\\-\\\.\\\;\\\=\\\@\/(\\\)\\\{\}]*\$"}
                        ]
                    },
                    "credential_type": {
                    	"title": "Credential Type",
                    	"type": "string",
                    	"pattern":"^(?=)(Plain|LDAP|Kerberos|Kerberos Truststore|AWS)\$"
                    },
                     "metastore_schema_name": {
                       "title": "Meta Store Schema Name",
                       "type": "string"
                    }
                }
            },
            		"jdbc_info": {

            					"title": "Jdbc Info",
            					"type": "object",
            					"required": [
            						"credential_id",
            						"database_name",
            						"jdbc_url"
            					],
            					"properties": {
            						"credential_type": {

            							"title": "Credential Type",
            							"type": "string",
            							"pattern":"^(?=)(Plain|LDAP|Kerberos|Kerberos Truststore|AWS)\$"
            						},
            						"credential_type_id": {

            							"title": "Credential Type Id",
            							"type": "integer",
            							"minimum": 1
            						},
            						"credential_id": {

            							"title": "Credential Id",
            							"type": "integer",
            							"minimum": 1
            						},
            						"database_name": {

            							"title": "Database Name",
            							"type": "string",
            							"pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$",
                                        "minLength": 3
            						},
            						"jdbc_url": {

            							"title": "Jdbc Url",
            							"type": "string",
            		                    oneOf:[
                                        {"pattern": "^((([a-zA-Z0-9]*\\\:){2,3})+([\/]{2}|(\\\@\/\/)|[\\\:\\\@]))(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"},
                                         {"pattern":"^((([a-zA-Z0-9]*\\\:){2,3})+([\/]{2}|(\\\@\/\/)|[\\\:\\\@]))(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])[\\\:|\/][\\\w\\\-\\\.\\\;\\\=\\\@\/(\\\)\\\{\}]*\$"},
                                         {"pattern":"^((([a-zA-Z0-9]*\\\:){2,3})+([\/]{2}|(\\\@\/\/)|[\\\:\\\@]))(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z\\\-]*[A-Za-z])+\\\:(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"},
                                         {"pattern":"^((([a-zA-Z0-9]*\\\:){2,3})+([\/]{2}|(\\\@\/\/)|[\\\:\\\@]))(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z\\\-]*[A-Za-z])+\\\:(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])[\\\:|\/][\\\w\\\-\\\.\\\;\\\=\\\@\/(\\\)\\\{\}]*\$"}
                                         ]
            					}
            					}


            				},

            				"filesystem_info": {

            					"title": "Filesystem Info",
            					"type": "object",
            					"required": [
            						"file_system_type",
            						"file_system_type_id",
            						"ingestion_root_path"
            					],
            					"properties": {
            						"hdfs_uri": {

            							"title": "Hdfs Uri",
            							"type": "string",
                                        "oneOf":[
                                         {"pattern": "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"},
                                         {"pattern":"^(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z-]*[A-Za-z])+:(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"}
                                        ]

            						},
            						"directory": {

            							"title": "Directory",
            							"type": "string",
                                        "pattern": "^(\/[^\/][\\\w\\\-]*)*\$"
            						},
            						"file_system_type": {
            							"title": "File System Type",
            							"type": "string",
            							"enum": ["HDFS","S3A"]
            						},
            						"file_system_type_id": {

            							"title": "File System Type Id",
            							"type": "integer",
            							"minimum": 1
            						},
            						"ingestion_root_path": {

            							"title": "Ingestion Root Path",
            							"type": "string",
            							"pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
            						},
            						"credential_type_id": {
            							"title": "Credential Type Id",
            							"type": "integer",
            							"minimum": 1
            						},
            						"credential_id": {
            							"title": "Credential Id",
            							"type": "integer",
            							"minimum": 1
            						}
            					}
            				},
            		"connection_mode": {
                    					"title": "Connection Mode",
                    					"type": "string",
                    					"enum": ["JDBC mode","Cluster mode"]
                    	}
                   }
        },
        "mongodb":{
            "type": "object",
                                   "properties": {
                                    "database_name": {
                                         "type": "string",
                                         "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$",
                                          "minLength": 3,
										  "maxLength":50

                                     },
                                      "host_name": {
                                         "title": "Host Name",
                                         "type": "string",
                                          "oneOf":[
                                           {"pattern": "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"},
                                           {"pattern":"^(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z-]*[A-Za-z])+:(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"}
                                         ]
                                        }
                                     },
                                "required": [
                                     "database_name","host_name"
                                 ]
        },
        "redshift":{
          "type": "object",
          "properties": {
            "database_name": {
              "type": "string",
        	  "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$",
              "minLength": 3,
              "maxLength": 50
            },
            "host_name": {
              "title": "Host Name",
        	  "oneOf":[
        			{"pattern": "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"},
        			{"pattern":"^(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z-]*[A-Za-z])+:(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"}
             ],
              "type": "string"
            },
            "filesystem_info": {
              "title": "Filesystem Info",
              "type": "object",
              "required": [
                "file_system_type",
                "bucket",
                "credential_id",
                "region"
              ],
              "properties": {
                "region": {
                  "title": "Region",
                  "type": "string",
        		  "pattern":"^([a-z0-9])([a-z0-9-])*[a-z0-9]\$",
        		  "minLength": 3,
                  "maxLength": 16
                },
                "bucket": {
                  "title": "Bucket",
                  "type": "string",
        		  "pattern": "^([a-z0-9])([A-Za-z0-9-_.])*[A-Za-z0-9]\$",
                  "minLength": 3,
                  "maxLength": 255
                },
                "file_system_type": {
                  "title": "File System Type",
                  "type": "string"
                },
                "ingestion_root_path": {
                  "title": "Ingestion Root Path",
        		  "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$",
                  "type": "string"
                },
                "credential_id": {
                  "title": "Credential Id",
                  "type": "integer",
                  "minimum": 1
                }
              }
            }
          },
          "required": [
            "database_name",
            "host_name",
        	"filesystem_info"
          ]
        },
         "db2": {
                                  "type": "object",
                                   "properties": {
                                    "database_name": {
                                         "type": "string",
                                         "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$",
                                          "minLength": 3,
										  "maxLength":50

                                     },
                                      "host_name": {
                                         "title": "Host Name",
                                         "type": "string",
                                          "oneOf":[
                                           {"pattern": "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"},
                                           {"pattern":"^(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z-]*[A-Za-z])+:(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"}
                                         ]
                                        }
                                     },
                                "required": [
                                     "database_name","host_name"
                                 ]
         },
          "teradata": {
                                  "type": "object",
                                   "properties": {
                                    "database_name": {
                                         "type": "string",
                                         "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$",
                                          "minLength": 3,
										  "maxLength":50

                                     },
                                      "host_name": {
                                         "title": "Host Name",
                                         "type": "string",
                                          "oneOf":[
                                           {"pattern": "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"},
                                           {"pattern":"^(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z-]*[A-Za-z])+:(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"}
                                         ]
                                        }
                                     },
                                "required": [
                                     "database_name","host_name"
                                 ]
         },
          "unix":{
            "type": "object",
             "properties": {
                    "path": {
                      "type": "string",
                      "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                     },
                       "is_delimiter":{
                        "type": "boolean"
                         },
                          "mount_source_path":{
                              "type": "boolean"
                            },
                            "nfs_server_host_name":{
                                 "type": "string"
                            },
                            "source_path":{
                                  "type": "string"
                             },
                             "fetch_stats_type": {
                                "title": "Fetch Stats Type",
                                 "type": "string",
                                  "pattern":"^(?i)(directory|file)*\$"
                          },
                          "fetch_column_metadata": {
                                "type": "object",
                                "properties": {
                                  "csv": {
                                    "type": "boolean"
                                  },
                                  "tsv": {
                                    "type": "boolean"
                                  },
                                  "avro": {
                                    "type": "boolean"
                                  },
                                  "parquet": {
                                    "type": "boolean"
                                  },
                                  "no_of_rows_for_delimiter_files_scan": {
                                    "type": "integer"
                                  }
                                }
                          }
             },
             "required":[
                   "mount_source_path",
                    "path",
                   "fetch_stats_type"

             ]
         }
        ,
         "smb":{
            "type": "object",
                         "properties": {
                                "path": {
                                  "type": "string",
                                  "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_[ ]]*)*\$"
                                 },
                                   "is_delimiter":{
                                    "type": "boolean"
                                     },
                                      "host_name": {
                                            "title": "Host Name",
                                            "type": "string",
                                            "oneOf":[
                                             {"pattern": "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\$"},
                                             {"pattern":"^(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z-]*[A-Za-z])\$"}
                                             ]
                                         },
                                         "share_name": {
                                            "title": "Share Name",
                                             "type": "string",
                                             "pattern":"^([A-Za-z])([A-Za-z-!@\$%^'_.~(){}&&[^0-9]])*\$",
                                              "maxLength":80
                                          },
                                          "domain": {
                                              "title": "Domain",
                                               "type": "string",
                                               "pattern":"^([A-Za-z0-9])([A-Za-z0-9.])*[A-Za-z0-9]\$",
                                               "minLength":1,
                                               "maxLength":15
                                       },
                                       "fetch_stats_type": {
                                            "title": "Fetch Stats Type",
                                             "type": "string",
                                             "pattern":"^(?i)(directory|file|share)*\$"
                                        },
                                        "fetch_column_metadata":{
                                                   "type": "object",
                                                   "properties": {
                                                     "csv": {
                                                       "type": "boolean"
                                                     },
                                                     "tsv": {
                                                       "type": "boolean"
                                                     },
                                                     "avro": {
                                                       "type": "boolean"
                                                     },
                                                     "no_of_rows_for_delimiter_files_scan": {
                                                       "type": "integer"
                                                     }
                                                   }
                                                 }
                         },
                         "required":[
                                     "host_name",
                                      "share_name",
                                      "domain",
                                      "path",
                                     "fetch_stats_type"

                                ]
         },
         "SMB2":{
            "type": "object",
                         "properties": {
                             "location_path": {
                                 "title": "Location Path",
                                  "type": "string",
                                   "pattern" : "^(\\\S)(\/|[A-Za-z0-9\\\-\\\.\\\_ ]*)*\$"

                                    }
                              },
                          "required": [
                                  "location_path"
                        ]
         },
         "CIFS":{
                     "type": "object",
                                  "properties": {
                                      "location_path": {
                                          "title": "Location Path",
                                           "type": "string",
                                            "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                                             }
                                       },
                                   "required": [
                                           "location_path"
                                 ]
         },
          "sharepoint":{
            "type": "object",
              "properties": {
                 "site_url": {
                     "title": "Site Url",
                      "type": "string",
                       "pattern": "^(https?:\/\/)([A-Za-z0-9-_.\/:])*[A-Za-z0-9]\$",
                       "maxLength":400
                        },
                  "site_domain": {
                    "title": "Site Domain",
                        "type": "string",
                         "pattern": "^([a-z0-9])*(.sharepoint.com)\$"
                  },
                  "ingestion_root_path":{
                    "title": "Path",
                     "type": "string",
                     "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                  },
                  "is_delimiter":{
                       "type": "boolean"
                   },
                     "fetch_column_metadata":{
                           "type": "object",
                           "properties": {
                             "csv": {
                               "type": "boolean"
                             },
                             "tsv": {
                               "type": "boolean"
                             },
                             "avro": {
                               "type": "boolean"
                             },
                             "no_of_rows_for_delimiter_files_scan": {
                               "type": "integer"
                             }
                           }
                    }
               },
               "required": [
                     "site_url", "site_domain", "ingestion_root_path"
                   ]
         }
         ,
         "aws_s3":{
            "type": "object",
                       "properties": {
                          "region": {
                              "title": "Region",
                               "type": "string",
                               "pattern":"^([a-z0-9])([a-z0-9-])*[a-z0-9]\$",
                                "maxLength": 16
                                 },
                           "bucket": {
                                "title": "Bucket",
                                 "type": "string",
                                "pattern": "^([a-z0-9])([A-Za-z0-9-_.])*[A-Za-z0-9]\$",
                                 "minLength": 3,
                                  "maxLength": 255
                                 },
                            "accessKey": {
                                  "title": "AccessKey",
                                  "type": "string"
                                  },
                              "secretKey": {
                                   "title": "SecretKey",
                                    "type": "string"
                                }
                        },
                        "required": [
                              "region","bucket","accessKey","secretKey"
                         ]
         },
         "gcs":{
                 "type": "object",
                 "properties": {
                   "project_id": {
                     "title": "Project Id",
                     "type": "string",
                     "minLength": 6,
                     "maxLength": 30,
               	  "pattern":"^([a-z])([a-z0-9-])*[a-z0-9]\$"
                   },
                   "bucket_name": {
                     "title": "Bucket Name",
                     "type": "string",
                     "minLength": 3,
                     "maxLength": 63,
               	  "pattern":"^(?!goog)(?!(\\\d+\\\.)+\\\d+\$)([a-z0-9])([a-z0-9])(?!.*(google|g00gle))([a-z0-9-_\\\.]*)([a-z0-9])\$"
                   },
                   "path": {
               	  "title": "Path",
                     "type": "string",
               	     "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                   },
                   "fetch_stats_type": {
                     "title": "Fetch Stats Type",
                     "type": "string",
                     "enum": [
                       "bucket",
                       "directory",
                       "file"
                     ]
                   },
                   "ingestion_root_path": {
                     "title": "Ingestion Root Path",
                     "type": "string",
               	     "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                   },
                   "is_delimiter": {
                     "type": "boolean"
                   },
                   "fetch_column_metadata": {
                     "type": "object",
                     "properties": {
                       "csv": {
                         "type": "boolean"
                       },
                       "tsv": {
                         "type": "boolean"
                       },
                       "avro": {
                         "type": "boolean"
                       },
                       "no_of_rows_for_delimiter_files_scan": {
                         "type": "integer"
                       }
                     }
                   }
                 },
                 "required": [
                   "project_id",
                   "bucket_name",
                   "fetch_stats_type",
                   "path"
                 ]
               },
               "bigquery":{
                 "type": "object",
                 "properties": {
                   "project_id": {
                     "title": "Project Id",
                     "type": "string",
                     "minLength": 6,
                     "maxLength": 30,
               	     "pattern":"^([a-z])([a-z0-9-])*[a-z0-9]\$"
                   },
                   "bucket_name": {
                     "title": "Bucket Name",
                     "type": "string",
               	  "oneOf":[
               		{
               			"pattern":"^\$"
               		},
                       {
               			"pattern":"^(?!goog)(?!(\\\d+\\\.)+\\\d+\$)([a-z0-9])([a-z0-9])(?!.*(google|g00gle))([a-z0-9-_\\\.]*)([a-z0-9])\$",
                            "minLength":3,
                            "maxLength":63
               		}
                    ]
                   },
                   "ingestion_root_path": {
                     "title": "Ingestion Root Path",
                     "type": "string",
               	     "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                   }
                 },
                 "required": [
                   "project_id","bucket_name"
                 ]
               },
                  "adls_gen1":{
                    "type": "object",
                    "properties": {
                      "data_lake_name": {
                        "title": "Data Lake Name",
                        "type": "string",
                        "minLength": 3,
                        "maxLength": 63,
                  	  "pattern":"^[a-z0-9](?!.*--)[a-z0-9-]{1,61}[a-z0-9]\$"
                      },
                      "accountFQDN": {
                        "title": "AccountFQDN",
                        "type": "string",
                        "minLength": 3,
                        "maxLength": 64,
                  	  "pattern":"^([a-z0-9])([a-z0-9.])*[a-z0-9]\$"
                      },
                      "path": {
                        "type": "string",
                  	    "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                      },
                      "fetch_stats_type": {
                        "title": "Fetch Stats Type",
                        "type": "string",
                  	  "enum": ["container","directory","file"]
                      },
                      "ingestion_root_path": {
                        "title": "Ingestion Root Path",
                        "type": "string",
                  	    "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                      },
                      "fetch_column_metadata": {
                        "type": "object",
                        "properties": {
                          "csv": {
                            "type": "boolean"
                          },
                          "tsv": {
                            "type": "boolean"
                          },
                          "avro": {
                            "type": "boolean"
                          },
                          "no_of_rows_for_delimiter_files_scan": {
                            "type": "integer"
                          }
                        }
                      },
                      "is_delimiter": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "data_lake_name",
                      "accountFQDN",
                      "path",
                      "fetch_stats_type"
                    ]
                  },
                  "http":{
                    "type": "object",
                    "properties": {
                      "isDepth": {
                        "type": "boolean"
                      },
                      "is_delimiter": {
                        "type": "boolean"
                      },
                      "links_to_parse": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "link": {
                              "type": "string",
                  			"pattern":"^(http[s]?:\/\/)([A-Za-z0-9-_.?=\/:])*\$"
                            },
                            "isDepth": {
                              "type": "boolean"
                            },
                            "showError": {
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "link",
                            "isDepth",
                            "showError"
                          ]
                        }
                      }
                    },
                    "required": [
                      "links_to_parse"
                    ]
                  },
              "azure_synapse": {
                "type": "object",
                "properties": {
                  "host_name": {
                    "title": "Host Name",
                    "type": "string",
                    "oneOf": [
                      {
                        "pattern": "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"
                      },
                      {
                        "pattern": "^(([a-zA-Z]|[\\\\w][\\\\w\\\\-]*[\\\\w])\\\\.)*([\\\\w]|[\\\\w][A-Za-z-]*[A-Za-z])+:(?:6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{1,3}|[0-9])\$"
                      }
                    ]
                  },
                "database_name": {
                  "type": "string",
                  "maxLength": 252,
                  "minLength": 3,
                  "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$"
                },
                "filesystem_info": {
                  "title": "Filesystem Info",
                  "type": "object",
                  "required": [
                    "file_system_type",
                    "container",
                    "credential_id",
                    "accountName"
                  ],
                  "properties": {
                    "container": {
                      "title": "Container",
                      "type": "string",
                      "minLength": 3,
                      "pattern": "^[a-z0-9](?!.*--)[a-z0-9-]{1,61}[a-z0-9]\$",
                      "maxLength": 60
                    },
                    "file_system_type": {
                      "title": "File System Type",
                      "enum":["adls_gen2"],
                      "type": "string"
                    },
                    "accountName": {
                      "title": "Account Name",
                      "type": "string",
                      "pattern": "^([a-z0-9])([a-z0-9])*[a-z0-9]\$",
                      "minLength": 3,
                      "maxLength": 24
                    },
                    "ingestion_root_path": {
                      "title": "Ingestion Root Path",
                      "type": "string",
                      "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                    },
                    "credential_id": {
                      "title": "Credential Id",
                      "type": "integer",
                      "minimum": 1
                    }
                  }
                }
              },
              "required": [
              "host_name",
              "database_name",
              "filesystem_info"
              ]
              },
			  "snowflake": {
				"type": "object",
				"properties": {
					"host_name": {
						"title": "Host Name",
						"type": "string"
					},
					"database_name": {
						"type": "string",
						"maxLength": 252,
						"minLength": 3,
						"pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$"
					},
					"filesystem_info": {
						"title": "Filesystem Info",
						"type": "object",
						"required": [
							"file_system_type",
							"credential_id"
						],
						"properties": {
							"container": {
								"title": "Container",
								"type": "string",
								"pattern": "^(\$)|[a-z0-9](?!.*--)[a-z0-9-]{1,61}[a-z0-9]\$",
								"maxLength": 60
							},
							"file_system_type": {
								"title": "File System Type",
								"enum": [
									"adls_gen2",
									"s3"
								],
								"type": "string"
							},
							"bucket": {
								"title": "Bucket",
								"type": "string",
								"pattern": "^(\$)|([a-z0-9])([A-Za-z0-9-_.])*[A-Za-z0-9]\$",
								"maxLength": 255
							},
							"accountName": {
								"title": "Account Name",
								"type": "string",
								"pattern": "^(\$)|([a-z0-9])([a-z0-9])*[a-z0-9]\$",
								"maxLength": 24
							},
							"ingestion_root_path": {
								"title": "Ingestion Root Path",
								"type": "string",
								"pattern": "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
							},
							"credential_id": {
								"title": "Credential Id",
								"type": "integer",
								"minimum": 1
							}
						}
					}
				},
				"required": [
					"host_name",
					"database_name",
					"filesystem_info"
				]
			},
              "adls_gen2":{
                "type": "object",
                "properties": {
                  "accountName": {
                    "title": "Account Name",
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 24,
              	  "pattern":"^([a-z0-9])([a-z0-9])*[a-z0-9]\$"
                  },
                  "container": {
                    "title": "Container",
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 63,
              	  "pattern":"^[a-z0-9](?!.*--)[a-z0-9-]{1,61}[a-z0-9]\$"
                  },
                  "path": {
                    "type": "string",
              	    "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                  },
                  "fetch_stats_type": {
                    "title": "Fetch Stats Type",
                    "type": "string",
              	  "enum": ["container","directory","file"]
                  },
                  "ingestion_root_path": {
                    "title": "Ingestion Root Path",
                    "type": "string",
              	    "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                  },
                  "is_delimiter": {
                    "type": "boolean"
                  },
                  "fetch_column_metadata": {
                    "type": "object",
                    "properties": {
                      "csv": {
                        "type": "boolean"
                      },
                      "tsv": {
                        "type": "boolean"
                      },
                      "avro": {
                        "type": "boolean"
                      },
                      "no_of_rows_for_delimiter_files_scan": {
                        "type": "integer"
                      }
                    }
                  }
                },
                "required": [
                  "accountName",
                  "container",
              	"path",
              	"fetch_stats_type"
                ]
              },
              "azure_blob":{
                "type": "object",
                "properties": {
                  "accountName": {
                    "title": "Account Name",
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 24,
              	  "pattern":"^([a-z0-9])([a-z0-9])*[a-z0-9]\$"
                  },
                  "container": {
                    "title": "Container",
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 63,
              	  "pattern":"^[a-z0-9](?!.*--)[a-z0-9-]{1,61}[a-z0-9]\$"
                  },
                  "path": {
                    "type": "string",
              	    "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                  },
                  "fetch_stats_type": {
                    "title": "Fetch Stats Type",
                    "type": "string",
              	  "enum": ["container","directory","file"]
                  },
                  "ingestion_root_path": {
                    "title": "Ingestion Root Path",
                    "type": "string",
              	    "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                  },
                  "is_delimiter": {
                    "type": "boolean"
                  },
                  "fetch_column_metadata": {
                    "type": "object",
                    "properties": {
                      "csv": {
                        "type": "boolean"
                      },
                      "tsv": {
                        "type": "boolean"
                      },
                      "avro": {
                        "type": "boolean"
                      },
		      "parquet": {
                           "type": "boolean"
                      },
                      "no_of_rows_for_delimiter_files_scan": {
                        "type": "integer"
                      }
                    }
                  }
                },
                "required": [
                  "accountName",
                  "container",
              	"path",
              	"fetch_stats_type"
                ]
              },
         "s3":{
                  "type": "object",
                  "properties": {
                    "bucket": {
                      "type": "string",
                      "pattern": "^([a-z0-9])([A-Za-z0-9-_.])*[A-Za-z0-9]\$",
                      "minLength": 3,
                      "maxLength": 255
                    },
                    "region": {
                      "type": "string",
                      "pattern":"^([a-z0-9])([a-z0-9-])*[a-z0-9]\$",
                      "maxLength": 16
                    },
                    "path": {
                      "type": "string",
                      "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                    },
                    "ingestion_root_path": {
                      "type": "string",
					  "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                    },
                    "fetch_stats_type": {
                      "type": "string",
                      "pattern":"^(?i)(bucket|directory|file)\$"
                    },
                    "fetch_column_metadata": {
                      "type": "object",
                      "properties": {
                        "csv": {
                          "type": "boolean"
                        },
                        "tsv": {
                          "type": "boolean"
                        },
                        "parquet": {
                          "type": "boolean"
                        },
                        "avro": {
                          "type": "boolean"
                        },
                        "num_of_rows_for_delimiter_files_scan": {
                          "type": "integer"
                        }
                      },
                      "required": [
                        "csv",
                        "tsv",
                        "parquet",
                        "avro",
                        "num_of_rows_for_delimiter_files_scan"
                      ]
                    }
                  },
                  "required": [
                    "bucket",
                    "region",
                    "path",
                    "fetch_column_metadata"
                  ]
         },
         "glue":{
         "type": "object",
                           "properties": {
                           "region": {
                                 "title": "Region",
                                  "type": "string",
                                  "pattern":"^([a-z0-9])([a-z0-9-])*[a-z0-9]\$",
                                   "minLength": 3,
                                  "maxLength": 16
                            },
                            "bucket": {
                                 "title": "Bucket",
                                  "type": "string",
                                   "pattern": "^([a-z0-9])([A-Za-z0-9-_.])*[A-Za-z0-9]\$",
                                   "minLength": 3,
                                   "maxLength": 255
                            },
                            "database_name": {
                                          "type": "string",
                                          "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$",
                                          "minLength": 3,
                                          "maxLength": 252
                                        }
                           },
                           "required":[
                                "region","bucket",database_name
                           ]
         },
         "athena": {
           "type": "object",
           "properties": {
             "region": {
               "title": "Region",
               "type": "string",
               "maxLength": 16,
         	  "pattern":"^([a-z0-9])([a-z0-9-])*[a-z0-9]\$"
             },
             "bucket": {
               "title": "Bucket",
               "type": "string",
               "minLength": 3,
               "maxLength": 255,
         	  "pattern": "^([a-z0-9])([A-Za-z0-9-_.])*[A-Za-z0-9]\$"
             },
             "ingestion_root_path": {
               "title": "Ingestion Root Path",
               "type": "string",
         	   "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
             },
             "database_name": {
               "type": "string",
               "maxLength": 252,
         	  "pattern": "^([a-z0-9])([a-z0-9_])*[a-z0-9]\$"
             },
             "query_results_location": {
         	  "title": "Query Results Location",
               "type": "string",
         	  "pattern":"^[A-Za-z0-9,\\\.\/~`;!@#\$%&()_{}\'\\\-+=]*\$"
             }
           },
           "required": [
             "region",
             "bucket",
             "database_name",
             "query_results_location"
           ]
         },
         "ftp":{
          "type": "object",
                           "properties": {
                              "path": {
                                  "type": "string",
                                  "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                              },
                                "is_delimiter":{
                                    "type": "boolean"
                                 },
                                  "host_name": {
                                       "title": "Host Name",
                                       "type": "string",
                                "oneOf":[
                                     {"pattern": "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\$"},
                                      {"pattern":"^(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z-]*[A-Za-z])\$"}
                                 ]
                                  },
                                  "fetch_stats_type": {
                                                 "title": "Fetch Stats Type",
                                                  "type": "string",
                                                    "enum":["directory","file"]
                                  },
            		                  "connection_mode": {
                    					          "title": "Connection Mode",
                    					          "type": "string",
												  "enum": ["active","passive"]
                    	            },
									"fetch_column_metadata": {
          "type": "object",
          "properties": {
            "csv": {
              "type": "boolean"
            },
            "tsv": {
              "type": "boolean"
            },
            "avro": {
              "type": "boolean"
            },
            "no_of_rows_for_delimiter_files_scan": {
              "type": "integer"
            }
          }
        }
                             },
                                 "required":[
                                    "host_name",
                                     "connection_mode",
									 "path",
									 "fetch_stats_type",
									 "is_delimiter"
                                   ]
         },
         "sftp":{
          "type": "object",
                                    "properties": {
                                       "path": {
                                           "type": "string",
                                           "pattern" : "^(\/|[A-Za-z0-9\\\-\\\.\\\_]*)*\$"
                                       },
                                         "is_delimiter":{
                                             "type": "boolean"
                                          },
                                           "host_name": {
                                                "title": "Host Name",
                                                "type": "string",
                                                "oneOf":[
                                                {"pattern": "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\$"},
                                                {"pattern":"^(([a-zA-Z]|[\\\w][\\\w\\\-]*[\\\w])\\\.)*([\\\w]|[\\\w][A-Za-z-]*[A-Za-z])\$"}
                                              ]
                                           },
                                           "fetch_stats_type": {
                                                 "title": "Fetch Stats Type",
                                                  "type": "string",
                                                   "pattern":"^(?i)(directory|file)*\$"
                                            },
                                            "fetch_column_metadata": {
                                                      "type": "object",
                                                      "properties": {
                                                        "csv": {
                                                          "type": "boolean"
                                                        },
                                                        "tsv": {
                                                          "type": "boolean"
                                                        },
                                                        "avro": {
                                                          "type": "boolean"
                                                        },
                                                        "no_of_rows_for_delimiter_files_scan": {
                                                          "type": "integer"
                                                        }
                                                      }
                                                    }

                                      },
                                          "required":[
                                             "host_name",
                                             "fetch_column_metadata",
                                             "path",
                                             "fetch_stats_type",
                                             "is_delimiter"
                                            ]
         },
		"bigtable":{
		   "type": "object",
		   "properties": {
			  "project_id": {
				 "title": "Project Id",
				 "type": "string",
				 "pattern": "^([a-z])([a-z0-9-])*[a-z0-9]\$",
				 "minLength": 3,
				 "maxLength": 30
			  },
			  "instance_id": {
				 "title": "Instance Id",
				 "type": "string",
				 "pattern": "^([a-z])([a-z0-9-])*[a-z0-9]\$",
				 "minLength": 3,
				 "maxLength": 30
			  },
			  "app_profile_id": {
				 "title": "App Profile Id",
				 "type": "string",
				 "maxLength": 30
			  }
		   },
		   "required": [
			  "project_id",
			  "instance_id"
		   ]
		},
         "salesforce": {
			      "type": "object",
            "properties" : {
              "login_url": {
                "type": "string"
              },
              "api_version": {
                "type": "string"
              }
            }
		     },
		    "recurring":{
			    "description":"user defined crawling frequency",
		    	"type":"object",
			    "required": [
				    "cron_type",
				    "cron_freq",
				    "cron_timezone",
				    "cron_info",
				    "consider_timezone"
			    ],
			    "properties":{
    				"cron_type":{
					  "title":"Type of cron whether Recurring or Onetime",
					  "type":"string",
				  	"enum": ["recurring"]
				  },
				  "cron_freq":{
  					"title":"crawl frequency",
					  "type":"string",
					  "pattern": "^.*\$"
			  	},
				  "cron_timezone":{
					  "title":"Zone of time Country/City",
					  "type":"string",
					  "pattern":"[A-Za-z][A-Za-z0-9~\/._+-]+\$"
			  	},
				"consider_timezone":{
					"type":"boolean"
				},
			  	"cron_info":{
					  "type":"object",
					  "properties":{
						  "schedule_type":{
						  	"title":"Type of schedule whether its is Daily/Weekly/Monthly/Yearly/Advanced",
							  "type":"string",
						  	"enum": ["Daily","weekly","Monthly","Yearly","Advanced"]
						  },
						  "start_date":{
							  "title":"Start Date",
							  "type":"string"

						},
						  "end_date":{
							  "title":"End Date",
							  "type":"string"
						}
					},
					  "required": [
						  "schedule_type",
						  "start_date"
					  ]
				  }
			  }
		  },
		"one_time":{
			"description":"user defined crawling frequency",
			"type":"object",
			"required": [
				"cron_type",
				"cron_freq",
				"cron_timezone",
				"consider_timezone"
			],
			"properties":{
				"cron_type":{
					"title":"Type of cron whether Recurring or Onetime",
					"type":"string",
					"enum": ["one_time"]
				},
				"cron_freq":{
					"title":"crawl frequency",
					"type":"string",
					"pattern": "^.*\$"
				},
				"cron_timezone":{
					"title":"Zone of time Country/City",
					"type":"string",
					"pattern":"[A-Za-z][A-Za-z0-9~\/._+-]+\$"
				},
				"consider_timezone":{
					"type":"boolean"
				}
			}
		}
    },
  "title":"Add Datasource",
  "type": "object",
  "required": [
      "crawl_frequency",
  		"source_info",
  		"data_connection_name",
  		"credential_id",
        "connection_type",
		"contact_info",
		"is_sensitive",
		"is_active"
		],
  	"properties": {
  		"contact_info": {

  			"title": "Contact Info",
  			"type": "object",
  			"required":[
              	"email"
             ],
  			"properties": {
  				"email": {
  					"title": "Email",
  					"type": "string",
  					"pattern": "^([a-zA-Z0-9]+([\\\.\\\_]?[a-zA-Z0-9]+){1,64})@([a-zA-Z0-9]+([\\\.]?[a-zA-Z0-9]){1,64}\\\.[a-zA-Z0-9]+)\$"
  				},
  				"owner": {
  					"title": "Owner",
  					"type": "string"
  				},
  				"description": {
  					"title": "Description",
  					"type": "string",
  					"maxLength": 500
  				}
  			}
  		},
  		"source_info": {
  			"description": "source information",
             "\$ref": "#/definitions/$data.input_data.connection_type$"
  		},
     "crawl_frequency":{
        "description": "Crawl Frequency",
		    "\$ref": "#/definitions/$data.input_data.crawl_frequency.cron_type$"
		},
  		"data_connection_name": {

  			"title": "Data Connection Name",
  			"type": "string",
  			"pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$",
             "minLength": 3,
             "maxLength": 75
  		},
  		"credential_id": {

  			"title": "Credential Id",
  			"type": "integer",
  			"minimum": 1
  		},
  		"connection_type": {

  			"title": "Connection Type",
  			"type": "string",
                         "enum": ["postgres","oracle","sql_server","mysql","SAS","hive","redshift","gcs","s3","bigquery","sharepoint","unix","mongodb","azure_blob","adls_gen2","adls_gen1","athena","glue","smb","ftp","sftp","teradata","db2","salesforce",
			           "bigtable","http","azure_synapse","netezza","snowflake"]
  		},
  		"is_sensitive": {
            "type": "boolean"
  		},
		"is_active": {
            "type": "boolean"
  		},
		"tags": {
          "type": "array",
        "items": [
        {
		    "title": "Add Tag",
            "type": "object",
			"required": [
    		"tag_category_id",
    		"tag_label_id",
    		"tag_category_color"
    	],
            "properties": {
                "tag_category_id": {
				    "description": "The unique identifier of a tag category",
                    "type": "integer",
					"minimum": 1
                },
                "tag_label_id": {
                    "description": "The unique identifier of a tag",
					"type": "integer",
					"minimum": 1
                },
                "tag_category_color": {
				    "description": "The color selected for the tag category",
                    "type": "string",
					"pattern": "^#(?:[0-9a-fA-F]{3}){1,2}\$"
                }
            }
        }
      ]
    }
  }
}
>>

addDataSource_checks(data)::=<<
select $false:UniqueDatasourceName(data)$
>>

UniqueDatasourceName(modify, data)::=<<
not exists(select * from nabu.dataplace where valid_to_ts='9999-12-31' and lower(dataplace_name)=lower('$data.input_data.data_connection_name$')
$if(modify)$and dataplace_id<>$data.asMap.data_connection_id$$endif$) "unique"
>>

addDataSource_logDetails(data)::=<<
select dataplace_id from nabu.dataplace
where dataplace_name='$data.input_data.data_connection_name$'
>>

addDataSource_template(data)::=<<
with component_details as (
select dataplace_component_type,a.dataplace_component_type_id
from nabu.dataplace_component_mapping_lookup a
inner join nabu.dataplace_component_lookup b on a.dataplace_component_type_id = b.dataplace_component_type_id
where dataplace_sub_component_id = (
                                        select connection_profile_id from nabu.connection_profile
                                        where connection_type = '$data.input_data.connection_type$')
)
,component_type_flag as (
select case when count(dataplace_component_type_id)>1 then true else false end as flag
from component_details
)
,dataplace_component_id_details as (
select case when flag then (
                        select dataplace_component_type_id
                        from component_details
                        where dataplace_component_type = $resolveComponentType(data.input_data)$)
                else (
                select dataplace_component_type_id
                from component_details)
        end as dataplace_component_type_id
from component_type_flag
)
,dataplace_id as(
insert into nabu.dataplace(dataplace_name,datalayer_component_id,source_info,is_active,is_sensitive,connection_profile_id,credential_id,crawl_frequency,contact_info,crt_by,crt_ts,mod_by,mod_ts,valid_from_ts,valid_to_ts) values
('$data.input_data.data_connection_name$',
(select dataplace_component_type_id from dataplace_component_id_details),
'$([data.input_data.connection_type,"SourceInfo"])(data.input_data)$',
'$data.input_data.is_active$','$data.input_data.is_sensitive$',
(select connection_profile_id from nabu.connection_profile where connection_type = '$data.input_data.connection_type$'),
$data.input_data.credential_id$,
'$data.input_data.crawl_frequency.cron_freq$',
 E'$contactInfo(data.input_data.contact_info)$',
'$data.userDetails.userId$',current_timestamp,'$data.userDetails.userId$',current_timestamp,current_timestamp,'9999-12-31')
returning dataplace_id
),
job_schedule_details as (
insert into nabu.job_schedule_details(job_type_id, dataplace_id,refresh_frequency,additional_properties, valid_from_ts, valid_to_ts, cru_by, cru_ts) values
((select job_type_id from nabu.job_type_lookup where job_type ='crawling'),(select dataplace_id from dataplace_id),'$data.input_data.crawl_frequency.cron_freq$',
'$resolveCrawlInfo(data.input_data.crawl_frequency)$',current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp)
)
$if(data.asMap.tags)$
$"dataplace":resolveTags(data)$
$endif$
select dataplace_id as data_connection_id from dataplace_id
>>


logTemplate_addDataSource(data)::=<<
{"audit_event_type_id": 9,"dataplace_id":$first(data.logDetails).dataplace_id$,"user_id": "$data.userDetails.userId$","log_time ": "$data.log_time$"}
>>

resolveComponentType(data)::=<<
$if(data.source_info.is_delimiter)$
'Semi Structured'
$else$
'Unstructured'
$endif$
>>

contactInfo(data)::=<<
{
"owner":"$data.owner$",
"email":"$data.email$",
"description":"$data.description$"
}
>>

resolveCrawlInfo(data)::=<<
$if(data.cron_type)$
{"crawl_frequency": $resolveCronJson(data)$}
$endif$
>>

resolveCronJson(cronJson)::=<<
{
	"cron_type":"$cronJson.cron_type$",
	"cron_freq":"$cronJson.cron_freq$",
	"cron_timezone":"$cronJson.cron_timezone$",
	"consider_timezone":$cronJson.consider_timezone$
	$if(cronJson.cron_info)$
	,"cron_info":$resolveCronInfo(cronJson.cron_info)$
	$endif$
}
>>

resolveCronInfo(cronInfo)::=<<
{
	"schedule_type":"$cronInfo.schedule_type$",
    "start_date":"$cronInfo.start_date$"
	$if(cronInfo.end_date)$
    ,"end_date":"$cronInfo.end_date$"
	$endif$
}
>>

postgresSourceInfo(data)::=<<
{
    "host_name":"$data.source_info.host_name$",
    "database_name":"$data.source_info.database_name$",
    "filters_enabled":$data.source_info.filters_enabled$
    $if(data.source_info.filters_enabled)$
        ,"filter_list":$resolveList(data.source_info.filter_list)$
    $endif$
}
>>

mysqlSourceInfo(data)::=<<
{
    "host_name":"$data.source_info.host_name$",
    "database_name":"$data.source_info.database_name$",
    "filters_enabled":$data.source_info.filters_enabled$
}
>>

sql_serverSourceInfo(data)::=<<
{
    "host_name":"$data.source_info.host_name$",
    "database_name":"$data.source_info.database_name$",
    "filters_enabled":$data.source_info.filters_enabled$
    $if(data.source_info.filters_enabled)$
        ,"filter_list":$resolveList(data.source_info.filter_list)$
    $endif$
}
>>

oracleSourceInfo(data)::=<<
{
    "host_name":"$data.source_info.host_name$",
    "database_name":"$data.source_info.database_name$",
    "filters_enabled":$data.source_info.filters_enabled$
    $if(data.source_info.filters_enabled)$
        ,"filter_list":$resolveList(data.source_info.filter_list)$
    $endif$
}
>>

SASSourceInfo(data)::=<<
{
    "location_path":"$data.source_info.location_path$",
    "filters_enabled":$data.source_info.filters_enabled$
    $if(data.source_info.filters_enabled)$
        ,"filter_list":$resolveList(data.source_info.filter_list)$
    $endif$
}
>>

hiveSourceInfo(data)::=<<
{
    "connection_mode": "$data.source_info.connection_mode$",
    "filters_enabled":$data.source_info.filters_enabled$,
    "metastore_info": {
        "credential_id": $getOrDefaultInt(data.source_info.metastore_info.credential_id)$,
        "jdbc_url": "$data.source_info.metastore_info.jdbc_url$"
		$if(data.source_info.metastore_info.metastore_schema_name)$
		,"metastore_schema_name": "$data.source_info.metastore_info.metastore_schema_name$"
		$endif$
    },
    "jdbc_info": {
        "database_name": "$data.source_info.jdbc_info.database_name$",
        "jdbc_url": "$data.source_info.jdbc_info.jdbc_url$",
        "credential_id": $getOrDefaultInt(data.source_info.jdbc_info.credential_id)$
    }
	$if(data.source_info.filesystem_info)$
	,"filesystem_info": {
        "directory": "$data.source_info.filesystem_info.directory$",
        "hdfs_uri": "$data.source_info.filesystem_info.hdfs_uri$",
        "ingestion_root_path": "$data.source_info.filesystem_info.ingestion_root_path$",
        "file_system_type": "$data.source_info.filesystem_info.file_system_type$",
        "file_system_type_id": $data.source_info.filesystem_info.file_system_type_id$
		$if(data.source_info.filesystem_info.credential_id)$
		,"credential_id": $getOrDefaultInt(data.source_info.filesystem_info.credential_id)$
		$endif$
		$if(data.source_info.filesystem_info.endpoint)$
		,"endpoint": "$data.source_info.filesystem_info.endpoint$"
		$endif$
    }
	$endif$
}
>>


cloudera_hiveSourceInfo_backup(data)::=<<
{
"database_name":"$data.source_info.database_name$",
"host_name":"$data.source_info.host_name$",
"hdfs_uri":"$data.source_info.hdfs_config.hdfs_uri$",
"output_file_type":"$data.source_info.hdfs_config.output_file_type$",
"output_file_suffix":"$data.source_info.hdfs_config.output_file_suffix$",
"data_format":"$data.source_info.hdfs_config.data_format$",
"hdfs_config_directory":"$data.source_info.hdfs_config.hdfs_config_directory$",
"hive_jdbc_url":"$data.source_info.hive_config.hive_jdbc_url$",
"hive_jdbc_driver":"$data.source_info.hive_config.hive_jdbc_driver$",
"hive_config_directory":"$data.source_info.hive_config.hive_config_directory$",
"keystore_path":"$data.source_info.hive_config.keystore_path$",
"keystore_password":"$data.source_info.hive_config.keystore_password$"
}
>>

mongodbSourceInfo(data)::=<<
{
    "host_name":"$data.source_info.host_name$",
    "database_name":"$data.source_info.database_name$",
    "configuration":"$data.source_info.configuration$",
    "filters_enabled":$data.source_info.filters_enabled$
}
>>

documentumSourceInfo(data)::=<<
{
"docbase_name":"$data.source_info.docbase_name$",
"docbroker_host_name":"$data.source_info.docbroker_host_name$"
}
>>

unixSourceInfo(data)::=<<
{
    "path":"$data.source_info.path$",
    "is_delimiter":$data.source_info.is_delimiter$,
    "fetch_stats_type": "$data.source_info.fetch_stats_type$",
    "fetch_column_metadata": {
          "csv": $data.source_info.fetch_column_metadata.csv$,
          "tsv": $data.source_info.fetch_column_metadata.tsv$,
          "parquet": $data.source_info.fetch_column_metadata.parquet$,
          "avro": $data.source_info.fetch_column_metadata.avro$
          $if(data.source_info.fetch_column_metadata.num_of_rows_for_delimiter_files_scan)$
          ,"num_of_rows_for_delimiter_files_scan": $data.source_info.fetch_column_metadata.num_of_rows_for_delimiter_files_scan$
          $endif$
    },
    "nfs_server_host_name": "$data.source_info.nfs_server_host_name$",
    "source_path": "$data.source_info.source_path$",
    "mount_source_path": $data.source_info.mount_source_path$
}
>>

smbSourceInfo(data)::=<<
{
    "host_name":"$data.source_info.host_name$",
    "share_name":"$data.source_info.share_name$",
    "domain":"$data.source_info.domain$",
    "path":"$data.source_info.path$",
    "is_delimiter":$data.source_info.is_delimiter$,
    "fetch_stats_type": "$data.source_info.fetch_stats_type$",
    "fetch_column_metadata": {
          "csv": $data.source_info.fetch_column_metadata.csv$,
          "tsv": $data.source_info.fetch_column_metadata.tsv$,
          "avro": $data.source_info.fetch_column_metadata.avro$,
          "num_of_rows_for_delimiter_files_scan": $data.source_info.fetch_column_metadata.num_of_rows_for_delimiter_files_scan$
    }
}
>>

sharepointSourceInfo(data)::=<<
{
    "site_domain": "$data.source_info.site_domain$",
    "site_url": "$data.source_info.site_url$",
    "ingestion_root_path": "$data.source_info.ingestion_root_path$",
    "is_delimiter": $data.source_info.is_delimiter$,
    "fetch_column_metadata": {
          "csv": $data.source_info.fetch_column_metadata.csv$,
          "tsv": $data.source_info.fetch_column_metadata.tsv$,
          "avro": $data.source_info.fetch_column_metadata.avro$,
          "num_of_rows_for_delimiter_files_scan": $data.source_info.fetch_column_metadata.num_of_rows_for_delimiter_files_scan$
    }
}
>>

sharepoint_subsiteSourceInfo(data)::=<<
{
"site_domain": "$data.source_info.site_domain$",
"site_url": "$data.source_info.site_url$",
"ingestion_root_path": "$data.source_info.ingestion_root_path$",
"is_delimiter": $data.source_info.is_delimiter$,
"fetch_column_metadata": {
      "csv": $data.source_info.fetch_column_metadata.csv$,
      "tsv": $data.source_info.fetch_column_metadata.tsv$,
      "avro": $data.source_info.fetch_column_metadata.avro$,
      "num_of_rows_for_delimiter_files_scan": $data.source_info.fetch_column_metadata.num_of_rows_for_delimiter_files_scan$
    }
}
>>

gcsSourceInfo(data)::=<<
{
    "project_id": "$data.source_info.project_id$",
    "bucket_name": "$data.source_info.bucket_name$",
    "path": "$data.source_info.path$",
    "fetch_stats_type": "$data.source_info.fetch_stats_type$",
    "ingestion_root_path": "$data.source_info.ingestion_root_path$",
    "is_delimiter": $data.source_info.is_delimiter$,
    "fetch_column_metadata": {
        "csv": $data.source_info.fetch_column_metadata.csv$,
        "tsv": $data.source_info.fetch_column_metadata.tsv$,
        "avro": $data.source_info.fetch_column_metadata.avro$,
        "num_of_rows_for_delimiter_files_scan": $data.source_info.fetch_column_metadata.num_of_rows_for_delimiter_files_scan$
    }
}
>>


athenaSourceInfo(data)::=<<
{
    "region": "$data.source_info.region$",
    "bucket": "$data.source_info.bucket$",
    "ingestion_root_path": "$data.source_info.ingestion_root_path$",
    "database_name": "$data.source_info.database_name$",
    "query_results_location": "$data.source_info.query_results_location$",
    "filters_enabled":$data.source_info.filters_enabled$
}
>>


bigquerySourceInfo(data)::=<<
{
    "project_id": "$data.source_info.project_id$",
    "bucket_name": "$data.source_info.bucket_name$",
    "ingestion_root_path": "$data.source_info.ingestion_root_path$",
    "filters_enabled":$data.source_info.filters_enabled$
    $if(data.source_info.filters_enabled)$
        ,"filter_list":$resolveList(data.source_info.filter_list)$
    $endif$
}
>>


adls_gen1SourceInfo(data)::=<<
{
    "data_lake_name": "$data.source_info.data_lake_name$",
    "accountFQDN": "$data.source_info.accountFQDN$",
    "path": "$data.source_info.path$",
    "fetch_stats_type": "$data.source_info.fetch_stats_type$",
    "ingestion_root_path": "$data.source_info.ingestion_root_path$",
    "is_delimiter": $data.source_info.is_delimiter$,
    "fetch_column_metadata": {
        "csv": $data.source_info.fetch_column_metadata.csv$,
        "tsv": $data.source_info.fetch_column_metadata.tsv$,
        "avro": $data.source_info.fetch_column_metadata.avro$,
        "parquet": $data.source_info.fetch_column_metadata.parquet$,
        "num_of_rows_for_delimiter_files_scan": $data.source_info.fetch_column_metadata.num_of_rows_for_delimiter_files_scan$
    }
}
>>


adls_gen2SourceInfo(data)::=<<
{
    "accountName": "$data.source_info.accountName$",
    "container": "$data.source_info.container$",
    "path": "$data.source_info.path$",
    "fetch_stats_type": "$data.source_info.fetch_stats_type$",
    "ingestion_root_path": "$data.source_info.ingestion_root_path$",
    "is_delimiter": $data.source_info.is_delimiter$,
    "fetch_column_metadata": {
        "csv": $data.source_info.fetch_column_metadata.csv$,
        "tsv": $data.source_info.fetch_column_metadata.tsv$,
        "avro": $data.source_info.fetch_column_metadata.avro$,
        "num_of_rows_for_delimiter_files_scan": $data.source_info.fetch_column_metadata.num_of_rows_for_delimiter_files_scan$
    }
}
>>


azure_blobSourceInfo(data)::=<<
{
    "accountName": "$data.source_info.accountName$",
    "container": "$data.source_info.container$",
    "path": "$data.source_info.path$",
    "fetch_stats_type": "$data.source_info.fetch_stats_type$",
    "ingestion_root_path": "$data.source_info.ingestion_root_path$",
    "is_delimiter": $data.source_info.is_delimiter$,
    "fetch_column_metadata": {
        "csv": $data.source_info.fetch_column_metadata.csv$,
        "tsv": $data.source_info.fetch_column_metadata.tsv$,
        "avro": $data.source_info.fetch_column_metadata.avro$,
        "parquet": $data.source_info.fetch_column_metadata.parquet$,
        "num_of_rows_for_delimiter_files_scan": $data.source_info.fetch_column_metadata.num_of_rows_for_delimiter_files_scan$
    }
}
>>



s3SourceInfo(data)::=<<
{
"bucket": "$data.source_info.bucket$"
,"region": "$data.source_info.region$"
,"path": "$data.source_info.path$"
,"ingestion_root_path":"$data.source_info.ingestion_root_path$"
,"fetch_stats_type" : "$data.source_info.fetch_stats_type$"
,"fetch_column_metadata": {
      "csv": $data.source_info.fetch_column_metadata.csv$,
      "tsv": $data.source_info.fetch_column_metadata.tsv$,
      "parquet": $data.source_info.fetch_column_metadata.parquet$,
      "avro": $data.source_info.fetch_column_metadata.avro$,
      "num_of_rows_for_delimiter_files_scan": $data.source_info.fetch_column_metadata.num_of_rows_for_delimiter_files_scan$
    }
$if(data.source_info.is_delimiter)$
,"is_delimiter": $data.source_info.is_delimiter$
$endif$
}
>>

ftpSourceInfo(data)::=<<
{
    "host_name": "$data.source_info.host_name$",
    "connection_mode": "$data.source_info.connection_mode$",
    "path": "$data.source_info.path$",
    "proxy_url": "$data.source_info.proxy_url$",
    "fetch_stats_type":"$data.source_info.fetch_stats_type$",
    "fetch_column_metadata": {
          "csv": $data.source_info.fetch_column_metadata.csv$,
          "tsv": $data.source_info.fetch_column_metadata.tsv$,
          "avro": $data.source_info.fetch_column_metadata.avro$,
          "num_of_rows_for_delimiter_files_scan": $data.source_info.fetch_column_metadata.num_of_rows_for_delimiter_files_scan$
        },
    "is_delimiter": $data.source_info.is_delimiter$
}
>>

ftpsSourceInfo(data)::=<<
{
"host_name": "$data.source_info.host_name$",
"connection_mode": "$data.source_info.connection_mode$",
"port":$data.source_info.port$,
"path": "$data.source_info.path$",
"proxy_url": "$data.source_info.proxy_url$",
"fetch_stats_type":"$data.source_info.fetch_stats_type$",
"explicit_tls":$data.source_info.explicit_tls$,
"fetch_column_metadata": {
      "csv": $data.source_info.fetch_column_metadata.csv$,
      "tsv": $data.source_info.fetch_column_metadata.tsv$,
      "avro": $data.source_info.fetch_column_metadata.avro$,
      "num_of_rows_for_delimiter_files_scan": $data.source_info.fetch_column_metadata.num_of_rows_for_delimiter_files_scan$
    },
"is_delimiter": $data.source_info.is_delimiter$
}
>>

sftpSourceInfo(data)::=<<
{
"host_name": "$data.source_info.host_name$",
"path": "$data.source_info.path$",
"is_delimiter": $data.source_info.is_delimiter$,
"fetch_stats_type": "$data.source_info.fetch_stats_type$",
"fetch_column_metadata": {
      "csv": $data.source_info.fetch_column_metadata.csv$,
      "tsv": $data.source_info.fetch_column_metadata.tsv$,
      "avro": $data.source_info.fetch_column_metadata.avro$,
      "num_of_rows_for_delimiter_files_scan": $data.source_info.fetch_column_metadata.num_of_rows_for_delimiter_files_scan$
    }
}
>>

sap_hanaSourceInfo(data)::=<<
{
"host_name":"$data.source_info.host_name$",
"database_name":"$data.source_info.database_name$",
"filters_enabled":$data.source_info.filters_enabled$
$if(data.source_info.filters_enabled)$
,"filter_list":$resolveList(data.source_info.filter_list)$
$endif$
}
>>


glueSourceInfo(data)::=<<
{
    "region": "$data.source_info.region$",
    "bucket": "$data.source_info.bucket$",
    "database_name": "$data.source_info.database_name$",
    "filters_enabled":$data.source_info.filters_enabled$
    $if(data.source_info.filters_enabled)$
        ,"filter_list":$resolveList(data.source_info.filter_list)$
    $endif$
}
>>

azure_synapseSourceInfo(data)::=<<
{
    "host_name": "$data.source_info.host_name$",
    "database_name": "$data.source_info.database_name$",
    "filters_enabled":$data.source_info.filters_enabled$,
    $if(data.source_info.filters_enabled)$
        "filter_list":$resolveList(data.source_info.filter_list)$,
    $endif$
    "filesystem_info": {
        "container": "$data.source_info.filesystem_info.container$",
        "accountName": "$data.source_info.filesystem_info.accountName$",
        $if(data.source_info.filesystem_info.ingestion_root_path)$
        "ingestion_root_path": "$data.source_info.filesystem_info.ingestion_root_path$",
        $endif$
        "file_system_type": "$data.source_info.filesystem_info.file_system_type$",
        "credential_id": $getOrDefaultInt(data.source_info.filesystem_info.credential_id)$
    }
}
>>

netezzaSourceInfo(data)::=<<
{
    "host_name": "$data.source_info.host_name$",
    "database_name": "$data.source_info.database_name$",
    "filters_enabled":$data.source_info.filters_enabled$
    $if(data.source_info.filters_enabled)$
        ,"filter_list":$resolveList(data.source_info.filter_list)$
    $endif$
}
>>

httpSourceInfo(data)::=<<
{
    "links_to_parse":$resolveListOfLinks(data.source_info.links_to_parse)$,
    "isDepth":$data.source_info.isDepth$,
    "is_delimiter":$data.source_info.is_delimiter$
}
>>

redshift_relationalSourceInfo(data)::=<<
{
"host_name":"$data.source_info.host_name$",
"database_name":"$data.source_info.database_name$",
"filters_enabled":$data.source_info.filters_enabled$
$if(data.source_info.filters_enabled)$
,"filter_list":$resolveList(data.source_info.filter_list)$
$endif$
}
>>

redshiftSourceInfo(data)::=<<
{
    "host_name":"$data.source_info.host_name$",
    "database_name":"$data.source_info.database_name$",
    "filters_enabled":$data.source_info.filters_enabled$
    $if(data.source_info.filters_enabled)$
    ,"filter_list":$resolveList(data.source_info.filter_list)$
    $endif$
    $if(data.source_info.filesystem_info)$
    ,"filesystem_info": {
        "region": "$data.source_info.filesystem_info.region$",
        "bucket": "$data.source_info.filesystem_info.bucket$",
        $if(data.source_info.filesystem_info.ingestion_root_path)$
        "ingestion_root_path": "$data.source_info.filesystem_info.ingestion_root_path$",
        $endif$
        "file_system_type": "$data.source_info.filesystem_info.file_system_type$",
        "credential_id": $getOrDefaultInt(data.source_info.filesystem_info.credential_id)$
    }
    $endif$
}
>>

db2SourceInfo(data)::=<<
{
    "host_name": "$data.source_info.host_name$",
    "database_name": "$data.source_info.database_name$",
    "filters_enabled":$data.source_info.filters_enabled$
    $if(data.source_info.filters_enabled)$
        ,"filter_list":$resolveList(data.source_info.filter_list)$
    $endif$
}
>>


teradataSourceInfo(data)::=<<
{
    "host_name": "$data.source_info.host_name$",
    "database_name": "$data.source_info.database_name$",
    "filters_enabled":$data.source_info.filters_enabled$
}
>>

bigtableSourceInfo(data)::=<<
{
    "project_id": "$data.source_info.project_id$",
    "instance_id": "$data.source_info.instance_id$"
    $if(data.source_info.app_profile_id)$
    ,"app_profile_id": "$data.source_info.app_profile_id$"
    $endif$
}
>>


salesforceSourceInfo(data)::=<<
{
"login_url": "$data.source_info.login_url$",
"api_version": "$data.source_info.api_version$"
}
>>

snowflakeSourceInfo(data)::=<<
{
	"host_name": "$data.source_info.host_name$",
	"database_name": "$data.source_info.database_name$",
	"filters_enabled":$data.source_info.filters_enabled$,
	$if(data.source_info.filters_enabled)$
	"filter_list":$resolveList(data.source_info.filter_list)$,
	$endif$
	"filesystem_info": {
		"bucket": "$data.source_info.filesystem_info.bucket$",
		"container": "$data.source_info.filesystem_info.container$",
		"accountName": "$data.source_info.filesystem_info.accountName$",
		$if(data.source_info.filesystem_info.ingestion_root_path)$
		"ingestion_root_path": "$data.source_info.filesystem_info.ingestion_root_path$",
		$endif$
		"file_system_type": "$data.source_info.filesystem_info.file_system_type$",
		"credential_id": $getOrDefaultInt(data.source_info.filesystem_info.credential_id)$
	}
}
>>



// This template is used to create an entity.
// @modified_by Vidhya(vd0912)
// @Api_Path : "http://localhost:port/fireshots/nabu/upd/sq/restCatalog/addEntity"

addEntity(data)::=<<
{
    "input_data": $data.asString$,
    "sequential_queries": [
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "addEntity_schema",
            "validation_key": "input_data",
            "query_type": "validation"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "addEntity_checks",
            "query_output_key": "checks",
            "query_type":"select",
            "post_process": ["checks"]
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "addEntity_template",
            "query_output_key": "data",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "addEntity_logDetails",
            "query_output_key": "logDetails",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "logTemplate_addEntity",
            "query_type": "log",
            "log_service": "auditLog"
        }
    ],
    "output_keys": [
        "data"
    ]
}
>>

addEntity_logDetails(data)::=<<
select datastore_name from nabu.datastore where datastore_id =$data.asMap.data_domain_id$
>>

logTemplate_addEntity(data)::=<<
user $data.userDetails.userId$ added an entity with name $data.asMap.entity_name$ on datastore with id $data.asMap.data_domain_id$ (datastore_name '$first(data.logDetails).datastore_name$')
>>

addEntity_schema(data)::=<<
{
    "\$schema": "http://json-schema.org/draft-04/schema#",
    "title": "Add_Entity",
    "type": "object",
    "properties": {
        "entity_name": {
            "description": "user defined entity name",
            "type": "string",
            "minLength": 3,
            "maxLength": 75,
            "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$"
        },
        "data_domain_id": {
            "description": "The unique identifier for a datalayer component",
            "type": "number"
        },
        "meta_rule": {
            "description": "The metadata rule defined by the user",
            "type": "string"
        },
        "main_metarule": {
            "description": "The metadata rule defined by the user",
            "type": "string"
        },
        "fingerprinting": {
            "description": "Fingerprints details given by the user",
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "table_id": {
                        "description": "The unique identifier for a table",
                        "type": "number"
                    },
                    "table_name": {
                        "description": "Name of the table",
                        "type": "string"
                    },
                    "column_id": {
                        "description": "The unique identifier for a column",
                        "type": "number"
                    },
                    "column_name": {
                        "description": "Name of the column",
                        "type": "string"
                    },
                    "lower_threshold": {
                        "description": "Lower threshold value given by the user",
                        "type": "number"
                    },
                    "upper_threshold": {
                        "description": "Upper threshold value given by the user",
                        "type": "number"
                    },
                    "metarule": {
                        "description": "The metadata rule defined by the user",
                        "type": "string"
                    }
                }
            }
        }
    }
}
>>

addEntity_checks(data)::=<<
select $false:uniqueEntityName(data)$
>>

uniqueEntityName(modify, data)::=<<
not exists(select * from nabu_data_catalog.entity where valid_to_ts = '9999-12-31' and lower(entity_name)=lower('$data.asMap.entity_name$')) "unique"
>>

addEntity_template(data)::=<<
with entity_id as
(
	insert into nabu_data_catalog.entity
	(
		entity_name,entity_type_id,datastore_id,icon_id,
		other_info,valid_from_ts,valid_to_ts,crt_by,crt_ts,mod_by,mod_ts
	)
	values
	(
		'$data.asMap.entity_name$',1,$data.asMap.data_domain_id$,$if(data.asMap.icon_id)$$data.asMap.icon_id$$else$null$endif$,
		E'{"description":"$data.asMap.description$","filter_icon_type":"searchable"}',current_timestamp,'9999-12-31',
		'$data.userDetails.userId$',current_timestamp,'$data.userDetails.userId$',current_timestamp
	)
	returning  entity_id
)
$if(data.asMap.meta_rule)$
,entity_rule_type_mapping_metarule as
(
	insert into nabu_data_catalog.entity_rule_type_mapping (entity_id,entity_rule_type_id)
	values
	(
	(select * from entity_id),1
	)
)
,metarule as
(
	insert into nabu_data_catalog.entity_metadata_rule
	(
		entity_id,entity_rule_type_id,metadata_rule,valid_from_ts,valid_to_ts,crt_by,crt_ts
	)
	values
	(
		(select * from entity_id),1,'$data.asMap.meta_rule$',current_timestamp,'9999-12-31',
		'$data.userDetails.userId$',current_timestamp
	)
)
$endif$
$if(data.asMap.fingerprint)$
,entity_rule_type_mapping_fingerprint as
(
	insert into nabu_data_catalog.entity_rule_type_mapping
	(
		entity_id,entity_rule_type_id
	)
	values
	(
		(select * from entity_id),2
	)
)
,fingerprint as
(
	insert into nabu_data_catalog.entity_fingerprint_rule
	(
		entity_id,entity_rule_type_id,metadata_rule,table_id,column_id,
		lower_threshold,upper_threshold,valid_from_ts,valid_to_ts,crt_by,crt_ts
	)
	values
	$data.asMap.fingerprint.seed_columns:resolveFingerprintsEntity(data);separator=","$
)
$if(data.asMap.fingerprint.fingerprint_metarule)$
,fingerprint_metarule as
(
	insert into nabu_data_catalog.entity_fingerprint_metadatarule
	(
		entity_id,entity_rule_type_id,metadata_rule,valid_from_ts,valid_to_ts,crt_by,crt_ts
	)
	values
	(
		(select * from entity_id),2,'$data.asMap.fingerprint.fingerprint_metarule$',current_timestamp,'9999-12-31',
		'$data.userDetails.userId$',current_timestamp
	)
)
$endif$
$endif$
$if(data.asMap.tags)$
$"entity":resolveTags(data)$
$endif$
select * from entity_id;
>>

resolveFingerprintsEntity(fingerprint,data)::=<<
((select * from entity_id),2,'$fingerprint.metarule$',
'$fingerprint.table_id$','$fingerprint.column_id$','$fingerprint.lower_threshold$','$fingerprint.upper_threshold$',current_timestamp,'9999-12-31',
'$data.userDetails.userId$',current_timestamp)
>>


// This template is used to create a facet.
// @created_by Vidhya (vd0912)
// @Api_Path : "http://localhost:port/fireshots/nabu/upd/sq/restCatalog/addFacet"

addFacet(data)::=<<
{
    "input_data": $data.asString$,
    "sequential_queries": [
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "addFacet_schema",
            "validation_key": "input_data",
            "query_type": "validation"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "addFacet_checks",
            "query_output_key": "checks",
            "query_type":"select",
            "post_process": ["checks"]
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "addFacet_template",
            "query_output_key": "data",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "addFacet_logDetails",
            "query_output_key": "logDetails",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "logTemplate_addFacet",
            "query_type": "log",
            "log_service": "auditLog"
        }
    ],
    "output_keys": [
        "data"
    ]
}
>>

addFacet_logDetails(data)::=<<
select datastore_name from nabu.datastore where datastore_id =$data.asMap.data_domain_id$
>>

logTemplate_addFacet(data)::=<<
user $data.userDetails.userId$ Added a new Facet named '$data.asMap.facet_name$' on datastore with id $data.asMap.data_domain_id$ (datastore_name '$first(data.logDetails).datastore_name$')
>>

addFacet_schema(data)::=<<
{
    "\$schema": "http://json-schema.org/draft-04/schema#",
    "title": "Facet",
    "type": "object",
    "properties": {
        "facet_name": {
            "description": "user defined facet name",
            "type": "string",
            "minLength": 3,
            "maxLength": 75,
            "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$"
        },
        "data_domain_id": {
            "description": "The unique identifier for a datalayer component",
            "type": "number"
        },
        "meta_rule": {
            "description": "The metadata rule defined by the user",
            "type": "string"
        },
        "fingerprinting": {
            "description": "Fingerprints details given by the user",
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "table_id": {
                        "description": "The unique identifier for a table",
                        "type": "number"
                    },
                    "table_name": {
                        "description": "Name of the table",
                        "type": "string"
                    },
                    "column_id": {
                        "description": "The unique identifier for a column",
                        "type": "number"
                    },
                    "column_name": {
                        "description": "Name of the column",
                        "type": "string"
                    },
                    "lower_threshold": {
                        "description": "Lower threshold value given by the user",
                        "type": "number"
                    },
                    "upper_threshold": {
                        "description": "Upper threshold value given by the user",
                        "type": "number"
                    },
                    "metarule": {
                        "description": "The metadata rule defined by the user",
                        "type": "string"
                    }
                }
            }
        }
    }
}
>>

addFacet_checks(data)::=<<
select $false:uniqueFacetName(data)$
>>

uniqueFacetName(modify,data)::=<<
not exists(select * from nabu_data_catalog.facet where valid_to_ts = '9999-12-31' and lower(facet_name)=lower('$data.asMap.facet_name$')) "unique"
>>

addFacet_template(data)::=<<
with facet_id as
(
	insert into nabu_data_catalog.facet
	(
		facet_name,other_info,datastore_id,valid_from_ts,valid_to_ts,crt_by,crt_ts,mod_by,mod_ts
	)
	values
	(
		'$data.asMap.facet_name$','{"description":"$data.asMap.description$"}',$data.asMap.data_domain_id$,
		current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp,'$data.userDetails.userId$',current_timestamp
	)
	returning facet_id
)
$if(data.asMap.meta_rule)$
,facet_rule_type_mapping_metarule as
(
	insert into nabu_data_catalog.facet_rule_type_mapping
	(
		facet_id,facet_rule_type_id
	)
	values
	(
		(select * from facet_id),1
	)
)
,metarule as
(
	insert into nabu_data_catalog.facet_metadata_rule
	(
		facet_id,facet_rule_type_id,metadata_rule,valid_from_ts,valid_to_ts,crt_by,crt_ts
	)
	values
	(
		(select * from facet_id),1,'$data.asMap.meta_rule$',current_timestamp,'9999-12-31',
		'$data.userDetails.userId$',current_timestamp
	)
)
$endif$
$if(data.asMap.fingerprint)$
,facet_rule_type_mapping_fingerprint as
(
	insert into nabu_data_catalog.facet_rule_type_mapping
	(
		facet_id,facet_rule_type_id
	)
	values
	(
		(select * from facet_id),2
	)
)
,fingerprint as
(
	insert into nabu_data_catalog.facet_fingerprint_rule
	(
		facet_id,facet_rule_type_id,metadata_rule,table_id,column_id,
		lower_threshold,upper_threshold,valid_from_ts,valid_to_ts,crt_by,crt_ts
	)
	values
		$data.asMap.fingerprint.seed_columns:resolveFingerprintsFacet(data);separator=","$
)
$if(data.asMap.fingerprint.fingerprint_metarule)$
,fingerprint_metarule as
(
	insert into nabu_data_catalog.facet_fingerprint_metadatarule
	(
		facet_id,facet_rule_type_id,metadata_rule,valid_from_ts,valid_to_ts,crt_by,crt_ts
	)
	values
	(
		(select * from facet_id),2,'$data.asMap.fingerprint.fingerprint_metarule$',current_timestamp,'9999-12-31',
		'$data.userDetails.userId$',current_timestamp
	)
)
$endif$
$endif$
$if(data.asMap.tags)$
$"facet":resolveTags(data)$
$endif$
select * from facet_id;
>>

resolveFingerprintsFacet(fingerprint,data)::=<<
((select * from facet_id),2,'$fingerprint.metarule$',
'$fingerprint.table_id$','$fingerprint.column_id$','$fingerprint.lower_threshold$','$fingerprint.upper_threshold$',current_timestamp,'9999-12-31',
'$data.userDetails.userId$',current_timestamp)
>>


// API to add tag category.
// @created_by Rahul (rr0208)
// @Api_Path : http://localhost:port/fireshots/nabu/upd/sq/restCatalog/addTagCategory

addTagCategory(data)::=<<
{
    "input_data": $data.asString$,
    "sequential_queries": [
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "addTagCategory_schema",
            "validation_key": "input_data",
            "query_type": "validation"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "addTagCategory_checks",
            "query_output_key": "checks",
            "query_type":"select",
            "post_process": ["checks"]
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "selectTagCategoryId_template",
            "query_output_key": "data1",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "addTagCategory_template",
            "query_output_key": "data2",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "addTagCategoryDetail_template",
            "query_output_key": "data3",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "output_template",
            "query_output_key": "tag_category_details",
            "query_type": "select"
        }
    ],
    "output_keys": [
        "tag_category_details"
    ]
}
>>

addTagCategory_schema(data)::=<<
{
  "\$schema": "http://json-schema.org/draft-04/schema#",
    "type": "object",
    "properties": {
        "tag_category_name": {
            "type": "string",
            "pattern": "^([A-Za-z0-9_])([A-Za-z0-9_[ ].:/=@+-]|[ ])*[A-Za-z0-9_]\$",
            "minLength": 3,
            "maxLength": 128
        },
        "tag_category_color": {
            "type": "string"
        }
    },
    "required": [
        "tag_category_name",
        "tag_category_color"
    ]
}
>>

addTagCategory_checks(data)::=<<
select $false:uniqueTagCategoryName(data)$
>>

uniqueTagCategoryName(modify, data)::=<<
not exists(select * from nabu_ui.tag_category where lower(tag_category_name)=lower('$data.asMap.tag_category_name$')) "unique"
>>


selectTagCategoryId_template(data)::=<<
select tag_category_id from nabu_ui.tag_category where tag_category_name='$data.input_data.tag_category_name$'
>>

addTagCategory_template(data)::=<<
$if(first(data.data1).tag_category_id)$
select 'tag already exists' as error
$else$
insert into nabu_ui.tag_category(
	tag_category_name,tag_type_name,crt_by,crt_ts,mod_by,mod_ts
)
select
'$data.input_data.tag_category_name$',concat('$data.input_data.tag_category_name$','_tag'),'$data.userDetails.userId$',now(),
'$data.userDetails.userId$',now() returning tag_category_id
$endif$
>>

addTagCategoryDetail_template(data)::=<<
$if(first(data.data1).tag_category_id)$
select 'tag already exists' as error
$else$
insert into nabu_ui.tag_category_details
(
	tag_category_id,tag_category_color,icon_id,other_info,crt_by,crt_ts,mod_by,mod_ts
)
values
(
	(select tag_category_id from nabu_ui.tag_category where tag_category_name='$data.input_data.tag_category_name$'),'$data.input_data.tag_category_color$',0,'{"default":true,"checked":false}','$data.userDetails.userId$',now(),
	'$data.userDetails.userId$',now()
)
ON CONFLICT (tag_category_id) Do update set tag_category_id=(select tag_category_id
from nabu_ui.tag_category where tag_category_name='$data.input_data.tag_category_name$') returning *;
$endif$
>>

output_template(data)::=<<
$if(first(data.data1).tag_category_id)$
select 'tag already exists' as error
$else$
select t1.tag_category_id from nabu_ui.tag_category t1
inner join nabu_ui.tag_category_details t2 on t1.tag_category_id=t2.tag_category_id
where t1.tag_category_name='$data.input_data.tag_category_name$';
$endif$
>>

// API to add tag to a table.
// @created_by Rahul(rr0208)
// @Api_Path : http://localhost:port/fireshots/nabu/upd/sq/restCatalog/addTableTag

addTableTag(data)::=<<
{
    "input_data": $data.asString$,
    "sequential_queries": [
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "validation",
            "validation_key": "input_data",
            "query_type": "validation"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "checkDatastoreAccess",
            "query_output_key": "access",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "tag_category_template",
            "query_output_key": "selectcategory",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "addTag",
            "query_output_key": "data1",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "addTableTag_template",
            "query_output_key": "data2",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "selectTagId",
            "query_output_key": "tags",
            "query_type": "select"
        }
    ],
    "output_keys": [
        "tags"
    ]
}
>>

validation(data)::=<<
{
  "\$schema": "http://json-schema.org/draft-04/schema#",
    "type": "object",
    "properties": {
        "tag_category_id": {
            "type": "integer"
        },
        "tag_label_name": {
            "type": "string"
        },
        "data_domain_id": {
            "type": "integer"
        },
        "type": {
            "type": "string"
        },
        "table_id": {
            "type": "integer"
        }
    }
}
>>

checkDatastoreAccess(data)::=<<
select distinct role_name from nabu_ui.role_scope_lookup rsl
inner join nabu_ui.roles_info ri on rsl.role_scope_id =ri.role_scope_id
inner join nabu_ui.datastore_role_mapping drm on drm.role_id =ri.role_id
inner join nabu_ui.data_access_type_lookup datl on datl.data_access_type_id =drm.data_access_type_id
inner join nabu_ui.env_group_role_info egri on egri.role_id =drm.role_id
where rsl.role_scope_id in(2) and datl.data_access_type_id =3 and egri.env_group_name ='$data.userDetails.userId$' and drm.datastore_id =$data.input_data.data_domain_id$
union all
select distinct role_name from nabu_ui.role_scope_lookup rsl
inner join nabu_ui.roles_info ri on rsl.role_scope_id =ri.role_scope_id
inner join nabu_ui.datastore_group_role_mapping dgrm on dgrm.role_id =ri.role_id
inner join nabu.datastore_group_mapping dgm on dgrm.datastore_group_id= dgm.datastore_group_id
inner join nabu_ui.data_access_type_lookup datl on datl.data_access_type_id =dgrm.data_access_type_id
inner join nabu_ui.env_group_role_info egri on egri.role_id =dgrm.role_id
where rsl.role_scope_id in(3) and datl.data_access_type_id =3 and egri.env_group_name ='$data.userDetails.userId$' and dgm.datastore_id =$data.input_data.data_domain_id$;
>>

tag_category_template(data)::=<<
select tag_category_name from nabu_ui.tag_category tc where tag_category_id='$data.input_data.tag_category_id$';
>>

addTag(data)::=<<
$if(first(data.selectcategory).tag_category_name)$
$if(first(data.access).role_name)$
INSERT INTO nabu_ui.tag_user_labels
(
	tag_label_name ,tag_category_id ,crt_by,crt_ts,mod_by,mod_ts
)
SELECT  '$data.asMap.tag_label_name$',$data.asMap.tag_category_id$,
'$data.userDetails.userId$',current_timestamp,'$data.userDetails.userId$',current_timestamp
WHERE
NOT EXISTS
(
	SELECT tag_label_id FROM nabu_ui.tag_user_labels WHERE tag_label_name ='$data.asMap.tag_label_name$'
	and tag_category_id=$data.input_data.tag_category_id$
)
returning tag_label_id
$else$
select 'Access denied for data domain.' as error
$endif$
$else$
select 'tag_category_id does not exists' as error
$endif$
>>

addTableTag_template(data)::=<<
$if(first(data.selectcategory).tag_category_name)$
$if(first(data.access).role_name)$
with temp2 as
(
	select tul.tag_label_id from nabu_ui.tag_user_labels tul where tag_label_name='$data.input_data.tag_label_name$'
	and tag_category_id=$data.input_data.tag_category_id$
),
table_tag as
(
	insert into  nabu_ui.tag_table
	(
		datastore_id,table_id,tag_label_id,valid_from_ts,valid_to_ts,crt_by,crt_ts,mod_by,mod_ts
	)
	select $data.input_data.data_domain_id$,$data.input_data.table_id$,
	(select tag_label_id from temp2),
	current_timestamp,'9999-12-31',
	'$data.userDetails.userId$',current_timestamp,'$data.userDetails.userId$',current_timestamp
	where not exists
	(select * from nabu_ui.tag_table tt
	inner join nabu_ui.tag_user_labels tul
	on tt.tag_label_id =tul.tag_label_id
	where tt.tag_label_id =(select * from temp2)
	and tt.datastore_id=$data.input_data.data_domain_id$ and tt.table_id=$data.input_data.table_id$
	and tt.valid_to_ts = '9999-12-31') and exists(
	select tag_category_id from nabu_ui.tag_category_details tcd where tag_category_id=$data.input_data.tag_category_id$)
	returning tag_id
)
select * from table_tag;
$else$
select 'Access denied for data domain.' as error
$endif$
$else$
select 'Tag category id does not exists' as error
$endif$
>>

selectTagId(data)::=<<
$if(first(data.selectcategory).tag_category_name)$
$if(first(data.access).role_name)$
$if(first(data.data2).tag_id)$
select $first(data.data2).tag_id$ as tag_id
$else$
select 'Tag already exists' as error
$endif$
$else$
select 'Access denied for data domain.' as error
$endif$
$else$
select 'Tag category id does not exists' as error
$endif$
>>

// API to add tag to a column.
// @created_by Rahul(rr0208)
// @Api_Path : http://localhost:port/fireshots/nabu/upd/sq/restCatalog/addColumnTag

addColumnTag(data)::=<<
{
    "input_data": $data.asString$,
    "sequential_queries": [
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "validation",
            "validation_key": "input_data",
            "query_type": "validation"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "checkDatastoreAccess",
            "query_output_key": "access",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "tag_category_template",
            "query_output_key": "selectcategory",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "addTag",
            "query_output_key": "data1",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "addColumnTag_template",
            "query_output_key": "data2",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "selectTagId",
            "query_output_key": "tags",
            "query_type": "select"
        }
    ],
    "output_keys": [
        "tags"
    ]
}
>>

validation(data)::=<<
{
  "\$schema": "http://json-schema.org/draft-04/schema#",
    "type": "object",
    "properties": {
        "tag_category_id": {
            "type": "integer",
            "minimum": 1
        },
        "tag_label_name": {
            "type": "string",
            "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$",
            "minLength": 3,
            "maxLength": 50
        },
        "data_domain_id": {
            "type": "integer",
            "minimum": 1
        },
        "column_id": {
            "type": "integer",
            "minimum": 1
        }
    }
}
>>

addColumnTag_template(data)::=<<
$if(first(data.selectcategory).tag_category_name)$
$if(first(data.access).role_name)$
with temp2 as
(
	select tul.tag_label_id from nabu_ui.tag_user_labels tul where tag_label_name='$data.input_data.tag_label_name$'
	and tag_category_id=$data.input_data.tag_category_id$
),
column_tag as
(
	insert into  nabu_ui.tag_column
	(
		datastore_id,column_id,tag_label_id,valid_from_ts,valid_to_ts,crt_by,crt_ts,mod_by,mod_ts
	)
	select $data.input_data.data_domain_id$,$data.input_data.column_id$,
	(select tag_label_id from temp2),
	current_timestamp,'9999-12-31',
	'$data.userDetails.userId$',current_timestamp,'$data.userDetails.userId$',current_timestamp
	where not exists
	(
		select * from nabu_ui.tag_column tt
		inner join nabu_ui.tag_user_labels tul
		on tt.tag_label_id =tul.tag_label_id
		where tt.tag_label_id =(select * from temp2)
		and tt.datastore_id=$data.input_data.data_domain_id$ and tt.column_id=$data.input_data.column_id$
		and tt.valid_to_ts = '9999-12-31'
	) and exists
	(
		select tag_category_id from nabu_ui.tag_category_details tcd where tag_category_id=$data.input_data.tag_category_id$
	)
	returning tag_id
)
select * from column_tag;
$else$
select 'Access denied for data domain.' as error
$endif$
$else$
select 'Tag category id does not exist.' as error
$endif$
>>


// This template used to start the RPC Code in the Spark by publishing a message to kafka
// @created_by Dharani Darapuneni (DD1109)
// @Api_Path : "http://localhost:port/fireshots/nabu/upd/sq/restCatalog/startRPCSession"

startRPCSession(data)::=<<
{
  "input_data": $data.asString$,
  "sequential_queries": [
    {
        "query_template_group": "$data.STPath$/manageCuration.stg",
        "query_template_name": "startSparkSession_schema",
        "validation_key":"input_data",
        "query_type":"validation"
    },
    {
        "query_template_group": "$data.DirPath$/sel/manageCuration.stg",
        "query_template_name": "computeEngineStatus_init",
        "query_output_key": "init",
        "query_type": "select"
    },
    {
        "query_template_group": "$data.DirPath$/sel/manageCuration.stg",
        "query_template_name": "computeEngineStatus_rpc",
        "query_output_key": "rpc",
        "query_type": "select"
    },
    {
        "query_template_group": "$data.DirPath$/sel/manageCuration.stg",
        "query_template_name": "computeEngineStatus_status",
        "query_output_key": "computeEngineStatus",
        "query_type": "select"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "computeEngine_checks",
      "query_output_key": "checks",
      "query_type": "select",
      "post_process": ["checks"]
    },
    {
        "query_template_group": "$data.STPath$/manageCuration.stg",
        "query_template_name": "emptyTemplate",
        "query_output_key": "message_uuid",
        "query_type": "uuid"
    },
    {
        "query_template_group": "$data.STPath$/manageCuration.stg",
        "query_template_name": "emptyTemplate",
        "query_output_key": "batch_id",
        "query_type": "uniqueId"
    },
    {
        "query_template_group": "$data.STPath$/manageCuration.stg",
        "query_template_name": "insertJobScheduleDetails",
        "query_output_key": "jobScheduleDetails",
        "query_type": "select"
    },
    {
        "query_template_group": "$data.STPath$/manageCuration.stg",
        "query_template_name": "getWorkspacePipelineDetails",
        "query_output_key": "workspacePipelineDetails",
        "query_type": "select"
    },
    {
        "query_template_group": "$data.STPath$/manageCuration.stg",
        "query_template_name": "setIds",
        "query_output_key": "getId",
        "query_type": "select"
    },
    {
        "query_template_group": "$data.STPath$/manageCuration.stg",
        "query_template_name": "bot_topic_FlowControllerBot",
        "query_output_key": "FlowControllerBotDetails",
        "query_type": "select"
    },
    {
      "query_template_group": "$data.STPath$/manageCuration.stg",
      "query_template_name": "preInsert_initFlowStatus",
      "query_output_key": "init_status",
      "query_type":"update"
    },
$if(useRabbitMQ.(true))$
    {
      "query_template_group": "$data.STPath$/manageCuration.stg",
      "query_template_name": "information_msg",
      "query_output_key": "message_map",
      "query_type": "json"
    },
    {
      "query_template_group": "$data.STPath$/manageCuration.stg",
      "query_template_name": "getRabbitMqDetails",
      "query_output_key": "rabbitMqDetails",
      "query_type":"jsonArray"
    },
    {
      "query_template_group": "$data.STPath$/manageCuration.stg",
      "query_template_name": "emptyTemplate",
      "query_output_key": "status",
      "service_name": "rabbitmqService",
      "query_type": "publish"
    },
$else$
    {
        "query_template_group": "$data.STPath$/manageCuration.stg",
        "query_template_name": "getKafkaConfigs",
        "query_output_key": "kafka_configs",
        "query_type": "select",
        "result_set_to_json": "Y"
    },
    {
        "query_template_group": "$data.STPath$/manageCuration.stg",
        "query_template_name": "getKafkaDetails",
        "query_output_key": "kafkaDetails",
        "query_type": "select"
    },
    {
        "query_template_group": "$data.STPath$/manageCuration.stg",
        "query_template_name": "information_msg",
       "processLogic":{
              "processClass":"com.modak.fireshots.processors.impl.KafkaProducerProcessor",
              "process_key":"status"
        },
        "query_output_key": "status",
        "query_type": "json"
    },
$endif$
    {
      "query_template_group": "$data.STPath$/manageCuration.stg",
      "query_template_name": "postInsert_initFlowStatus",
      "query_output_key": "end_status",
      "query_type":"update"
    }
  ],
  "output_keys":["status"]
}
>>

computeEngine_checks(data)::=<<
select $isInactive.(first(data.computeEngineStatus).status)$ as "compute_engine_inactive"
>>
isInactive::=["Inactive" : true, "Error" : true, default : false]


// This template is used to add the tags to Compute Engines.
// @created_by Dharani Darapuneni (dd1109)
// @Api_Path : "http://localhost:port/fireshots/nabu/upd/sq/restCatalog/addComputeEngineTag"


addComputeEngineTag(data)::=<<
{
  "input_data": $data.asString$,
  "sequential_queries": [
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "addComputeEngineTag_schema",
          "validation_key": "input_data",
          "query_type":"validation"
  },
      {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "addArchive_addComputeEngineTag",
            "query_output_key":"data",
            "query_type":"update"
    },
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "addComputeEngineTag_template",
          "query_output_key":"data",
          "query_type":"select"
  },
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "logTemplate_add_computeEngineTag",
          "query_type":"log",
          "log_service":"auditLog"
  }
  ],
  "output_keys":["data"]
}
>>

addComputeEngineTag_schema(data)::=<<
{
  "\$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Add Compute Engine Tag",
  "type": "object",
  "properties": {
    "tag_category_id": {
	  "description": "The id of the tag category",
      "type": "integer"
    },
    "tag_label_id": {
	  "description": "The label id of the tag category",
      "type": "integer"
    },
    "compute_engine_id": {
	  "description": "The id of the Compute Engine",
      "type": "integer"
    }
  },
  "required": [
    "tag_category_id",
    "tag_label_id",
    "compute_engine_id"
  ]
}
>>


addArchive_addComputeEngineTag(data)::=<<
with
tags as (
select  $data.input_data.compute_engine_id$ as compute_engine_id,case when count(tags)=0 then '{}' else json_agg(tags) end as tag from (
    select row_to_json(tags) as tag from
        (select td.tag_id,td.tag_label_id
        ,ul.tag_label_name,c.tag_category_name,cd.tag_category_color
         from  nabu_ui.tag_compute_engine  td
         inner join nabu_ui.tag_user_labels as ul on td.tag_label_id=ul.tag_label_id
         inner join nabu_ui.tag_category as c on ul.tag_category_id=c.tag_category_id
         inner join nabu_ui.tag_category_details as cd on ul.tag_category_id=cd.tag_category_id
         where td.compute_engine_id =$data.input_data.compute_engine_id$
         and valid_to_ts='9999-12-31') as tags
    ) as tags
)
insert into nabu.compute_engine_archive values
($data.input_data.compute_engine_id$,
(select row_to_json(ce)::jsonb || row_to_json(c)::jsonb || tag ::jsonb from nabu.compute_engine ce
inner join nabu.config c on ce.compute_engine_config_id=c.config_id
 inner join tags t on t.compute_engine_id=ce.compute_engine_id
where ce.compute_engine_id=$data.input_data.compute_engine_id$),
null,'$data.userDetails.userId$',now());
>>



addComputeEngineTag_template(data)::=<<
with compute_engine_tag as(
insert into nabu_ui.tag_compute_engine(compute_engine_id,tag_label_id,valid_from_ts,valid_to_ts,
crt_by,crt_ts,mod_by,mod_ts)
select $data.input_data.compute_engine_id$,$data.input_data.tag_label_id$,current_timestamp,'9999-12-31',
'$data.userDetails.userId$',current_timestamp,'$data.userDetails.userId$',current_timestamp
where not exists
(select * from nabu_ui.tag_compute_engine where tag_label_id = $data.input_data.tag_label_id$
and compute_engine_id = $data.input_data.compute_engine_id$
and valid_to_ts = '9999-12-31')
returning tag_id
),
tag_category as(
insert into nabu_ui.tag_category_details(tag_category_id,icon_id,other_info,crt_by,crt_ts,mod_by,mod_ts) values
($data.input_data.tag_category_id$,0,'{"default":true,"checked":false}','$data.userDetails.userId$',now(),
'$data.userDetails.userId$',now())
on conflict (tag_category_id)
do update
set mod_by='$data.userDetails.userId$',mod_ts=now() where excluded.tag_category_id =$data.input_data.tag_category_id$
)
select * from compute_engine_tag
>>


logTemplate_add_computeEngineTag(data)::=<<
{ "audit_event_type_id" : 69, "user_id" : "$data.userDetails.userId$", "compute_engine_tag" : $data.input_data.compute_engine_tag$ , "log_time " : "$data.log_time$"}
>>



// This template is used to modify the tags of Compute Engines.
// @created_by Dharani Darapuneni (DD1109)
// @Api_Path : "http://localhost:port/fireshots/nabu/upd/sq/restCatalog/modifyComputeEngineTag"

modifyComputeEngineTag(data)::=<<
{
  "input_data": $data.asString$,
  "sequential_queries": [
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "modifyComputeEngineTag_schema",
          "validation_key": "input_data",
          "query_type":"validation"
  },
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "modifyComputeEngineTag_condition",
          "query_output_key":"condition",
          "query_type":"select"
  },
      {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "addArchive_modifyComputeEngineTag",
            "query_output_key":"data",
            "query_type":"select"
    },
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "modifyComputeEngineTag_template",
          "query_output_key":"data",
          "query_type":"select"
  },
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "logTemplate_modify_computeEngineTag",
          "query_type":"log",
          "log_service":"auditLog"
  }
  ],
  "output_keys":["data"]
}
>>

modifyComputeEngineTag_schema(data)::=<<
{
  "\$schema": "http://json-schema.org/draft-04/schema#",
  "description": "Modify Compute Engine Tag",
  "type": "object",
  "properties": {
    "tag_category_id": {
	  "description": "The id of the tag category",
      "type": "integer"
    },
    "tag_label_id": {
	  "description": "The label id of the tag category",
      "type": "integer"
    },
    "compute_engine_id": {
	  "description": "The id of the Compute Engine",
      "type": "integer"
    },
    "tag_id": {
	  "description": "The id of the tag to be modified",
      "type": "integer"
    }
  },
  "required": [
    "tag_category_id",
    "tag_label_id",
    "compute_engine_id",
    "tag_id"
  ]
}
>>

modifyComputeEngineTag_condition(data)::=<<
select * from nabu_ui.tag_compute_engine as a
,nabu_ui.tag_category_details as b
where a.compute_engine_id = $data.input_data.compute_engine_id$
and a.tag_label_id = $data.input_data.tag_label_id$
and a.valid_to_ts = '9999-12-31'
>>


addArchive_modifyComputeEngineTag(data)::=<<
$if(data.condition)$
select 'tag already exists' as error_msg
$else$
with
tags as (
select  $data.input_data.compute_engine_id$ as compute_engine_id,case when count(tags)=0 then '{}' else json_agg(tags) end as tag from (
    select row_to_json(tags) as tag from
        (select td.tag_id,td.tag_label_id
        ,ul.tag_label_name,c.tag_category_name,cd.tag_category_color
         from  nabu_ui.tag_compute_engine  td
         inner join nabu_ui.tag_user_labels as ul on td.tag_label_id=ul.tag_label_id
         inner join nabu_ui.tag_category as c on ul.tag_category_id=c.tag_category_id
         inner join nabu_ui.tag_category_details as cd on ul.tag_category_id=cd.tag_category_id
         where td.compute_engine_id =$data.input_data.compute_engine_id$
         and valid_to_ts='9999-12-31') as tags
    ) as tags
),
compute_engine_details as (
insert into nabu.compute_engine_archive values
($data.input_data.compute_engine_id$,
(select row_to_json(ce)::jsonb || row_to_json(c)::jsonb || tag ::jsonb from nabu.compute_engine ce
inner join nabu.config c on ce.compute_engine_config_id=c.config_id
 inner join tags t on t.compute_engine_id=ce.compute_engine_id
where ce.compute_engine_id=$data.input_data.compute_engine_id$),
null,'$data.userDetails.userId$',now()) returning *
)
select * from compute_engine_details
$endif$
>>


modifyComputeEngineTag_template(data)::=<<
$if(data.condition)$
select 'tag already exists' as error_msg
$else$
with update_tag_compute_engine as(
update nabu_ui.tag_compute_engine
set valid_to_ts = now(),
mod_by = '$data.userDetails.userId$',
mod_ts = now()
where compute_engine_id = $data.asMap.compute_engine_id$
and tag_id = $data.asMap.tag_id$
and valid_to_ts='9999-12-31'
),
tag_category as(
insert into nabu_ui.tag_category_details(tag_category_id,icon_id,other_info,crt_by,crt_ts,mod_by,mod_ts) values
($data.input_data.tag_category_id$,0,'{"default":true,"checked":false}','$data.userDetails.userId$',now(),
'$data.userDetails.userId$',now())
on conflict (tag_category_id)
do
update
set mod_by='$data.userDetails.userId$',mod_ts=now() where excluded.tag_category_id =$data.input_data.tag_category_id$
),
compute_engine_tag as(
insert into nabu_ui.tag_compute_engine(compute_engine_id,tag_label_id,valid_from_ts,valid_to_ts,crt_by,
crt_ts,mod_by,mod_ts)
values($data.input_data.compute_engine_id$,$data.input_data.tag_label_id$,current_timestamp,'9999-12-31',
'$data.userDetails.userId$',current_timestamp,'$data.userDetails.userId$',current_timestamp)
returning tag_id
)
select * from compute_engine_tag;
$endif$
>>

logTemplate_modify_computeEngineTag(data)::=<<
{ "audit_event_type_id" : 70, "user_id" : "$data.userDetails.userId$", "compute_engine_id" : $data.input_data.compute_engine_id$ , "log_time " : "$data.log_time$"}
>>



// This template is used to create datastore tag
// @created_by Vidhya(vd0912)
// @Api_Path : "http://localhost:port/fireshots/nabu/upd/sq/restCatalog/addDataDomainTag


addDataDomainTag(data)::=<<
{
    "input_data": $data.asString$,
    "sequential_queries": [
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "addDatastoreTag_schema",
            "validation_key": "input_data",
            "query_type": "validation"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "addDatastoreTag_template",
            "query_output_key": "data",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "getDatastoreName",
            "query_output_key": "datastore_name",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "logTemplate_add_datastoreTag",
            "query_type": "log",
            "log_service": "auditLog"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "getDatastoreTagsList",
            "query_output_key": "tagNames",
            "service_name": "nabu",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "insertDatastoreTagsinDocument",
            "query_output_key": "updatedDoc",
            "query_type": "update",
            "service_name": "solr"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "getTagInputDoc",
            "query_output_key": "insert_tag_docs",
            "query_type": "select",
            "service_name": "nabu",
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "createTagDocument",
            "query_output_key": "tagList",
            "service_name": "solr",
            "query_type": "update"
        }
    ],
    "output_keys": [
        "data"
    ]
}
>>

getDatastoreTagsList(data)::=<<
select tag_category_name,tag_type_name,json_agg(tag_label_name) as tagValues from nabu_ui.tag_datastore tt
inner join nabu_ui.tag_user_labels tul on tul.tag_label_id = tt.tag_label_id
inner join nabu_ui.tag_category tc on tul.tag_category_id = tc.tag_category_id
where datastore_id in ($data.input_data.data_domain_id$) and valid_to_ts = '9999-12-31'
group by tag_category_name,tag_type_name
union all
select 'Placeholder' as tag_category_name, 'placeholder_tag' as tag_type_name, '["Datastore"]' as tagvalues
>>

addDatastoreTag_schema(data)::=<<
{
    "\$schema": "http://json-schema.org/draft-04/schema#",
    "title": "Add Datastore Tag",
    "type": "object",
    "required": [
        "tag_category_name",
        "tag_value",
        "tag_category_id",
        "tag_label_id",
        "tag_category_color",
        "data_domain_id"
    ],
    "properties": {
        "tag_category_name": {
            "description": "The name of the tag category",
            "type": "string",
            "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$",
            "minLength": 3,
            "maxLength": 30
        },
        "tag_value": {
            "description": "The name of the tag value",
            "type": "string",
            "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$",
            "minLength": 3,
            "maxLength": 30
        },
        "tag_label_id": {
            "description": "unique identifier of a tag",
            "type": "integer",
            "minimum": 1
        },
        "tag_category_id": {
            "type": "integer",
            "minimum": 1
        },
        "tag_category_color": {
            "type": "string",
            "pattern": "^#(?:[0-9a-fA-F]{3}){1,2}\$"
        },
        "data_domain_id": {
            "type": "integer",
            "minimum": 1
        }
    }
}
>>

getDatastoreName(data)::=<<
select datastore_name
from nabu.datastore
where datastore_id = $data.asMap.data_domain_id$
and valid_to_ts = '9999-12-31'
>>

addDatastoreTag_template(data)::=<<
with datastore_tag as
(
	insert into nabu_ui.tag_datastore
	(
		datastore_id,tag_label_id,valid_from_ts,valid_to_ts,crt_by,crt_ts,mod_by,mod_ts
	)
	select $data.input_data.data_domain_id$,$data.input_data.tag_label_id$,current_timestamp,'9999-12-31',
	'$data.userDetails.userId$',current_timestamp,'$data.userDetails.userId$',current_timestamp
	where not exists
	(
		select * from nabu_ui.tag_datastore
		where tag_label_id = $data.input_data.tag_label_id$
		and datastore_id = $data.input_data.data_domain_id$
		and valid_to_ts = '9999-12-31'
	)
	returning tag_id
),
tag_category_color as
(
	insert into nabu_ui.tag_category_details
	(
		tag_category_id,tag_category_color,icon_id,other_info,crt_by,crt_ts,mod_by,mod_ts
	)
	values
	(
		$data.input_data.tag_category_id$,'$data.input_data.tag_category_color$',
		0,'{"default":true,"checked":false}','$data.userDetails.userId$',now(),'$data.userDetails.userId$',now()
	)
	on conflict (tag_category_id)
	do update
	set tag_category_color ='$data.input_data.tag_category_color$',mod_by='$data.userDetails.userId$',mod_ts=now() where excluded.tag_category_id =$data.input_data.tag_category_id$
)
select * from datastore_tag
>>

logTemplate_add_datastoreTag(data)::=<<
{ "audit_event_type_id" : 39, "user_id" : "$data.userDetails.userId$", "datastore_id" : $data.input_data.data_domain_id$ , "log_time " : "$data.log_time$"}
>>

insertDatastoreTagsinDocument(data)::=<<
{
    "STPath": "$data.STPath$/globalsearch.stg",
    "metadata_flag": false,
    "queryConfig": {
        "query": "datastore_id:$data.input_data.data_domain_id$ AND placeholder_tag_raw:datastore AND document_type_raw:datastore",
        "collection": "nabu_search",
        "type": "insert",
        "facet_query": "",
        "fields": "",
        "filter": ""
    },
    "dataFilter": "update_tags"
}
>>

getTagInputDoc(data)::=<<
with cte as
(
	select tag_label_id ,'['||string_agg(distinct role_id::text,',')||']' as roles from
	(
		select tag_label_id,b.datastore_id from nabu_ui.tag_entity a
		inner join nabu_data_catalog.entity b on a.entity_id = b.entity_id and  b.valid_to_ts ='9999-12-31'
		union all
		select tag_label_id,b.datastore_id from nabu_ui.tag_facet a
		inner join nabu_data_catalog.facet b on a.facet_id = b.facet_id and  b.valid_to_ts ='9999-12-31'
		union all
		select tag_label_id,datastore_id from nabu_ui.tag_datastore where valid_to_ts ='9999-12-31'
		union all
		select tag_label_id,a.datastore_id from nabu_ui.tag_table a
		inner join nabu.datastore_table_mapping b on a.table_id = b.table_id and a.datastore_id = b.datastore_id and b.valid_to_ts ='9999-12-31'
		union all
		select tag_label_id,a.datastore_id from nabu_ui.tag_collection a
		inner join nabu.datastore_table_mapping b on a.collection_id = b.table_id and a.datastore_id = b.datastore_id and b.valid_to_ts ='9999-12-31'
		union all
		select tag_label_id,a.datastore_id from nabu_ui.tag_column a
		inner join nabu.column_profile b on a.column_id = b.column_id and a.datastore_id = b.datastore_id and b.valid_to_ts ='9999-12-31'
		union all
		select tag_label_id,a.datastore_id from nabu_ui.tag_field a
		inner join nabu.column_profile b on a.field_id = b.column_id and a.datastore_id = b.datastore_id and b.valid_to_ts ='9999-12-31'
	)a
	inner join nabu.datastore c on a.datastore_id = c.datastore_id and c.valid_to_ts ='9999-12-31'
	inner join nabu_ui.datastore_role_mapping d on d.datastore_id=c.datastore_id
	group by tag_label_id
)
select b.tag_label_name as searchelement,tag_category_name as placeholder_tag,'tag' as document_type,a.tag_category_id ,b.tag_label_id,false as entityvalue,case when roles is null then '[]'::json else roles::json end as roles
from nabu_ui.tag_category a
inner join nabu_ui.tag_user_labels b on a.tag_category_id = b.tag_category_id
left outer join cte c on c.tag_label_id=b.tag_label_id
where b.tag_label_id = $data.input_data.tag_label_id$
>>

createTagDocument(data)::=<<
{
    "STPath": "$data.STPath$/globalsearch.stg",
    "metadata_flag": false,
    "queryConfig": {
        "query": "tag_label_id:$data.input_data.tag_label_id$ AND document_type_raw:tag",
        "collection": "nabu_search",
        "type": "insert",
        "facet_query": "",
        "fields": "",
        "filter": ""
    },
    "dataFilter": "update_tag_documents"
}
>>

// This template is used to create facet tag.
// @created_by Rahul(rr0208)
// @Api_Path : "http://localhost:port/fireshots/nabu/upd/sq/restCatalog/addFacetTag"

addFacetTag(data)::=<<
{
    "input_data": $data.asString$,
    "sequential_queries": [
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "addFacetTag_schema",
            "validation_key": "input_data",
            "query_type": "validation"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "addFacetTag_template",
            "query_output_key": "data",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "getFacetName",
            "query_output_key": "facet_name",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "logTemplate_add_facetTag",
            "query_type": "log",
            "log_service": "auditLog"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "getFacetTagsList",
            "query_output_key": "tagNames",
            "service_name": "nabu",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "insertFacetTagsinDocument",
            "query_output_key": "updatedDoc",
            "query_type": "update",
            "service_name": "solr"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "getTagInputDoc",
            "query_output_key": "insert_tag_docs",
            "query_type": "select",
            "service_name": "nabu"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "createTagDocument",
            "query_output_key": "tagList",
            "service_name": "solr",
            "query_type": "update"
        }
    ],
    "output_keys": [
        "data"
    ]
}
>>

addFacetTag_schema(data)::=<<
{
    "\$schema": "http://json-schema.org/draft-04/schema#",
    "title": "Add Facet Tag",
    "type": "object",
    "required": [
        "tag_category_name",
        "tag_value",
        "tag_category_id",
        "tag_label_id",
        "tag_category_color",
        "facet_id",
        "data_domain_id"
    ],
    "properties": {
        "tag_category_name": {
            "description": "The name of the tag category",
            "type": "string",
            "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$",
            "minLength": 3,
            "maxLength": 30
        },
        "tag_value": {
            "description": "The name of the tag value",
            "type": "string",
            "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$",
            "minLength": 3,
            "maxLength": 30
        },
        "tag_label_id": {
            "description": "unique identifier of a tag",
            "type": "integer",
            "minimum": 1
        },
        "facet_id": {
            "description": "unique identifier of a facet",
            "type": "integer",
            "minimum": 1
        },
        "tag_category_id": {
            "type": "integer",
            "minimum": 1
        },
        "tag_category_color": {
            "type": "string",
            "pattern": "^#(?:[0-9a-fA-F]{3}){1,2}\$"
        },
        "data_domain_id": {
            "type": "integer",
            "minimum": 1
        }
    }
}
>>

getFacetTagsList(data)::=<<
select tag_category_name,tag_type_name,json_agg(tag_label_name) as tagValues from nabu_ui.tag_facet tt
inner join nabu_data_catalog.facet e on tt.facet_id = e.facet_id
inner join nabu_ui.tag_user_labels tul on tul.tag_label_id = tt.tag_label_id
inner join nabu_ui.tag_category tc on tul.tag_category_id = tc.tag_category_id
where tt.facet_id in ($data.input_data.facet_id$) and e.datastore_id in ($data.input_data.data_domain_id$) and tt.valid_to_ts = '9999-12-31' and e.valid_to_ts = '9999-12-31'
group by tag_category_name,tag_type_name
union all
select 'Placeholder' as tag_category_name, 'placeholder_tag' as tag_type_name, '["Facet"]' as tagvalues
>>

addFacetTag_template(data)::=<<
with facet_tag as
(
	insert into nabu_ui.tag_facet
	(
		facet_id,tag_label_id,valid_from_ts,valid_to_ts,crt_by,crt_ts,mod_by,mod_ts
	)
	select $data.input_data.facet_id$,$data.input_data.tag_label_id$,current_timestamp,'9999-12-31',
	'$data.userDetails.userId$',current_timestamp,'$data.userDetails.userId$',current_timestamp
	where not exists
	(
		select * from nabu_ui.tag_facet where tag_label_id = $data.input_data.tag_label_id$
		and facet_id = $data.input_data.facet_id$
		and valid_to_ts = '9999-12-31'
	)
	returning tag_id
),
tag_category_color as
(
	insert into nabu_ui.tag_category_details
	(
		tag_category_id,tag_category_color,icon_id,other_info,crt_by,crt_ts,mod_by,mod_ts
	)
	values
	(
		$data.input_data.tag_category_id$,'$data.input_data.tag_category_color$',0,
		'{"default":true,"checked":false}','$data.userDetails.userId$',now(),'$data.userDetails.userId$',now()
	)
	on conflict (tag_category_id)
	do update
	set tag_category_color ='$data.input_data.tag_category_color$',mod_by='$data.userDetails.userId$',mod_ts=now() where excluded.tag_category_id =$data.input_data.tag_category_id$
)
select * from facet_tag
>>

getFacetName(data)::=<<
select facet_name
from nabu_data_catalog.facet
where facet_id = $data.input_data.facet_id$
>>

logTemplate_add_facetTag(data)::=<<
{
    "audit_event_type_id": 42,
    "user_id": "$data.userDetails.userId$",
    "datastore_id": $data.input_data.data_domain_id$ ,
    "facet_id": $data.input_data.facet_id$ ,
    "log_time ": "$data.log_time$"
}
>>

insertFacetTagsinDocument(data)::=<<
{
    "STPath": "$data.STPath$/globalsearch.stg",
    "metadata_flag": false,
    "queryConfig": {
        "query": "facet_id:$data.input_data.facet_id$ AND datastore_id:$data.input_data.data_domain_id$ AND placeholder_tag_raw:facet AND document_type_raw:facet",
        "collection": "nabu_search",
        "type": "insert",
        "facet_query": "",
        "fields": "",
        "filter": ""
    },
    "dataFilter": "update_tags"
}
>>

// This template is used to create entity tag
// @created_by Vidhya(vd0912)
// @Api_Path : "http://localhost:port/fireshots/nabu/upd/sq/restCatalog/addEntityTag"

addEntityTag(data)::=<<
{
    "input_data": $data.asString$,
    "sequential_queries": [
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "addEntityTag_schema",
            "validation_key": "input_data",
            "query_type": "validation"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "addEntityTag_template",
            "query_output_key": "data",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "getEntityName",
            "query_output_key": "entity_name",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "logTemplate_add_entityTag",
            "query_type": "log",
            "log_service": "auditLog"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "getEntityTagsList",
            "query_output_key": "tagNames",
            "service_name": "nabu",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "insertEntityTagsinDocument",
            "query_output_key": "updatedDoc",
            "query_type": "update",
            "service_name": "solr"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "getTagInputDoc",
            "query_output_key": "insert_tag_docs",
            "query_type": "select",
            "service_name": "nabu"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "createTagDocument",
            "query_output_key": "tagList",
            "service_name": "solr",
            "query_type": "update"
        }
    ],
    "output_keys": [
        "data"
    ]
}
>>

getEntityTagsList(data)::=<<
select tag_category_name,tag_type_name,json_agg(tag_label_name) as tagValues from nabu_ui.tag_entity tt
inner join nabu_data_catalog.entity e on tt.entity_id = e.entity_id
inner join nabu_ui.tag_user_labels tul on tul.tag_label_id = tt.tag_label_id
inner join nabu_ui.tag_category tc on tul.tag_category_id = tc.tag_category_id
where tt.entity_id in ($data.input_data.entity_id$) and e.datastore_id in ($data.input_data.data_domain_id$) and tt.valid_to_ts = '9999-12-31' and e.valid_to_ts = '9999-12-31'
group by tag_category_name,tag_type_name
union all
select 'Placeholder' as tag_category_name, 'placeholder_tag' as tag_type_name, '["Entity"]' as tagvalues
>>

addEntityTag_schema(data)::=<<
{
    "\$schema": "http://json-schema.org/draft-04/schema#",
    "title": "Add Entity Tag",
    "type": "object",
    "required": [
        "tag_category_name",
        "tag_value",
        "tag_category_id",
        "tag_label_id",
        "tag_category_color",
        "entity_id",
        "data_domain_id"
    ],
    "properties": {
        "tag_category_name": {
            "description": "The name of the tag category",
            "type": "string",
            "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$",
            "minLength": 3,
            "maxLength": 30
        },
        "tag_value": {
            "description": "The name of the tag value",
            "type": "string",
            "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$",
            "minLength": 3,
            "maxLength": 30
        },
        "tag_label_id": {
            "description": "unique identifier of a tag",
            "type": "integer",
            "minimum": 1
        },
        "entity_id": {
            "description": "unique identifier of a entity",
            "type": "integer",
            "minimum": 1
        },
        "tag_category_id": {
            "type": "integer",
            "minimum": 1
        },
        "tag_category_color": {
            "type": "string",
            "pattern": "^#(?:[0-9a-fA-F]{3}){1,2}\$"
        },
        "data_domain_id": {
            "type": "integer",
            "minimum": 1
        }
    }
}
>>

addEntityTag_template(data)::=<<
with entity_tag as
(
	insert into nabu_ui.tag_entity
	(
		entity_id,tag_label_id,valid_from_ts,valid_to_ts,crt_by,crt_ts,mod_by,mod_ts
	)
	select $data.input_data.entity_id$,$data.input_data.tag_label_id$,current_timestamp,'9999-12-31',
	'$data.userDetails.userId$',current_timestamp,'$data.userDetails.userId$',current_timestamp
	where not exists
	(
		select * from nabu_ui.tag_entity
		where tag_label_id = $data.input_data.tag_label_id$
		and entity_id = $data.input_data.entity_id$
		and valid_to_ts = '9999-12-31'
	)
	returning tag_id
),
tag_category_color as
(
	insert into nabu_ui.tag_category_details
	(
		tag_category_id,tag_category_color,icon_id,other_info,crt_by,crt_ts,mod_by,mod_ts
	)
	values
	(
		$data.input_data.tag_category_id$,'$data.input_data.tag_category_color$',0,
		'{"default":true,"checked":false}','$data.userDetails.userId$',now(),'$data.userDetails.userId$',now()
	)
	on conflict (tag_category_id)
	do update
	set tag_category_color ='$data.input_data.tag_category_color$',mod_by='$data.userDetails.userId$',mod_ts=now() where excluded.tag_category_id =$data.input_data.tag_category_id$
)
select * from entity_tag
>>

logTemplate_add_entityTag(data)::=<<
{
    "audit_event_type_id": 45,
    "user_id": "$data.userDetails.userId$",
    "datastore_id": $data.input_data.data_domain_id$ ,
    "entity_id": $data.input_data.entity_id$ ,
    "log_time ": "$data.log_time$"
}
>>

getEntityName(data)::=<<
select entity_name
from nabu_data_catalog.entity
where entity_id = $data.input_data.entity_id$
and valid_to_ts = '9999-12-31'
>>

insertEntityTagsinDocument(data)::=<<
{
    "STPath": "$data.STPath$/globalsearch.stg",
    "metadata_flag": false,
    "queryConfig": {
        "query": "entity_id:$data.input_data.entity_id$ AND datastore_id:$data.input_data.data_domain_id$ AND placeholder_tag_raw:entity AND document_type_raw:entity",
        "collection": "nabu_search",
        "type": "insert",
        "facet_query": "",
        "fields": "",
        "filter": ""
    },
    "dataFilter": "update_tags"
}
>>


// This template is used to create tag for a collection based on the collection id and datastore id.
// @created_by Rahul(rr0208)
// @Api_Path : "http://localhost:port/fireshots/nabu/upd/sq/restCatalog/addCollectionTag"

addCollectionTag(data)::=<<
{
    "input_data": $data.asString$,
    "sequential_queries": [
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "addCollectionTag_schema",
            "validation_key": "input_data",
            "query_type": "validation"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "addCollectionTag_template",
            "query_output_key": "data",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "logTemplate_add_collectionTag",
            "query_type": "log",
            "log_service": "auditLog"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "getCollectionTagsList",
            "query_output_key": "tagNames",
            "service_name": "nabu",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "insertCollectionTagsinDocument",
            "query_output_key": "updatedDoc",
            "query_type": "update",
            "service_name": "solr",
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "getTagInputDoc",
            "query_output_key": "insert_tag_docs",
            "query_type": "select",
            "service_name": "nabu"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "createTagDocument",
            "query_output_key": "tagList",
            "service_name": "solr",
            "query_type": "update"
        }
    ],
    "output_keys": [
        "data"
    ]
}
>>

addCollectionTag_schema(data)::=<<
{
    "\$schema": "http://json-schema.org/draft-04/schema#",
    "title": "Add Collection Tag",
    "type": "object",
    "required": [
        "tag_category_id",
        "tag_label_id",
        "tag_category_color",
        "table_id",
        "data_domain_id"
    ],
    "properties": {
        "tag_label_id": {
            "description": "The Unique Identifier of a tag",
            "type": "integer",
            "minimum": 1
        },
        "table_id": {
            "description": "The Unique Identifier of a collection",
            "type": "integer",
            "minimum": 1
        },
        "tag_category_id": {
            "description": "The Unique Identifier of a tag category",
            "type": "integer",
            "minimum": 1
        },
        "tag_category_color": {
            "description": "The color selected for the tag category",
            "type": "string",
            "pattern": "^#(?:[0-9a-fA-F]{3}){1,2}\$"
        },
        "data_domain_id": {
            "description": "The Unique Identifier of a data domain",
            "type": "integer",
            "minimum": 1
        }
    }
}
>>

addCollectionTag_template(data)::=<<
with collection_tag as
(
	insert into nabu_ui.tag_collection
	(
		collection_id,tag_label_id,valid_from_ts,valid_to_ts,crt_by,crt_ts,mod_by,mod_ts,datastore_id
	)
	select $data.input_data.table_id$,$data.input_data.tag_label_id$,current_timestamp,'9999-12-31',
	'$data.userDetails.userId$',current_timestamp,'$data.userDetails.userId$',current_timestamp,$data.input_data.data_domain_id$
	where not exists
	(
		select * from nabu_ui.tag_collection where tag_label_id = $data.input_data.tag_label_id$
		and collection_id = $data.input_data.table_id$ and datastore_id = $data.input_data.data_domain_id$
		and valid_to_ts = '9999-12-31'
	)
	returning tag_id
),
tag_category_color as
(
	insert into nabu_ui.tag_category_details
	(
		tag_category_id,tag_category_color,icon_id,other_info,crt_by,crt_ts,mod_by,mod_ts
	)
	values
	(
		$data.input_data.tag_category_id$,'$data.input_data.tag_category_color$',0,
		'{"default":true,"checked":false}','$data.userDetails.userId$',now(),'$data.userDetails.userId$',now()
	)
	on conflict (tag_category_id)
	do update
	set tag_category_color ='$data.input_data.tag_category_color$',mod_by='$data.userDetails.userId$',mod_ts=now() where excluded.tag_category_id =$data.input_data.tag_category_id$
)
select tag_id from collection_tag
>>

logTemplate_add_collectionTag(data)::=<<
{
    "audit_event_type_id": 56,
    "user_id": "$data.userDetails.userId$",
    "datastore_id": $data.input_data.data_domain_id$ ,
    "collection_id": $data.input_data.table_id$ ,
    "log_time ": "$data.log_time$"
}>>

getCollectionTagsList(data)::=<<
select tag_category_name,tag_type_name,json_agg(tag_label_name) as tagValues from nabu_ui.tag_collection tt
inner join nabu_ui.tag_user_labels tul on tul.tag_label_id = tt.tag_label_id
inner join nabu_ui.tag_category tc on tul.tag_category_id = tc.tag_category_id
where collection_id in ($data.input_data.table_id$) and datastore_id in ($data.input_data.data_domain_id$) and valid_to_ts = '9999-12-31'
group by tag_category_name,tag_type_name
union all
select 'Placeholder' as tag_category_name, 'placeholder_tag' as tag_type_name, '["Collection"]' as tagvalues
>>

insertCollectionTagsinDocument(data)::=<<
{
    "STPath": "$data.STPath$/globalsearch.stg",
    "metadata_flag": false,
    "queryConfig": {
        "query": "table_id:$data.input_data.table_id$ AND datastore_id:$data.input_data.data_domain_id$ AND placeholder_tag_raw:collection AND document_type_raw:collection",
        "collection": "nabu_search",
        "type": "insert",
        "facet_query": "",
        "fields": "",
        "filter": ""
    },
    "dataFilter": "update_tags"
}
>>

// This template is used to create tag for a field based on the field id and datastore id.
// @created_by Rahul(rr0208)
// @Api_Path : "http://localhost:port/fireshots/nabu/upd/sq/restCatalog/addFieldTag"

addFieldTag(data)::=<<
{
    "input_data": $data.asString$,
    "sequential_queries": [
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "addFieldTag_schema",
            "validation_key": "input_data",
            "query_type": "validation"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "addFieldTag_template",
            "query_output_key": "data",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "logTemplate_add_fieldTag",
            "query_type": "log",
            "log_service": "auditLog"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "getFieldTagsList",
            "query_output_key": "tagList",
            "service_name": "nabu",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "getFields",
            "query_output_key": "insert_docs",
            "service_name": "nabu",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "insertFieldTagsinDocument",
            "query_output_key": "updatedDoc",
            "query_type": "update",
            "service_name": "solr"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "getTagInputDoc",
            "query_output_key": "insert_tag_docs",
            "query_type": "select",
            "service_name": "nabu",
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "createTagDocument",
            "query_output_key": "tagList",
            "service_name": "solr",
            "query_type": "update"
        }
    ],
    "output_keys": [
        "data"
    ]
}
>>

addFieldTag_schema(data)::=<<
{
    "\$schema": "http://json-schema.org/draft-04/schema#",
    "title": "Add Field Tag",
    "type": "object",
    "required": [
        "tag_category_id",
        "tag_label_id",
        "tag_category_color",
        "table_id",
        "data_domain_id",
        "column_id"
    ],
    "properties": {
        "tag_label_id": {
            "description": "The Unique Identifier of a tag",
            "type": "integer",
            "minimum": 1
        },
        "table_id": {
            "description": "The Unique Identifier of a collection",
            "type": "integer",
            "minimum": 1
        },
        "tag_category_id": {
            "description": "The Unique Identifier of a tag category",
            "type": "integer",
            "minimum": 1
        },
        "tag_category_color": {
            "description": "The color selected for the tag category",
            "type": "string",
            "pattern": "^#(?:[0-9a-fA-F]{3}){1,2}\$"
        },
        "data_domain_id": {
            "description": "The Unique Identifier of a data domain",
            "type": "integer",
            "minimum": 1
        },
        "column_id": {
            "description": "The Unique Identifier of a field",
            "type": "integer",
            "minimum": 1
        }
    }
}
>>

addFieldTag_template(data)::=<<
with field_tag as
(
	insert into nabu_ui.tag_field
	(
		field_id,tag_label_id,valid_from_ts,valid_to_ts,crt_by,crt_ts,mod_by,mod_ts,datastore_id
	)
	select $data.input_data.column_id$,$data.input_data.tag_label_id$,current_timestamp,'9999-12-31',
	'$data.userDetails.userId$',current_timestamp,'$data.userDetails.userId$',current_timestamp,$data.input_data.data_domain_id$
	where not exists
	(
		select * from nabu_ui.tag_field where tag_label_id = $data.input_data.tag_label_id$
		and field_id = $data.input_data.column_id$ and datastore_id = $data.input_data.data_domain_id$
		and valid_to_ts = '9999-12-31'
	)
	returning tag_id
),
tag_category_color as
(
	insert into nabu_ui.tag_category_details
	(
		tag_category_id,tag_category_color,icon_id,other_info,crt_by,crt_ts,mod_by,mod_ts
	)
	values
	(
		$data.input_data.tag_category_id$,'$data.input_data.tag_category_color$',0,
		'{"default":true,"checked":false}','$data.userDetails.userId$',now(),'$data.userDetails.userId$',now()
	)
	on conflict (tag_category_id)
	do update
	set tag_category_color ='$data.input_data.tag_category_color$',mod_by='$data.userDetails.userId$',mod_ts=now() where excluded.tag_category_id =$data.input_data.tag_category_id$
)
select tag_id from field_tag
>>

logTemplate_add_fieldTag(data)::=<<
{
    "audit_event_type_id": 59,
    "user_id": "$data.userDetails.userId$",
    "datastore_id": $data.input_data.data_domain_id$ ,
    "field_id": $data.input_data.column_id$ ,
    "log_time ": "$data.log_time$"
}
>>

getFieldTagsList(data)::=<<
select distinct tag_type_name,tag_category_name from nabu_ui.tag_field te
inner join nabu_ui.tag_user_labels tul on te.tag_label_id = tul.tag_label_id and te.valid_to_ts = '9999-12-31'
inner join nabu.datastore e on e.datastore_id=te.datastore_id and e.valid_to_ts = '9999-12-31'
inner join nabu_ui.tag_category tc on tc.tag_category_id =tul.tag_category_id
where e.datastore_id = $data.input_data.data_domain_id$ and te.field_id in
(
	select field_id from nabu.dataplace_collection_field_metadata where field_name =
	(
		select field_name from nabu.dataplace_collection_field_metadata where field_id = $data.input_data.column_id$ and collection_id = $data.input_data.table_id$ and valid_to_ts='9999-12-31'
	)
)
>>

getFields(data)::=<<
with cte as
(
	select field_id$if(data.tagList)$,$data.tagList:resolveTagItem();separator=",\n"$$endif$
	from nabu_ui.tag_field te
	inner join nabu_ui.tag_user_labels tul on te.tag_label_id = tul.tag_label_id and te.valid_to_ts = '9999-12-31'
	inner join nabu.datastore e on e.datastore_id=te.datastore_id and e.valid_to_ts = '9999-12-31'
	inner join nabu_ui.tag_category tc on tc.tag_category_id =tul.tag_category_id
	where e.datastore_id = $data.input_data.data_domain_id$ and te.field_id in
	(
		select field_id from nabu.dataplace_collection_field_metadata
		where field_id = $data.input_data.column_id$ and valid_to_ts='9999-12-31'
	)
	group by field_id
),
column_facets as
(
	select '['||array_to_string(array_agg(distinct case when facet_name is not null then concat('"',facet_name,'"') else null end), ',')||']' as facet_name ,
	a.column_id,a.table_id
	from nabu_data_catalog.facet f
	inner join
	(
		select a.facet_id,a.table_id,a.column_id
		from
		(
			select a.facet_rule_id,a.facet_id,a.table_id,a.column_id from nabu_data_catalog.facet_table_matches a
			left outer join nabu_data_catalog.facet_fingerprint_ignore_columns b on a.facet_id = b.facet_id
			and a.facet_rule_id = b.facet_rule_id and a.table_id = b.table_id and a.column_id = b.column_id  and b.valid_to_ts = '9999-12-31'
			where a.valid_to_ts = '9999-12-31' and  b.facet_rule_id is null and a.facet_rule_type_id=2
		)a
		inner join nabu_data_catalog.facet_fingerprint_rule b on a.facet_rule_id = b.facet_rule_id
		and a.table_id <>b.table_id and a.column_id <>b.column_id
		and b.valid_to_ts = '9999-12-31'
		union
		select a.facet_id,a.table_id,a.column_id from nabu_data_catalog.facet_table_matches a
		inner join nabu_data_catalog.facet_metadata_rule b on a.facet_rule_type_id=b.facet_rule_type_id and a.facet_rule_id=b.facet_rule_id
		and a.facet_id=b.facet_id and a.valid_to_ts='9999-12-31' and b.valid_to_ts='9999-12-31'
		where a.facet_rule_type_id=1
		union
		select facet_id,table_id,column_id from nabu_data_catalog.facet_fingerprint_rule where valid_to_ts = '9999-12-31'
		union
		select a.facet_id,a.table_id,a.column_id from nabu_data_catalog.facet_fingerprint_accept_columns a
		inner join nabu_data_catalog.facet_fingerprint_rule b on a.facet_rule_id = b.facet_rule_id and a.valid_to_ts = '9999-12-31' and  b.valid_to_ts = '9999-12-31'
	)a
	on a.facet_id=f.facet_id and f.valid_to_ts ='9999-12-31'
	where datastore_id = $data.input_data.data_domain_id$
	group by a.column_id,a.table_id
)
select field_name as searchelement,'Field' as placeholder_tag,'field' as document_type,column_id::json,false as entityValue,datastore_id,datastore_name, roles::json,
case when facet_name = '[]'::text then null else facet_name::json end as facet_tag$if(data.tagList)$,$data.tagList:resolveNulls();separator=","$$endif$
from
(
	select  d.datastore_id,field_name,'['||string_agg(distinct a.field_id ::text,',')||']' as column_id,'['||string_agg(distinct role_id::text,',')||']' as roles,facet_name,d.datastore_name$if(data.tagList)$,$data.tagList:resolveTagString();separator=","$$endif$
	from  nabu.dataplace_collection_field_metadata a
	inner join nabu.datastore_object_mapping c on a.collection_id =c.object_id and c.valid_to_ts = '9999-12-31' and a.valid_to_ts='9999-12-31'
	inner join nabu.datastore d on d.datastore_id=c.datastore_id and d.valid_to_ts='9999-12-31'
	inner join nabu_ui.datastore_role_mapping b on d.datastore_id=b.datastore_id
	inner join nabu_ui.data_access_type_lookup f on b.data_access_type_id=f.data_access_type_id
	left outer join column_facets ffr on ffr.column_id = a.field_id
	left outer join cte k on a.field_id=k.field_id
	where d.datastore_id = $data.input_data.data_domain_id$ and field_name in
	(
		select field_name from nabu.dataplace_collection_field_metadata where field_id = $data.input_data.column_id$ and valid_to_ts='9999-12-31' )
		group by d.datastore_id,field_name ,d.datastore_name,facet_name$if(data.tagList)$,$data.tagList:resolveTagString();separator=","$$endif$
)x
>>

resolveTagString(map)::=<<
$map.tag_type_name$
>>

resolveNulls(map)::=<<
case when $map.tag_type_name$ = '[]'::text then null else $map.tag_type_name$::json end as $map.tag_type_name$
>>

resolveTagItem(map)::=<<
'['||array_to_string(array_agg(case when tag_category_name = '$map.tag_category_name$' then concat('"',tag_label_name,'"') else null end), ',')||']' as $map.tag_type_name$
>>

insertFieldTagsinDocument(data)::=<<
{
    "STPath": "$data.STPath$/globalsearch.stg",
    "metadata_flag": false,
    "queryConfig": {
        "query": "datastore_id:$data.input_data.data_domain_id$ AND placeholder_tag:field AND searchelement_raw:$first(data.insert_docs).searchelement$",
        "collection": "nabu_search",
        "type": "insert",
        "facet_query": "",
        "fields": "",
        "filter": ""
    },
    "dataFilter": "update_columns"
}
>>

// @modified_by Kusuri Dheeraj Kumar (KD2106)
// @Api_Path : "http://localhost:port/fireshots/nabu/upd/sq/restCatalog/onDemandIngestion"

onDemandIngestion(data)::=<<
{
    "input_data": $data.asString$,
    "sequential_queries": [
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "onDemandIngestion_schema",
            "validation_key": "input_data",
            "query_type":"validation"
        },
       {
           "query_template_group": "$data.STPath$/restCatalog.stg",
           "query_template_name": "checkAccessForSuperAdminRole",
           "query_output_key": "checkAccess",
           "query_type":"select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "dataMovementChecks",
            "query_output_key":"checks",
            "query_type":"select",
            "processLogic": {
            "processClass": "com.modak.fireshots.processors.impl.ChecksProcessor",
            "processType":"checks"
            }
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "getMinutes",
            "processLogic": {
                "processClass": "com.modak.fireshots.processors.impl.CronProcessor",
                "generate_cron": ["minutes"],
                "result_key": "cron_details"
            },
            "query_output_key": "cron_details",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "checkIngestionType",
            "query_output_key": "data_movement_type",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "insertJobScheduleDetails",
            "query_output_key": "job_schedule_details",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "outputMessage",
            "query_output_key": "data",
            "query_type": "select"
        }
    ],
    "output_keys": [
        "data"
    ]
}
>>


onDemandIngestion_schema(data)::=<<
{
	"\$schema": "http://json-schema.org/draft-07/schema#",
	"title": "on Demand Ingestion",
	"type": "object",
	"required": [
		"pipeline_id"
	],
	"properties": {
		"pipeline_id": {
            "type": "integer",
            "minimum": 1
		}
	}
}
>>

getMinutes(data)::=<<
select 2 as minutes
>>

checkIngestionType(data)::=<<
select case when data_movement_type='Ingestion' then true else false end as flag
from nabu.data_movement dm where data_movement_id =$data.input_data.pipeline_id$
>>

insertJobScheduleDetails(data)::=<<
$if(first(data.data_movement_type).flag)$
with update_mod as(
update nabu.data_movement set mod_by='$data.userDetails.userId$', mod_ts=now()
where data_movement_id=$data.input_data.pipeline_id$
),
update_job_schedule_details as(
update nabu.job_schedule_details set valid_to_ts=now()
where data_movement_id=$data.input_data.pipeline_id$
and job_type_id in (select job_type_id from nabu.job_type_lookup where job_type in ('ingestion','ondemand_ingestion')) and valid_to_ts  = '9999-12-31'
)
insert into nabu.job_schedule_details(job_type_id, data_movement_id,refresh_frequency,
additional_properties, valid_from_ts, valid_to_ts, cru_by, cru_ts) values
((select job_type_id from nabu.job_type_lookup where job_type ='ondemand_ingestion'),$data.input_data.pipeline_id$,
'$first(data.cron_details).generated_cron.refresh_frequency$','$additional_properties(data)$',current_timestamp,'9999-12-31'
,'$data.userDetails.userId$',current_timestamp) returning job_schedule_id
$else$
select
$endif$
>>

additional_properties(data)::=<<
{
	"cron_type":"one_time",
	"cron_freq":"$first(data.cron_details).generated_cron.refresh_frequency$",
	"cron_timezone":"$first(data.cron_details).generated_cron.timezone$",
	"consider_timezone":true

}
>>

outputMessage(data)::=<<
$if(first(data.data_movement_type).flag)$
select 'Scheduled Ingestion for pipeline id $data.input_data.pipeline_id$ at $first(data.cron_details).generated_cron.current_timestamp$' as status
$else$
select 'Unable to schedule ingestion. The pipeline is not ingestion type.' as status
$endif$
>>



// this API is to reschedule the pipeline for failed objects.
// @created_by murthy (vk1708)
// @Api_Path : "http://localhost:port/fireshots/nabu/upd/sq/ingestionMonitoringDashboard/ingestionPipelineRetry"

ingestionPipelineRetry(data)::=<<
{
  "input_data": $data.asString$,
  "sequential_queries": [
  {
        "query_template_group": "$data.STPath$/restCatalog.stg",
        "query_template_name":"ingestionPipelineRetry_schema",
        "validation_key":"input_data",
        "query_type":"validation"
  },
  {
        "query_template_group": "$data.STPath$/restCatalog.stg",
        "query_template_name": "getIngestionPipelineFailedObjects",
        "query_output_key": "failed_ids",
        "query_type":"select"
  },
  {
        "query_template_group":"$data.STPath$/restCatalog.stg",
        "query_template_name":"ingestionPipelineRetry_template",
        "query_output_key":"data",
        "query_type":"insert"
  }
  ],
  "output_keys":["data"]
}
>>

ingestionPipelineRetry_schema(data)::=<<
{
  "\$schema": "http://json-schema.org/draft-04/schema#",
  "definitions": {
    "one_time": {
      "description": "user defined crawling frequency",
      "type": "object",
      "required": [
        "cron_type",
        "cron_freq",
        "cron_timezone",
        "consider_timezone"
      ],
      "properties": {
        "cron_type": {
          "title": "Type of cron whether Recurring or Onetime",
          "type": "string",
          "enum": [
            "one_time"
          ]
        },
        "cron_freq": {
          "title": "crawl frequency",
          "type": "string"
        },
        "cron_timezone": {
          "title": "Zone of time Country/City",
          "type": "string"
        },
        "consider_timezone": {
          "type": "boolean"
        }
      }
    }
  },
  "type": "object",
  "properties": {
    "queryConfig": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "minLength": 3
        },
        "pipeline_id": {
          "type": "integer",
          "minimum": 1
        },
        "object_id": {
          "type": "array",
          "items": [
            {
              "type": "number",
              "minimum": 1
            }
          ]
        },
        "refresh_frequency": {
          "description": "Filter Resolving Frequency",
          "\$ref": "#/definitions/$data.input_data.refresh_freq.cron_type$"
        },
        "select_all_objects": {
          "type": "boolean"
        }
      },
      "required": [
        "owner",
        "pipeline_id",
        "object_id",
        "refresh_frequency",
        "select_all_objects"
      ]
    }
  },
  "required": [
    "queryConfig"
  ]
}
>>

getIngestionPipelineFailedObjects(data)::=<<
$if(data.input_data.queryConfig.select_all_objects)$
select object_id as object_ids from (
select process_id,status_code_id,object_id,case when status_code_id in (16,17,18) then 'failed' end as object_status
,row_number() over (partition by batch_id ,object_id order by flow_task_ts desc) as row_number,data_movement_id from nabu.flow_task_status
where batch_id in (select max(batch_id) from nabu.process_id_table_map pitm where data_movement_id= $data.input_data.queryConfig.pipeline_id$)
)x
where row_number = 1 and object_status='failed'
$else$
select ARRAY[]::integer[] as object_ids
$endif$
>>

ingestionPipelineRetry_template(data)::=<<
$if(data.input_data.queryConfig.select_all_objects)$
insert into nabu.job_schedule_details
(job_type_id,data_movement_id,object_id,refresh_frequency,additional_properties,valid_from_ts,valid_to_ts,cru_by,cru_ts)
values(6,$data.input_data.queryConfig.pipeline_id$,array_to_json(array[$resolveListObject(data.failed_ids)$]),
'$data.input_data.queryConfig.refresh_frequency.cron_freq$','$resolveIngestionInfo(data)$',now(),'9999-12-31','$data.input_data.queryConfig.owner$',now())
$else$
insert into nabu.job_schedule_details
(job_type_id,data_movement_id,object_id,refresh_frequency,additional_properties,valid_from_ts,valid_to_ts,cru_by,cru_ts)
values(6,$data.input_data.queryConfig.pipeline_id$,array_to_json(array[$formList(data.input_data.queryConfig.object_id)$]),
'$data.input_data.queryConfig.refresh_frequency.cron_freq$','$resolveIngestionInfo(data)$',now(),'9999-12-31','$data.input_data.queryConfig.owner$',now())
$endif$
>>

formList(list)::=<<
$list:{item | $item$}; separator = ","$
>>

resolveListObject(list)::=<<
$list:{item | $item.object_ids$}; separator = ","$
>>

resolveIngestionInfo(data)::=<<
{
    "cron_type":"$data.asMap.queryConfig.refresh_frequency.cron_type$",
	"cron_freq":"$data.asMap.queryConfig.refresh_frequency.cron_freq$",
	"cron_timezone":"$data.asMap.queryConfig.refresh_frequency.cron_timezone$",
	"consider_timezone":$data.asMap.queryConfig.refresh_frequency.consider_timezone$
}
>>


resolveTagString(map)::=<<
$map.tag_type_name$
>>

resolveNulls(map)::=<<
case when $map.tag_type_name$ = '[]'::text then null else $map.tag_type_name$::json end as $map.tag_type_name$
>>

resolveTagItem(map)::=<<
'['||array_to_string(array_agg(case when tag_category_name = '$map.tag_category_name$' then concat('"',tag_label_name,'"') else null end), ',')||']' as $map.tag_type_name$
>>


// @modified_by Kusuri Dheeraj Kumar (KD2106)
// @Api_Path : "http://localhost:port/fireshots/nabu/upd/sq/restCatalog/onDemandProfiling"

onDemandProfiling(data)::=<<
{
    "input_data": $data.asString$,
    "sequential_queries": [
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "onDemandProfiling_schema",
            "validation_key": "input_data",
            "query_type":"validation"
        },
        {
              "query_template_group": "$data.STPath$/restCatalog.stg",
              "query_template_name": "checkAccessForSuperAdminRole",
              "query_output_key": "checkAccess",
              "query_type":"select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "onDemandDatastore_checks",
            "query_output_key":"checks",
            "query_type":"select",
            "processLogic": {
            "processClass": "com.modak.fireshots.processors.impl.ChecksProcessor",
            "processType":"checks"
            }
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "getMinutes",
            "processLogic": {
                "processClass": "com.modak.fireshots.processors.impl.CronProcessor",
                "generate_cron": ["minutes"],
                "result_key": "cron_details"
            },
            "query_output_key": "cron_details",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "insertJobScheduleDetailsForOnDemandProfiling",
            "query_output_key": "job_schedule_details",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "outputMessageForOnDemandProfiling",
            "query_output_key": "data",
            "query_type": "select"
        }
    ],
    "output_keys": [
        "data"
    ]
}
>>



onDemandProfiling_schema(data)::=<<
{
	"\$schema": "http://json-schema.org/draft-07/schema#",
	"title": "on Demand Profiling",
	"type": "object",
	"required": [
		"data_domain_id"
	],
	"properties": {
		"data_domain_id": {
            "type": "integer",
            "minimum": 1
		}
	}
}
>>

insertJobScheduleDetailsForOnDemandProfiling(data)::=<<
with upsert_profiling as(
INSERT INTO nabu.datastore_compute_engine_mapping
(datastore_id, compute_engine_id, workflow_engine_id, workflow_id, cru_by, cru_ts,job_type_id)
select $data.input_data.data_domain_id$ as datastore_id,
(select compute_engine_id from nabu.datastore_compute_engine_mapping
where datastore_id=$data.input_data.data_domain_id$ and job_type_id=2),
(select workflow_engine_id from nabu.datastore_compute_engine_mapping
where datastore_id=$data.input_data.data_domain_id$ and job_type_id=2),
(select workflow_id from nabu.datastore_compute_engine_mapping
where datastore_id=$data.input_data.data_domain_id$ and job_type_id=2),
'$data.userDetails.userId$' as cru_by, now() as cru_ts ,
(select job_type_id from nabu.job_type_lookup where job_type ='ondemand_profiling') as job_type_id
where not exists (
select compute_engine_id from nabu.datastore_compute_engine_mapping
where datastore_id =$data.input_data.data_domain_id$ and job_type_id =
(select job_type_id from nabu.job_type_lookup where job_type ='ondemand_profiling')
)
),
update_mod as(
update nabu.datastore set mod_by='$data.userDetails.userId$', mod_ts=now()
where datastore_id=$data.input_data.data_domain_id$
),
update_job_schedule_details as(
update nabu.job_schedule_details set valid_to_ts=now()
where datastore_id=$data.input_data.data_domain_id$
and job_type_id in (select job_type_id from nabu.job_type_lookup where job_type in ('profiling','ondemand_profiling')) and valid_to_ts  = '9999-12-31'
)
insert into nabu.job_schedule_details(job_type_id, datastore_id,refresh_frequency,
additional_properties, valid_from_ts, valid_to_ts, cru_by, cru_ts) values
((select job_type_id from nabu.job_type_lookup where job_type ='ondemand_profiling'),$data.input_data.data_domain_id$,
'$first(data.cron_details).generated_cron.refresh_frequency$','$additional_properties(data)$',current_timestamp,'9999-12-31'
,'$data.userDetails.userId$',current_timestamp) returning job_schedule_id
>>



outputMessageForOnDemandProfiling(data)::=<<
select 'Scheduled Profiling for data store id $data.input_data.data_domain_id$ at $first(data.cron_details).generated_cron.current_timestamp$' as status
>>

// This template is used to create DataMovement API
// @created_by Dharani Darapuneni (DD1109)
// @Api_Path : "http://localhost:port/fireshots/nabu/upd/sq/restCatalog/addDataMovement"

addDataMovement(data)::=<<
{
 "input_data": $data.asString$,
  "sequential_queries": [
	{
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "addDataMovement_schema",
          "validation_key": "input_data",
          "query_type":"validation"
  	},
  	{
                "query_template_group": "$data.STPath$/restCatalog.stg",
                "query_template_name": "addDataMovement_checks",
                "query_output_key":"checks",
                "query_type":"select",
                "post_process":["checks"]
    },
    {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "isDefaultPriorityOrderDetails",
          "query_output_key": "default_priority",
          "query_type":"select"
    },
    {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "addDataMovementDetails_template",
          "query_output_key": "data",
          "query_type":"select"
    },
    {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "addArchive_addDataMovement",
          "query_output_key":"archive",
          "query_type":"update"
    },
    {
           "query_template_group": "$data.STPath$/restCatalog.stg",
           "query_template_name": "unSupportedDataTypesMappingDetails_template",
           "query_output_key": "DataMapping",
           "query_type":"insert"
    },
    {
           "query_template_group": "$data.STPath$/restCatalog.stg",
           "query_template_name": "logTemplate_add_ingestionDetails",
           "query_type":"log",
           "log_service":"auditLog"
    }
    ],
    "output_keys":["data","data_movement_id"]
}
>>

addDataMovement_checks(data)::=<<
select $false:UniqueDataMovementName(data)$
>>

UniqueDataMovementName(add, data)::=<<
not exists(select * from nabu.data_movement_physical where valid_to_ts='9999-12-31' and lower(data_movement_name)=lower('$data.asMap.data_movement_name$') $if(add)$and data_movement_id<>$data.asMap.data_movement_id$$endif$) "unique"
>>

addArchive_addDataMovement(data)::=<<
with tags as (
select  $first(data.data).data_movement_id$ as data_movement_id,coalesce(json_agg(tag),'[]') as tag from (
    select row_to_json(tags) as tag from
        (select td.tag_id,td.tag_label_id,
         ul.tag_label_name, c.tag_category_name,cd.tag_category_color
         from  nabu_ui.tag_data_movement td
         inner join nabu_ui.tag_user_labels as ul on td.tag_label_id=ul.tag_label_id
         inner join nabu_ui.tag_category as c on ul.tag_category_id=c.tag_category_id
         inner join nabu_ui.tag_category_details as cd on ul.tag_category_id=cd.tag_category_id
         where td.data_movement_id =$first(data.data).data_movement_id$ and valid_to_ts='9999-12-31') as tags
    ) as tags
),
data_movement as(
select (coalesce ((array_agg(row_to_json(aood)))[1], '[]')) as advanced_option_details
from nabu.advanced_options_object_details aood where data_movement_id =$first(data.data).data_movement_id$ and aood.valid_to_ts ='9999-12-31'
),
data_movement_details as (
select $first(data.data).data_movement_id$ as data_movement_id ,coalesce(((json_agg(row_to_json(aood)))),'[]')as option_details
from nabu.data_movement_details aood where data_movement_id =$first(data.data).data_movement_id$ and aood.valid_to_ts ='9999-12-31'
)
insert into nabu.data_movement_archive values
($first(data.data).data_movement_id$,
    (select jsonb_build_object(
               'datamovement_info',row_to_json(dm)::jsonb,
               'option_details', option_details::jsonb,
               'advanced_option_details', advanced_option_details::jsonb,
               'details', row_to_json(bcw)::jsonb,
               'tags', tag::jsonb
    )
     from data_movement aood,nabu.data_movement dm
     inner join data_movement_details dmd on dm.data_movement_id =dmd.data_movement_id
     inner join nabu.bot_configuration_workflow bcw on dm.workflow_id = bcw.workflow_id
     inner join tags t on t.data_movement_id=dm.data_movement_id
     where dm.data_movement_id =$first(data.data).data_movement_id$),
     null,'$data.userDetails.userId$',now());
>>

addDataMovement_schema(data)::=<<
{
  "\$schema": "http://json-schema.org/draft-04/schema#",
  "definitions": {
    "recurring": {
      "description": "user defined crawling frequency",
      "type": "object",
      "required": [
        "cron_type",
        "cron_freq",
        "cron_timezone",
        "cron_info",
        "consider_timezone"
      ],
      "properties": {
        "cron_type": {
          "title": "Type of cron whether Recurring or Onetime",
          "type": "string",
          "enum": [
            "recurring"
          ]
        },
        "cron_freq": {
          "title": "crawl frequency",
          "type": "string",
          "pattern": "^.*\$"
        },
        "cron_timezone": {
          "title": "Zone of time Country/City",
          "type": "string"
        },
        "consider_timezone": {
          "type": "boolean"
        },
        "cron_info": {
          "type": "object",
          "properties": {
            "schedule_type": {
              "title": "Type of schedule whether its is Daily/Weekly/Monthly/Yearly/Advanced",
              "type": "string",
              "enum": [
                "Daily",
                "weekly",
                "Monthly",
                "Yearly",
                "Advanced"
              ]
            },
            "start_date": {
              "title": "Start Date",
              "type": "string"
            },
            "end_date": {
              "title": "End Date",
              "type": "string"
            }
          },
          "required": [
            "schedule_type",
            "start_date"
          ]
        }
      }
    },
    "one_time": {
      "description": "user defined crawling frequency",
      "type": "object",
      "required": [
        "cron_type",
        "cron_freq",
        "cron_timezone",
        "consider_timezone"
      ],
      "properties": {
        "cron_type": {
          "title": "Type of cron whether Recurring or Onetime",
          "type": "string",
          "enum": [
            "one_time"
          ]
        },
        "cron_freq": {
          "title": "crawl frequency",
          "type": "string",
          "pattern": "^.*\$"
        },
        "cron_timezone": {
          "title": "Zone of time Country/City",
          "type": "string"
        },
        "consider_timezone": {
          "type": "boolean"
        }
      }
    }
  },
  "type": "object",
  "properties": {
    "connection_type": {
      "type": "string"
    },
    "data_movement_name": {
      "type": "string",
      "maxLength": 75,
      "minLength": 3,
      "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$"
    },
    "contact_info": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "required": [
        "owner",
        "description"
      ]
    },
    "source_ingestion_details": {
      "type": "array",
      "items": [
        {
          "type": "object",
          "properties": {
            "dataplace_id": {
              "type": "integer"
            },
            "schema_id": {
              "type": "integer"
            },
            "ingest_all_tables_views": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                }
              ]
            },
            "filters_list": {
              "type": "array",
              "items": [
                {
                  "type": "object",
                  "properties": {
                    "filter_type_id": {
                      "type": "integer"
                    },
                    "filter_type": {
                      "type": "string"
                    },
                    "filter_name": {
                      "type": "string"
                    },
                    "filter_value": {
                      "type": "array",
                      "items": {}
                    },
                    "priority_order": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "filter_type_id",
                    "filter_type",
                    "filter_value"
                  ]
                }
              ]
            }
          },
          "required": [
            "dataplace_id",
            "schema_id"
          ]
        }
      ]
    },
    "refresh_freq": {
      "description": "Filter Resolving Frequency",
      "\$ref": "#/definitions/$data.input_data.refresh_freq.cron_type$"
    },
    "destination_dataplace_id": {
      "type": "integer"
    },
    "destination_dataplace_name": {
      "type": "string"
    },
    "destination_schema_name": {
      "type": "string"
    },
    "workflow_engine_id": {
      "type": "integer"
    },
    "destination_type": {
      "type": "string"
    },
    "source_type": {
      "type": "string"
    },
    "bot_priority": {
      "type": "string"
    },
    "compute_engine_id": {
      "type": "integer"
    },
    "flow_details": {
      "type": "object",
      "properties": {
        "email_notification": {
          "type": "object",
          "properties": {
            "on_success": {
              "type": "array",
              "items": {}
            },
            "on_failure": {
              "type": "array",
              "items": {}
            },
            "email_check": {
              "type": "boolean"
            }
          },
          "required": [
            "on_success",
            "on_failure",
            "email_check"
          ]
        },
        "workflow_actions": {
          "type": "string"
        },
        "destination_file_format": {
          "type": "string"
        },
        "parallel_source_connections": {
          "type": "integer"
        },
        "retry_count": {
          "type": "integer"
        },
        "pipeline_retry": {
          "type": "boolean"
        },
        "pipeline_flow_timeout": {
          "type": "integer"
        },
        "schema_drift": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "email_ids": {
              "type": "array",
              "items": {}
            },
            "advanced_options_sub_type_id": {
              "type": "integer"
            },
            "advanced_options_sub_type": {
              "type": "string"
            },
            "config": {
              "type": "object",
              "properties": {
                "suffix": {
                  "type": "string"
                },
                "timestamp": {
                  "type": "string"
                }
              },
              "required": [
                "suffix",
                "timestamp"
              ]
            }
          },
          "required": [
            "enabled",
            "email_ids",
            "config"
          ]
        },
        "inconsistent_data_types": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "source_datatype_name": {
                "type": "string"
              },
              "inconsistent_datatype": {
                "type": "string"
              },
              "source_stg_function": {
                "type": "string"
              },
              "intermediate_stg_function": {
                "type": "string"
              },
              "destination_datatype_name": {
                "type": "string"
              },
              "option_number": {
                "type": "integer"
              }
            }
          }
        },
        "unsupported_data_types": {
          "type": "object",
          "properties": {
            "null": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ignore": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "asis": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "customtext": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "source_datatype_name": {
                    "type": "string"
                  },
                  "target_value": {
                    "type": "string"
                  }
                },
                "required": [
                  "source_datatype_name",
                  "target_value"
                ]
              }
            }
          },
          "required": [
            "null",
            "ignore",
            "asis"
          ]
        },
        "ignore_data_types": {
          "type": "array",
          "items": {}
        },
        "pre_conditions": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "pipeline_timeout": {
              "type": "integer"
            },
            "pipeline_details": {
              "type": "array",
              "items": [
                {
                  "type": "object",
                  "properties": {
                    "data_movement_id": {
                      "type": "integer"
                    },
                    "data_movement_name": {
                         "type": "string",
                         "maxLength": 75,
                         "minLength": 3,
                         "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$"
                    },
                    "status_code_description": {
                      "type": "string"
                    },
                    "status_code_id": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "data_movement_id",
                    "status_code_description",
                    "data_movement_name",
                    "status_code_id"
                  ]
                }
              ]
            }
          },
          "required": [
            "enabled",
            "pipeline_timeout",
            "pipeline_details"
          ]
        },
        "post_conditions": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "rest_api_details": {
              "type": "array",
              "items": [
                {
                  "type": "object",
                  "properties": {
                    "rest_api_id": {
                      "type": "integer"
                    },
                    "rest_api_name": {
                       "type": "string",
		       		"maxLength": 75
                    },
                    "status_code_description": {
                      "type": "string"
                    },
                    "status_code_id": {
                      "type": "integer"
                    },
                    "ordinal_position": {
                      "type": "integer"
                    },
                    "rest_api_body": {
                       "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "required": [
            "enabled",
            "rest_api_details"
          ]
        },
        "spark_config": {
          "type": "object",
          "properties": {
            "spark_default_command_options": {
              "type": "string"
            },
            "spark_bots_token_command_options": {
              "type": "string"
            },
            "spark_kerberos_command_options": {
              "type": "string"
            }
          },
          "required": [
            "spark_default_command_options",
            "spark_bots_token_command_options"
          ]
        },
        "git_info": {
          "type": "object",
          "properties": {
            "git_url": {
              "type": "string"
            },
            "project_name": {
              "type": "string"
            },
            "git_branch_or_tag": {
              "type": "string"
            },
            "git_file_path": {
              "type": "string"
            }
          },
          "required": [
            "git_url",
            "project_name",
            "git_branch_or_tag",
            "git_file_path"
          ]
        },
        "skip_verification": {
          "type": "boolean"
        },
        "verification_threshold": {
          "type": "string"
        },
        "run_only_file_changes": {
          "type": "string",
          "enum": [
            "true",
            "false"
          ]
        },
        "ignore_null_tables":{
           "type": "string",
            "enum":["true","false"]
        }
      },
      "required": [
        "email_notification",
        "destination_file_format",
        "pipeline_retry",
        "schema_drift",
        "inconsistent_data_types",
        "unsupported_data_types",
        "ignore_data_types",
        "pre_conditions",
        "skip_verification",
        "verification_threshold"
      ]
    },
    "ingestion_table_format": {
      "type": "object",
      "properties": {
        "prefix_value": {
          "type": "string"
        },
        "prefix": {
          "type": "boolean"
        },
        "database_name": {
          "type": "boolean"
        },
        "schema_name": {
          "type": "boolean"
        }
      },
      "required": [
        "prefix_value",
        "prefix",
        "database_name",
        "schema_name"
      ]
    },
    "destination_schema_id": {
      "type": "integer"
    },
    "tags": {
      "type": "array",
      "items": {}
    },
    "contact_info.description": {
      "type": "string"
    },
    "advanced_table_options": {
      "type": "object",
      "properties": {
        "incremental_load": {
          "type": "object",
          "properties": {
            "where_clause": {
              "type": "string"
            },
            "condition_values": {
              "type": "array",
              "items": [
                {
                  "type": "object",
                  "properties": {
                    "place_holder": {
                      "type": "string"
                    },
                    "default_value": {
                      "type": "integer"
                    },
                    "max_value": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "place_holder",
                    "default_value",
                    "max_value"
                  ]
                }
              ]
            }
          },
          "required": [
            "where_clause",
            "condition_values"
          ]
        },
        "columns_options": {
          "type": "object",
          "properties": {
            "modified_columns": {
              "type": "array",
              "items": [
                {
                  "type": "object",
                  "properties": {
                    "column_id": {
                      "type": "integer"
                    },
                    "column_info": {
                      "type": "object",
                      "properties": {
                        "source_column_name": {
                          "type": "string"
                        },
                        "source_column_type": {
                          "type": "string"
                        },
                        "destination_column_name": {
                          "type": "string"
                        },
                        "destination_column_type": {
                          "type": "string"
                        },
                        "source_casting_exp": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "source_column_name",
                        "source_column_type",
                        "destination_column_name",
                        "destination_column_type",
                        "source_casting_exp"
                      ]
                    }
                  },
                  "required": [
                    "column_id",
                    "column_info"
                  ]
                }
              ]
            },
            "excluded_column_ids": {
              "type": "array",
              "items": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "virtual_column": {
              "type": "array",
              "items": [
                {
                  "type": "object",
                  "properties": {
                    "column_name": {
                      "type": "string"
                    },
                    "column_type": {
                      "type": "string"
                    },
                    "spark_sql_expression": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "column_name",
                    "column_type",
                    "spark_sql_expression"
                  ]
                }
              ]
            }
          },
          "required": [
            "modified_columns",
            "excluded_column_ids",
            "virtual_column"
          ]
        },
        "reorder_columns": {
          "type": "array",
          "items": [
            {
              "type": "object",
              "properties": {
                "column_name": {
                  "type": "string"
                },
                "column_id": {
                  "type": "integer"
                },
                "is_virtual": {
                  "type": "boolean"
                }
              },
              "required": [
                "column_name",
                "column_id",
                "is_virtual"
              ]
            },
            {
              "type": "object",
              "properties": {
                "column_name": {
                  "type": "string"
                },
                "column_id": {
                  "type": "integer"
                },
                "is_virtual": {
                  "type": "boolean"
                }
              },
              "required": [
                "column_name",
                "column_id",
                "is_virtual"
              ]
            },
            {
              "type": "object",
              "properties": {
                "column_name": {
                  "type": "string"
                },
                "column_id": {
                  "type": "integer"
                },
                "is_virtual": {
                  "type": "boolean"
                }
              },
              "required": [
                "column_name",
                "column_id",
                "is_virtual"
              ]
            }
          ]
        },
        "remove_duplicates": {
          "type": "object",
          "properties": {
            "key_columns": {
              "type": "array",
              "items": [
                {
                  "type": "object",
                  "properties": {
                    "column_name": {
                      "type": "string"
                    },
                    "renamed_column": {
                      "type": "string"
                    },
                    "column_id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "column_name",
                    "renamed_column",
                    "column_id"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "column_name": {
                      "type": "string"
                    },
                    "renamed_column": {
                      "type": "string"
                    },
                    "column_id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "column_name",
                    "renamed_column",
                    "column_id"
                  ]
                }
              ]
            },
            "sort_columns": {
              "type": "array",
              "items": [
                {
                  "type": "object",
                  "properties": {
                    "column_name": {
                      "type": "string"
                    },
                    "renamed_column": {
                      "type": "string"
                    },
                    "column_id": {
                      "type": "string"
                    },
                    "sort_by": {
                      "type": "string"
                    },
                    "sort_null_values": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "column_name",
                    "renamed_column",
                    "column_id",
                    "sort_by",
                    "sort_null_values"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "column_name": {
                      "type": "string"
                    },
                    "renamed_column": {
                      "type": "string"
                    },
                    "column_id": {
                      "type": "string"
                    },
                    "sort_by": {
                      "type": "string"
                    },
                    "sort_null_values": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "column_name",
                    "renamed_column",
                    "column_id",
                    "sort_by",
                    "sort_null_values"
                  ]
                }
              ]
            }
          },
          "required": [
            "key_columns",
            "sort_columns"
          ]
        },
        "sort_by_columns": {
          "type": "array",
          "items": [
            {
              "type": "object",
              "properties": {
                "column_name": {
                  "type": "string"
                },
                "renamed_column": {
                  "type": "string"
                },
                "order_by": {
                  "type": "string"
                }
              },
              "required": [
                "column_name",
                "renamed_column",
                "order_by"
              ]
            }
          ]
        },
        "table_partitions": {
          "type": "array",
          "items": [
            {
              "type": "object",
              "properties": {
                "column_id": {
                  "type": "string"
                },
                "column_name": {
                  "type": "string"
                },
                "renamed_column": {
                  "type": "string"
                }
              },
              "required": [
                "column_id",
                "column_name",
                "renamed_column"
              ]
            }
          ]
        },
        "new_table_name": {
          "type": "string"
        },
        "parallel_ingestion": {
          "type": "object",
          "properties": {
            "enable": {
              "type": "boolean"
            },
            "max_connections": {
              "type": "integer"
            }
          },
          "required": [
            "enable",
            "max_connections"
          ]
        },
        "CDC": {
          "type": "object",
          "properties": {
            "CDC_type": {
              "type": "string"
            },
            "columns_ids": {
              "type": "array",
              "items": [
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "hash_type": {
              "type": "string"
            },
            "add_audit_columns": {
              "type": "boolean"
            },
            "audit_columns": {
              "type": "object",
              "properties": {
                "start_date_column_name": {
                  "type": "string"
                },
                "end_date_column_name": {
                  "type": "string"
                },
                "flag_column_name": {
                  "type": "string"
                },
                "process_id_column_name": {
                  "type": "string"
                },
                "prev_process_id_column_name": {
                  "type": "string"
                }
              },
              "required": [
                "start_date_column_name",
                "end_date_column_name",
                "flag_column_name",
                "process_id_column_name",
                "prev_process_id_column_name"
              ]
            },
            "create_view": {
              "type": "boolean"
            },
            "view_name": {
              "type": "string"
            }
          },
          "required": [
            "CDC_type",
            "columns_ids",
            "hash_type",
            "add_audit_columns",
            "audit_columns",
            "create_view",
            "view_name"
          ]
        },
        "ingest_using_query": {
          "type": "object",
          "properties": {
            "enable": {
              "type": "boolean"
            },
            "sql_query": {
              "type": "string"
            }
          },
          "required": [
            "enable",
            "sql_query"
          ]
        },
        "ingestion_mode": {
          "type": "object",
          "properties": {
            "enable": {
              "type": "boolean"
            },
            "mode": {
              "type": "string"
            }
          },
          "required": [
            "enable",
            "mode"
          ]
        }
      },
      "required": [
        "incremental_load",
        "columns_options",
        "reorder_columns",
        "remove_duplicates",
        "sort_by_columns",
        "table_partitions",
        "new_table_name",
        "parallel_ingestion",
        "CDC",
        "ingest_using_query",
        "ingestion_mode"
      ]
    }
  },
"ingestion_connection_type": {
"type": "string",
"enum":["delimited_files"]
},
"required": [
"connection_type",
"data_movement_name",
"contact_info",
"source_ingestion_details",
"refresh_freq",
"destination_dataplace_id",
"workflow_engine_id",
"destination_type",
"source_type",
"destination_schema_id",
"tags",
"compute_engine_id"
]
}
>>

isDefaultPriorityOrderDetails(data)::=<<
select case when '$data.asMap.bot_priority$' = 'Default' then true else false end as flag
>>


addDataMovementDetails_template(data)::=<<
with connection_profile_id as (
select connection_profile_id from nabu.connection_profile where connection_type = '$data.input_data.connection_type$'),
workflow_id as (
select workflow_id from nabu.bot_configuration_workflow a
inner join nabu.compute_engine b on a.engine_mapping_id  = b.engine_mapping_id
where  source_type ='$data.input_data.source_type$' and destination_type ='$data.input_data.destination_type$'
and compute_engine_id = '$data.input_data.compute_engine_id$' and b.valid_to_ts = '9999-12-31'
),
data_movement_id as(
insert into nabu.data_movement
(data_movement_name,contact_info,data_movement_type,valid_from_ts,valid_to_ts,crt_by,crt_ts,mod_by,mod_ts,refresh_freq,connection_profile_id,data_movement_engine_id,workflow_engine_id,workflow_id,priority_order,data_movement_additional_info,compute_engine_id)
values
('$data.asMap.data_movement_name$',E'$resolveContactJsonDetails(data.asMap.contact_info)$','Ingestion',current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp,'$data.userDetails.userId$',current_timestamp,
'$data.asMap.refresh_freq.cron_freq$',
(select * from connection_profile_id),
$if(data.input_data.data_movement_engine_id)$
$data.input_data.data_movement_engine_id$
$else$
null
$endif$
,$data.input_data.workflow_engine_id$,(select workflow_id from workflow_id),
$if(first(data.default_priority).flag)$null$else$$data.asMap.bot_priority$$endif$,
E'$advancedOptions(data)$',$data.asMap.compute_engine_id$
)
returning data_movement_id
),
job_schedule_details as (
insert into nabu.job_schedule_details(job_type_id, data_movement_id,refresh_frequency,additional_properties, valid_from_ts, valid_to_ts, cru_by, cru_ts) values
((select job_type_id from nabu.job_type_lookup where job_type ='ingestion'),(select data_movement_id from data_movement_id),
 '$data.asMap.refresh_freq.cron_freq$','$resolveIngestionInfoDetails(data)$',current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp)
)
$if(data.input_data.flow_details.inconsistent_data_types)$$inconsistentListDetails(data)$$endif$
$if(data.asMap.tags)$
$"data_movement":resolveTagsDetails(data)$
$endif$
,data_movement_details as(
insert into nabu.data_movement_details
(data_movement_id,source_dataplace_id,source_schema_id,filter_type_id,filter_rule,destination_dataplace_id,destination_schema_id,ingest_all_tables_views,valid_from_ts,valid_to_ts,crt_by,crt_ts,priority_order)
values
$data.asMap.source_ingestion_details:forEachDataMovementInsertDetails(data);separator=","$)
$if(data.input_data.advance_table_options)$
,table_advanced_options as(
INSERT INTO nabu.advanced_options_object_details
(object_id, data_movement_id, advance_option_details, valid_from_ts, valid_to_ts, cru_ts, cru_by) VALUES
$data.input_data.advance_table_options:{ table | ($table.table_id$, (select data_movement_id from data_movement_id),'{"advanced_table_options":$resolveAdvancedOptionsConditionsDetails(table)$,"advanced_option_flags":$resolveAdvancedOptionsFlagsDetails(table)$\}', current_timestamp, '9999-12-31', current_timestamp, '$data.userDetails.userId$')};separator=","$
)
$endif$
select * from  data_movement_id
>>

nullif(data)::=<<
$if(data)$$data$$else$null$endif$
>>


unSupportedDataTypesMappingDetails_template(data)::=<<
$if(data.asMap.flow_details.unsupported_data_types.null)$
insert into nabu.user_defined_trans_for_unsupported_datatype(data_movement_id, source_type,intermediate_type,destination_type,engine_id,source_datatype_name,advanced_options_sub_type_id,valid_from,valid_to_ts, cru_by, cru_ts)
 values $data.asMap.flow_details.unsupported_data_types.null:foreachUnsupportedListNullDetails(data);separator=","$;
$endif$
$if(data.asMap.flow_details.unsupported_data_types.asis)$
insert into nabu.user_defined_trans_for_unsupported_datatype(data_movement_id, source_type,intermediate_type,destination_type,engine_id,source_datatype_name,advanced_options_sub_type_id,valid_from,valid_to_ts, cru_by, cru_ts) values $data.asMap.flow_details.unsupported_data_types.asis:foreachUnsupportedListAsisDetails(data);separator=","$;
$endif$
$if(data.asMap.flow_details.unsupported_data_types.ignore)$
insert into nabu.user_defined_trans_for_unsupported_datatype(data_movement_id, source_type,intermediate_type,destination_type,engine_id,source_datatype_name,advanced_options_sub_type_id,valid_from,valid_to_ts, cru_by, cru_ts) values $data.asMap.flow_details.unsupported_data_types.ignore:foreachUnsupportedListIgnoreDetails(data);separator=","$;
$endif$
$if(data.asMap.flow_details.unsupported_data_types.customtext)$
insert into nabu.user_defined_trans_for_unsupported_datatype(data_movement_id, source_type,intermediate_type,destination_type,engine_id,source_datatype_name,advanced_options_sub_type_id,valid_from,valid_to_ts, cru_by, cru_ts, additional_info) values $data.asMap.flow_details.unsupported_data_types.customtext:foreachUnsupportedListCustomtextDetails(data);separator=","$;
$endif$
>>


foreachUnsupportedListNullDetails(item, data)::=<<
($first(data.data).data_movement_id$, '$data.asMap.source_type$',LOWER('$data.asMap.flow_details.destination_file_format$'),
 '$data.asMap.destination_type$',$getComputeEngineId(data.asMap.compute_engine_id)$,'$item$',15,current_timestamp,
 '9999-12-31','$data.userDetails.userId$',current_timestamp)
>>


foreachUnsupportedListAsisDetails(item, data)::=<<
($first(data.data).data_movement_id$, '$data.asMap.source_type$',LOWER('$data.asMap.flow_details.destination_file_format$'),
 '$data.asMap.destination_type$',$getComputeEngineId(data.asMap.compute_engine_id)$,'$item$',14,current_timestamp,
 '9999-12-31','$data.userDetails.userId$',current_timestamp)
>>


foreachUnsupportedListIgnoreDetails(item, data)::=<<
($first(data.data).data_movement_id$, '$data.asMap.source_type$',LOWER('$data.asMap.flow_details.destination_file_format$'),
 '$data.asMap.destination_type$',$getComputeEngineId(data.asMap.compute_engine_id)$,'$item$',16,current_timestamp,
 '9999-12-31','$data.userDetails.userId$',current_timestamp)
>>

foreachUnsupportedListCustomtextDetails(item,data)::=<<
($first(data.data).data_movement_id$, '$data.asMap.source_type$',LOWER('$data.asMap.flow_details.destination_file_format$'),
 '$data.asMap.destination_type$',$getComputeEngineId(data.asMap.compute_engine_id)$,'$item.source_datatype_name$',17,current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp, '$resolveUnsupportedCustomTextDetails(item)$')
>>

resolveUnsupportedCustomTextDetails(map)::=<<
{
    "target_value":"$map.target_value$"
}
>>

inconsistentListDetails(data)::=<<
,inconsistentDataTypes as(
insert into nabu.user_defined_trans_for_inconsistent_datatype values $data.asMap.flow_details.inconsistent_data_types:forEachInconsistentDetails(data);separator=","$
)
>>

forEachInconsistentDetails(item, data)::=<<
((select * from data_movement_id), '$data.asMap.source_type$',LOWER('$data.asMap.flow_details.destination_file_format$'),
 '$data.asMap.destination_type$',$getComputeEngineId(data.asMap.compute_engine_id)$,'$item.inconsistent_datatype$','$item.source_stg_function$','$item.intermediate_stg_function$',
 '$item.destination_datatype_name$',$item.option_number$, current_timestamp,
 '9999-12-31','$data.userDetails.userId$',current_timestamp)
>>

resolveTagsDetails(resource, data)::=<<
,update_tag_category_details as(
    update nabu_ui.tag_category_details
    set mod_by='$data.userDetails.userId$',mod_ts=now()
    where tag_category_id in ($data.input_data.tags: {tag |$tag.tag_category_id$}; separator=","$)
)
,insert_tag_category_details as(
    insert into nabu_ui.tag_category_details(tag_category_id,icon_id,other_info,crt_by,crt_ts,mod_by,mod_ts)
    select * from (values
        $data.input_data.tags: {tag |  ($tag.tag_category_id$,0,'{"default":true,"checked":false\}'::jsonb,'$data.userDetails.userId$',current_timestamp,'$data.userDetails.userId$',current_timestamp)}; separator=","$
    )a (tag_category_id,icon_id,other_info,crt_by,crt_ts,mod_by,mod_ts)
    where tag_category_id not in (select tag_category_id from nabu_ui.tag_category_details)
)
,tags as(
    insert into nabu_ui.tag_$resource$($resource$_id,tag_label_id,valid_from_ts,valid_to_ts,crt_by,crt_ts,mod_by,mod_ts)(
        select distinct $resource$_id,a.* from (values
            $data.input_data.tags: {tag |  ($tag.tag_label_id$,current_timestamp,'9999-12-31'::timestamp,'$data.userDetails.userId$',current_timestamp,'$data.userDetails.userId$',current_timestamp)}; separator=",\n"$
        )a (tag_label_id,valid_from_ts,valid_to_ts,crt_by,crt_ts,mod_by,mod_ts), $resource$_id
    )
)
>>

resolveContactJsonDetails(contactInfo)::=<<
{
    "description": "$contactInfo.description$",
    "owner": "$contactInfo.owner$",
    "email": "$contactInfo.email$"
}
>>

resolveAdvancedOptionsConditionsDetails(data)::=<<
{
"dataplace_id": $data.dataplace_id$,
"table_name": "$data.table_name$",
"schema_id": $data.schema_id$,
"table_id": $data.table_id$,
"incremental_load": {$resolveIncrementalLoadDetails(data.incremental_load)$},
"columns_options": {$resolveColumnOptionsDetails(data.columns_options)$},
"reorder_columns": [$data.reorder_columns : { reorder_column | $resolveReorderColumnsDetails(reorder_column)$}; separator=","$],
"remove_duplicates": {"key_columns": [$data.remove_duplicates.key_columns : { remove_duplicates_key_columns | $resolveRemoveDuplicatesKeyColumnsDetails(remove_duplicates_key_columns)$}; separator=","$],"sort_columns": [$data.remove_duplicates.sort_columns : { remove_duplicates_sort_columns | $resolveRemoveDuplicatesSortColumnsDetails(remove_duplicates_sort_columns)$}; separator=","$]},
"sort_by_columns": [$data.sort_by_columns : { sort_by_column | $resolveSortByColumnsDetails(sort_by_column)$}; separator=","$],
"table_partitions": [$data.table_partitions : { table_partition | $resolveTablePartitionDetails(table_partition)$}; separator=","$],
"new_table_name": "$data.new_table_name$",
"parallel_ingestion":{"enable":$if(data.parallel_ingestion.enable)$ $data.parallel_ingestion.enable$ $else$false$endif$,
                      "max_connections":$if(data.parallel_ingestion.max_connections)$$data.parallel_ingestion.max_connections$$else$null$endif$},
"parallel_hash_ingestion": {"enable": $if(data.parallel_hash_ingestion.enable)$ $data.parallel_hash_ingestion.enable$ $else$false$endif$,
                            "max_connections": $if(data.parallel_hash_ingestion.max_connections)$$data.parallel_hash_ingestion.max_connections$$else$null$endif$},
"CDC": {
        "CDC_process_type":"$data.CDC.CDC_process_type$",
        "CDC_type": "$data.CDC.CDC_type$",
        "columns_ids": [$data.CDC.columns_ids : { id | $id$}; separator=","$],
        "hash_type": "$data.CDC.hash_type$",
        "add_audit_columns": $if(data.CDC.add_audit_columns)$$data.CDC.add_audit_columns$$else$false$endif$,
        $if(data.CDC.audit_columns)$
        "audit_columns": {
            "start_date_column_name": "$data.CDC.audit_columns.start_date_column_name$",
            "end_date_column_name": "$data.CDC.audit_columns.end_date_column_name$",
            "process_id_column_name": "$data.CDC.audit_columns.process_id_column_name$",
            "prev_process_id_column_name": "$data.CDC.audit_columns.prev_process_id_column_name$"
            },
        $endif$
        "create_view": $if(data.CDC.create_view)$$data.CDC.create_view$$else$false$endif$,
        "view_name": "$data.CDC.view_name$"
      },
$if(data.ingest_using_query)$
"ingest_using_query": {
"enable": $if(data.ingest_using_query.enable)$$data.ingest_using_query.enable$$else$false$endif$,
"sql_query": "$data.ingest_using_query.sql_query$"
},
$endif$
"ingestion_mode": {
"enable": $if(data.ingestion_mode.enable)$$data.ingestion_mode.enable$$else$false$endif$,
"mode": "$data.ingestion_mode.mode$"
}
}
>>

EmptyStringAsFalse::=[ "":false, default: true]

resolveAdvancedOptionsFlagsDetails(data)::=<<
{
"table_name": "$data.table_name$",
"table_id": $data.table_id$,
"dataplace_id": $data.dataplace_id$,
"schema_id": $data.schema_id$,
"incremental_load": $if(EmptyStringAsFalse.(data.incremental_load.where_clause))$true$else$false$endif$,
"columns_options":  $if(data.columns_options)$
						$if(data.columns_options.modified_columns)$ true $else$
							$if(data.columns_options.excluded_column_ids)$ true $else$
								$if(data.columns_options.virtual_column)$ true $else$ false $endif$
							$endif$
						$endif$
				  $else$ false $endif$,
"modified_columns": $if(data.columns_options.modified_columns)$true$else$false$endif$,
"excluded_column_ids": $if(data.columns_options.excluded_column_ids)$true$else$false$endif$,
"virtual_column": $if(data.columns_options.virtual_column)$true$else$false$endif$,
"reorder_columns": $if(data.reorder_columns)$true$else$false$endif$,
"remove_duplicates": $if(data.remove_duplicates.key_columns)$true$else$false$endif$,
"sort_by_columns": $if(data.sort_by_columns)$true$else$false$endif$,
"table_partitions": $if(data.table_partitions)$true$else$false$endif$,
"new_table_name": $if(EmptyStringAsFalse.(data.new_table_name))$true$else$false$endif$,
"parallel_ingestion": $if(data.parallel_ingestion.enable)$true$else$false$endif$,
"parallel_hash_ingestion": $if(data.parallel_hash_ingestion.enable)$true$else$false$endif$,
"CDC": $if(EmptyStringAsFalse.(data.CDC.CDC_type))$true$else$false$endif$,
"ingest_using_query": $if(data.ingest_using_query.enable)$true$else$false$endif$,
"ingestion_mode": $if(data.ingestion_mode.enable)$true$else$false$endif$
}
>>


resolveIncrementalLoadDetails(data)::=<<
"where_clause": "$data.where_clause$",
"condition_values": $if(data.condition_values)$ [ $data.condition_values : { values | $resolveConditionValuesDetails(values)$ }; separator=","$ ] $else$ [] $endif$
>>

resolveConditionValuesDetails(data)::=<<
{
  "place_holder": "$data.place_holder$",
  "default_value": "$data.default_value$",
  "max_value":$data.max_value$
$if(data.max_value)$
, "max_column_name":"$data.max_column_name$"
, "max_column_id": $data.max_column_id$
$endif$
}
>>

resolveColumnOptionsDetails(data)::=<<
"modified_columns": [ $data.modified_columns : { column | $resolveModifiedColumnsDetails(column)$}; separator=","$],
"excluded_column_ids": [$data.excluded_column_ids : { id | $id$}; separator=","$],
"virtual_column": [$data.virtual_column : { virtual_column | $resolveVirtualColumnDetails(virtual_column)$}; separator=","$]
>>

resolveVirtualColumnDetails(data)::=<<
{
"column_name": "$data.column_name$",
"column_type": "$data.column_type$",
"spark_sql_expression": "$data.spark_sql_expression$"
}
>>

resolveModifiedColumnsDetails(data)::=<<
{
"column_id": $if(data.column_id)$$data.column_id$$else$null$endif$,
"column_info": {
                "source_column_name": "$data.column_info.source_column_name$",
                "source_column_type": "$data.column_info.source_column_type$",
                "destination_column_name": "$data.column_info.destination_column_name$",
                "destination_column_type": "$data.column_info.destination_column_type$",
                "source_casting_exp":"$data.column_info.source_casting_exp$"
                }
}
>>

resolveReorderColumnsDetails(data)::=<<
{
"column_name": "$data.column_name$",
"column_id":$if(data.column_id)$$data.column_id$$else$null$endif$,
"is_virtual": $data.is_virtual$,
"order":$data.order$
}
>>

resolveRemoveDuplicatesKeyColumnsDetails(data)::=<<
{
"column_name": "$data.column_name$",
"renamed_column": "$data.renamed_column$",
"column_id": $if(data.column_id)$$data.column_id$$else$null$endif$
}
>>

resolveRemoveDuplicatesSortColumnsDetails(data)::=<<
{
"column_name": "$data.column_name$",
"renamed_column": "$data.renamed_column$",
"column_id": $if(data.column_id)$$data.column_id$$else$null$endif$,
"sort_by": "$data.sort_by$"
$if(data.sort_null_values)$
,"sort_null_values": "$data.sort_null_values$"
$endif$
}
>>

resolveSortByColumnsDetails(data)::=<<
{
"column_name": "$data.column_name$",
"renamed_column": "$data.renamed_column$",
"order_by": "$data.order_by$"
$if(data.sort_null_values)$
,"sort_null_values": "$data.sort_null_values$"
$endif$
}
>>

resolveTablePartitionDetails(data)::=<<
{
"column_id": $if(data.column_id)$$data.column_id$$else$null$endif$,
"column_name": "$data.column_name$",
"renamed_column": "$data.renamed_column$"
}
>>


standardResolve(data)::=<<
{$data.keys : { key | "$key$":"$data.(key)$"}; separator=","$}
>>

forEachDataMovementInsertDetails(source,data)::=<<
$source.filters_list:forEachFilterDetails(source,data);separator=","$
>>

forEachFilterDetails(filter,source,data)::=<<
((select * from data_movement_id),'$source.dataplace_id$','$source.schema_id$','$filter.filter_type_id$',
'[$filter.filter_value:resolveFilter(filter);separator=","$]',
'$data.asMap.destination_dataplace_id$','$data.asMap.destination_schema_id$',
'[$source.ingest_all_tables_views:resolveJsonArrayString();separator=","$]',
current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp,$filter.priority_order$)
>>

resolveJsonArrayInt(element)::=<<
$element$
>>

resolveJsonArrayString(element)::=<<
"$element$"
>>

resolveFilter(item,map)::=<<
$(map.filter_type)(item)$
>>

Inclusive_Regex(item)::=<<
$resolveJsonArrayString(item)$
>>

Exclusive_Regex(item)::=<<
$resolveJsonArrayString(item)$
>>

Inclusive_Like(item)::=<<
$resolveJsonArrayString(item)$
>>

Exclusive_Like(item)::=<<
$resolveJsonArrayString(item)$
>>

Static(item)::=<<
$resolveJsonArrayInt(item)$
>>

None(item)::=<<
>>

resolveIngestionTableFormatJsonDetails(data)::=<<
{
    "prefix_value": $if(data.asMap.ingestion_table_format.prefix_value)$"$data.asMap.ingestion_table_format.prefix_value$"$else$""$endif$,
    "prefix": $data.asMap.ingestion_table_format.prefix$,
    "database_name": $data.asMap.ingestion_table_format.database_name$,
    "schema_name": $data.asMap.ingestion_table_format.schema_name$
}
>>

flowDetails(data)::=<<
{
"email_notification": $emailNotfication(data)$,
"destination_file_format":"$data.asMap.flow_details.destination_file_format$",
"retry_count": $if(data.asMap.flow_details.retry_count)$ $data.asMap.flow_details.retry_count$ $else$ 3 $endif$,
"pipeline_retry": $if(data.asMap.flow_details.pipeline_retry)$ $data.asMap.flow_details.pipeline_retry$ $else$ false $endif$,
"schema_drift":$schemaDriftDetails(data)$,
"ignore_data_types":[$resolveList(data.asMap.flow_details.ignore_data_types)$],
"unsupported_data_types":$unsupportedTypes(first(data.asMap.flow_details.unsupported_data_types))$,
"pre_conditions": $preConditionsDetails(data)$,
"post_conditions": $postConditionsDetails(data)$,
"skip_verification": $if(data.asMap.flow_details.skip_verification)$  $data.asMap.flow_details.skip_verification$ $else$ false $endif$,
"verification_threshold": $if(data.asMap.flow_details.verification_threshold)$  "$data.asMap.flow_details.verification_threshold$" $else$ "10%" $endif$,
"parallel_source_connections" : $if(data.asMap.flow_details.parallel_source_connections)$ $data.asMap.flow_details.parallel_source_connections$ $else$ 3 $endif$,
"pipeline_flow_timeout" : $if(data.asMap.flow_details.pipeline_flow_timeout)$ $data.asMap.flow_details.pipeline_flow_timeout$ $else$ 20 $endif$
$if(data.asMap.flow_details.run_only_file_changes)$
,"run_only_file_changes":$data.asMap.flow_details.run_only_file_changes$
$endif$
$if(data.asMap.flow_details.git_info)$
,"git_info": $resolveKeys(data.asMap.flow_details.git_info)$
$endif$
$if(data.asMap.flow_details.spark_config)$
,"spark_config": $resolveKeys(data.asMap.flow_details.spark_config)$
$endif$
$if(data.asMap.flow_details.ignore_null_tables)$
,"ignore_null_tables":$data.asMap.flow_details.ignore_null_tables$
$endif$
$if(data.asMap.flow_details.archive_data)$
,"archive_data": $archiveDataDetails(data)$
$endif$
}
>>

// Not Used by the Import Test
advancedOptions(data)::=<<
{
    $if(data.asMap.ingestion_table_format)$
    "ingestion_table_format": $resolveIngestionTableFormatJsonDetails(data)$,
    $endif$
    "flow_details": $flowDetails(data)$
    $if(data.asMap.ingestion_connection_type)$
     ,"ingestion_connection_type": "$data.asMap.ingestion_connection_type$"
    $endif$
    $if(data.asMap.workflow_actions)$
     ,"workflow_actions": "$data.asMap.workflow_actions$"
    $endif$
    $if(data.asMap.target_relative_path)$
     ,"target_relative_path": "$data.asMap.target_relative_path$"
     ,"overwrite_default_relative_path": $if(data.asMap.overwrite_default_relative_path)$ $data.asMap.overwrite_default_relative_path$ $else$ false $endif$
    $endif$
    $if(data.asMap.target_relative_path)$
    ,"source_relative_target_path": "$data.asMap.target_relative_path$"
    $endif$
}
>>

resolveKeys(data)::=<<
{
$data.keys:{k | "$k$":"$data.(k)$"}; separator=","$
}
>>

unsupportedTypes(item)::=<<
[{$item.keys:{k | "$k$":[$resolveList(item.(k))$]}; separator=","$}]
>>

emailNotfication(data)::=<<
{
    "on_success":[$resolveList(data.flow_details.email_notification.on_success)$],
    "on_failure":[$resolveList(data.flow_details.email_notification.on_failure)$],
    "email_check":$if(data.flow_details.email_notification.email_check)$ true $else$ false $endif$
}
>>

schemaDriftDetails(data)::=<<
{
    "enabled":$if(data.asMap.flow_details.schema_drift.enabled)$ true $else$ false $endif$,
    "email_ids":[$resolveList(data.asMap.flow_details.schema_drift.email_ids)$]
    $if(data.asMap.flow_details.schema_drift.advanced_options_sub_type_id)$
    ,"advanced_options_sub_type_id": $data.asMap.flow_details.schema_drift.advanced_options_sub_type_id$
    $endif$
    $if(data.asMap.flow_details.schema_drift.advanced_options_sub_type_id)$
    ,"advanced_options_sub_type":"$data.asMap.flow_details.schema_drift.advanced_options_sub_type$"
    $endif$
    ,"config": $schemaDriftConfig(data.asMap.flow_details.schema_drift.config)$
}
>>

schemaDriftConfig(config)::=<<
{
    "suffix": "$config.suffix$",
    "timestamp": "$config.timestamp$"
}
>>

resolveList(list)::=<<
$list:{item | "$item$"}; separator = ","$
>>

preConditionsDetails(data)::=<<
{
    "enabled": $if(data.asMap.flow_details.pre_conditions.enabled)$ $data.asMap.flow_details.pre_conditions.enabled$ $else$ false $endif$,
    "pipeline_timeout": $if(data.asMap.flow_details.pre_conditions.pipeline_timeout)$ $data.input_data.flow_details.pre_conditions.pipeline_timeout$ $else$ 8 $endif$,
    "pipeline_details":[$pipelineListDetails(data.input_data.flow_details.pre_conditions.pipeline_details)$]
}
>>


postConditionsDetails(data)::=<<
{
"enabled": $if(data.asMap.flow_details.post_conditions.enabled)$ $data.asMap.flow_details.post_conditions.enabled$ $else$ false $endif$,
"rest_api_details": [$restAPIListDetails(data.input_data.flow_details.post_conditions.rest_api_details)$]
}
>>

archiveDataDetails(data)::=<<
{
  "enabled": $if(data.asMap.flow_details.archive_data.enabled)$true$else$false$endif$,
  "archive_files_path": "$data.asMap.flow_details.archive_data.archive_files_path$",
  "file_format": "$data.asMap.flow_details.archive_data.file_format$"
}
>>

pipelineListDetails(list)::=<<
$list:{item | $printPipelineObjectDetails(item)$}; separator = ","$
>>

printPipelineObjectDetails(object)::=<<
{
    "data_movement_id": $object.data_movement_id$,
    "data_movement_name":"$object.data_movement_name$",
    "status_code_description": "$object.status_code_description$",
    "status_code_id": $object.status_code_id$
}
>>


restAPIListDetails(list)::=<<
$list:{item | $printRestAPIObjectDetails(item)$}; separator = ","$
>>

printRestAPIObjectDetails(object)::=<<
{
    "rest_api_id": $if(object.rest_api_id)$ $object.rest_api_id$ $else$ null $endif$,
    "status_code_description": "$object.status_code_description$",
    "status_code_id": $if(object.status_code_id)$ $object.status_code_id$ $else$ null $endif$,
    "rest_api_name": "$object.rest_api_name$",
    "ordinal_position": $if(object.ordinal_position)$ $object.ordinal_position$ $else$ null $endif$,
    "payload": $if(object.payload)$ "$object.payload$" $else$ null $endif$
}
>>

resolveIngestionInfoDetails(data)::=<<
{
    "cron_type":"$data.asMap.refresh_freq.cron_type$",
	"cron_freq":"$data.asMap.refresh_freq.cron_freq$",
	"cron_timezone":"$data.asMap.refresh_freq.cron_timezone$",
	"consider_timezone":$data.asMap.refresh_freq.consider_timezone$
	$if(data.asMap.refresh_freq.cron_info)$
	,"cron_info":$resolveCronInfoDetails(data.asMap.refresh_freq.cron_info)$
	$endif$
}
>>

resolveCronInfoDetails(cronInfo)::=<<
{
"schedule_type":"$cronInfo.schedule_type$",
"start_date":"$cronInfo.start_date$"
$if(cronInfo.end_date)$
,"end_date":"$cronInfo.end_date$"
$endif$
}
>>

logTemplate_add_ingestionDetails(data)::=<<
User $data.userDetails.userId$ added an ingestion pipeline with data_movement_name '$data.asMap.data_movement_name$' where connection_type is '$data.asMap.connection_type$'
>>


// This template is used to create DataMovement API
// @created_by Dharani Darapuneni (DD1109)
// @Api_Path : "http://localhost:port/fireshots/nabu/upd/sq/restCatalog/modifyDataMovement"


modifyDataMovement(data)::=<<
{
  "input_data": $data.asString$,
  "sequential_queries": [
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "updateSource_schema",
          "validation_key": "input_data",
          "query_type":"validation"
  },
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "checkAccessForSuperAdminRole",
          "query_output_key": "checkAccess",
          "query_type":"select"
  },
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "modifyDataMovement_checks",
          "query_output_key":"checks",
          "query_type":"select",
          "post_process":["checks"]
  },
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "isDefaultPriorityOrder",
          "query_output_key": "default_priority",
          "query_type":"select"
  },
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "checkCron",
          "query_output_key":"check_cron",
          "query_type":"select"
  },
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "addArchive_modifyDataMovement",
          "query_output_key":"archive",
          "query_type":"update"
  },
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "updateSource_template",
	      "query_output_key":"data",
          "query_type":"select"
  },
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "unSupportedDataTypesMappingUpdate_template",
          "query_output_key": "DataMapping",
          "query_type":"insert"
  },
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "logTemplate_update_ingestion",
          "query_type":"log",
          "log_service":"auditLog"
  }

  ],
  "output_keys":[data]
}
>>

modifyDataMovement_checks(data)::=<<
select $ValidDataMovement(data)$, ($dataMovementAccesscheck(data)$) as "access", $true:UniqueDataMovementName(data)$
>>


addArchive_modifyDataMovement(data)::=<<
with tags as (
select  $data.input_data.data_movement_id$ as data_movement_id,coalesce(json_agg(tag),'[]') as tag from (
    select row_to_json(tags) as tag from
        (select td.tag_id,td.tag_label_id,
         ul.tag_label_name, c.tag_category_name,cd.tag_category_color
         from  nabu_ui.tag_data_movement td
         inner join nabu_ui.tag_user_labels as ul on td.tag_label_id=ul.tag_label_id
         inner join nabu_ui.tag_category as c on ul.tag_category_id=c.tag_category_id
         inner join nabu_ui.tag_category_details as cd on ul.tag_category_id=cd.tag_category_id
         where td.data_movement_id =$data.input_data.data_movement_id$ and valid_to_ts='9999-12-31') as tags
    ) as tags
),
data_movement as(
select (coalesce ((array_agg(row_to_json(aood)))[1], '[]')) as advanced_option_details
from nabu.advanced_options_object_details aood where data_movement_id =$data.input_data.data_movement_id$ and aood.valid_to_ts ='9999-12-31'
),
data_movement_details as (
select $data.input_data.data_movement_id$ as data_movement_id ,coalesce(((json_agg(row_to_json(aood)))),'[]') as option_details
from nabu.data_movement_details aood where data_movement_id =$data.input_data.data_movement_id$ and aood.valid_to_ts ='9999-12-31'
)
insert into nabu.data_movement_archive values
($data.input_data.data_movement_id$,
    (select jsonb_build_object(
               'datamovement_info',row_to_json(dm)::jsonb,
               'option_details', option_details::jsonb,
               'advanced_option_details', advanced_option_details::jsonb,
               'details', row_to_json(bcw)::jsonb,
               'tags', tag::jsonb
    )
     from data_movement aood,nabu.data_movement dm
     inner join data_movement_details dmd on dm.data_movement_id =dmd.data_movement_id
     inner join nabu.bot_configuration_workflow bcw on dm.workflow_id = bcw.workflow_id
     inner join tags t on t.data_movement_id=dm.data_movement_id
     where dm.data_movement_id =$data.input_data.data_movement_id$ ),
    null,'$data.userDetails.userId$',now());
>>

updateSource_schema(data)::=<<
{
  "\$schema": "http://json-schema.org/draft-04/schema#",
    "definitions": {
        "recurring": {
            "description": "user defined crawling frequency",
            "type": "object",
            "required": [
                "cron_type",
                "cron_freq",
                "cron_timezone",
                "cron_info",
                "consider_timezone"
            ],
            "properties": {
                "cron_type": {
                    "title": "Type of cron whether Recurring or Onetime",
                    "type": "string",
                    "enum": [
                        "recurring"
                    ]
                },
                "cron_freq": {
                    "title": "crawl frequency",
                    "type": "string"
                },
                "cron_timezone": {
                    "title": "Zone of time Country/City",
                    "type": "string"
                },
                "consider_timezone": {
                    "type": "boolean"
                },
                "cron_info": {
                    "type": "object",
                    "properties": {
                        "schedule_type": {
                            "title": "Type of schedule whether its is Daily/Weekly/Monthly/Yearly/Advanced",
                            "type": "string",
                            "enum": [
                                "Daily",
                                "weekly",
                                "Monthly",
                                "Yearly",
                                "Advanced"
                            ]
                        },
                        "start_date": {
                            "title": "Start Date",
                            "type": "string"
                        },
                        "end_date": {
                            "title": "End Date",
                            "type": "string"
                        }
                    },
                    "required": [
                        "schedule_type",
                        "start_date"
                    ]
                }
            }
        },
        "one_time": {
            "description": "user defined crawling frequency",
            "type": "object",
            "required": [
                "cron_type",
                "cron_freq",
                "cron_timezone",
                "consider_timezone"
            ],
            "properties": {
                "cron_type": {
                    "title": "Type of cron whether Recurring or Onetime",
                    "type": "string",
                    "enum": [
                        "one_time"
                    ]
                },
                "cron_freq": {
                    "title": "crawl frequency",
                    "type": "string"
                },
                "cron_timezone": {
                    "title": "Zone of time Country/City",
                    "type": "string"
                },
                "consider_timezone": {
                    "type": "boolean"
                }
            }
        }
    },
    "type": "object",
    "properties": {
        "connection_type": {
            "type": "string"
        },
        "data_movement_name": {
            "description": "The name of the Data Movement",
            "type": "string",
            "maxLength": 75,
            "minLength": 3,
            "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$"
        },
        "contact_info": {
            "description": "Contact Information",
            "type": "object",
            "properties": {
                "owner": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            },
            "required": [
                "owner",
                "description"
            ]
        },
        "source_ingestion_details": {
            "description": "Dataplace id, Schema id and other information about the each source selected",
            "type": "array",
            "items": [
                {
                    "type": "object",
                    "properties": {
                        "dataplace_name": {
                            "type": "string"
                        },
                        "dataplace_id": {
                            "type": "integer"
                        },
                        "schema_id": {
                            "type": "integer"
                        },
                        "schema_name": {
                            "type": "string"
                        },
                        "total_count": {
                            "type": "integer"
                        },
                        "ingest_all_tables_views": {
                            "type": "array",
                            "items": [
                                {
                                    "type": "string"
                                }
                            ]
                        },
                        "filters_list": {
                            "type": "array",
                            "items": [
                                {
                                    "type": "object",
                                    "properties": {
                                        "filter_type_id": {
                                            "type": "integer"
                                        },
                                        "filter_value": {
                                            "type": "array",
                                            "items": {}
                                        },
                                        "filter_type": {
                                            "type": "string"
                                        },
                                        "priority_order": {
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "filter_type_id",
                                        "filter_value",
                                        "filter_type"
                                    ]
                                }
                            ]
                        },
                        "all_tables": {
                            "type": "boolean"
                        },
                        "all_views": {
                            "type": "boolean"
                        },
                        "all_mviews": {
                            "type": "boolean"
                        }
                    },
                    "required": [
                        "dataplace_id",
                        "schema_id"
                    ]
                }
            ]
        },
        "refresh_freq": {
            "description": "Cron Expression that indicates the refresh frequency",
      "\$ref": "#/definitions/$data.input_data.refresh_freq.cron_type$"
        },
        "destination_dataplace_id": {
            "description": "unique ID of the dataplace that is selected as the destination",
            "type": "integer"
        },
        "destination_dataplace_name": {
            "type": "string"
        },
        "destination_schema_name": {
            "type": "string"
        },
        "workflow_engine_id": {
            "type": "integer"
        },
        "destination_type": {
            "type": "string"
        },
        "source_type": {
            "type": "string"
        },
        "bot_priority": {
            "type": "string"
        },
        "ingestion_table_format": {
            "type": "object",
            "properties": {
                "prefix_value": {
                    "type": "string"
                },
                "prefix": {
                    "type": "boolean"
                },
                "database_name": {
                    "type": "boolean"
                },
                "schema_name": {
                    "type": "boolean"
                }
            },
            "required": [
                "prefix_value",
                "prefix",
                "database_name",
                "schema_name"
            ]
        },
        "workflow_actions": {
            "type": "string",
            "enum": ["Only Data Movement","Data Movement and Parsing","Only Parsing"]
        },
        "flow_details": {
            "type": "object",
            "properties": {
                "email_notification": {
                    "type": "object",
                    "properties": {
                        "on_success": {
                            "type": "array",
                            "items": [
                                {
                                    "type": "string"
                                }
                            ]
                        },
                        "on_failure": {
                            "type": "array",
                            "items": [
                                {
                                    "type": "string"
                                }
                            ]
                        },
                        "email_check": {
                            "type": "boolean"
                        }
                    },
                    "required": [
                        "on_success",
                        "on_failure",
                        "email_check"
                    ]
                },
                "destination_file_format": {
                    "type": "string"
                },
                "parallel_source_connections": {
                    "type": "integer"
                },
                "retry_count": {
                    "type": "integer"
                },
                "pipeline_retry": {
                    "type": "boolean"
                },
                "pipeline_flow_timeout": {
                    "type": "integer"
                },
                "schema_drift": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean"
                        },
                        "email_ids": {
                            "type": "array",
                            "items": {}
                        },
                        "advanced_options_sub_type_id": {
                            "type": "integer"
                        },
                        "advanced_options_sub_type": {
                            "type": "string"
                        },
                        "config": {
                            "type": "object",
                            "properties": {
                                "suffix": {
                                    "type": "string"
                                },
                                "timestamp": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "suffix",
                                "timestamp"
                            ]
                        }
                    },
                    "required": [
                        "enabled",
                        "email_ids",
                        "config"
                    ]
                },
                "inconsistent_data_types": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "source_datatype_name": {
                                "type": "string"
                            },
                            "inconsistent_datatype": {
                                "type": "string"
                            },
                            "source_stg_function": {
                                "type": "string"
                            },
                            "intermediate_stg_function": {
                                "type": "string"
                            },
                            "destination_datatype_name": {
                                "type": "string"
                            },
                            "option_number": {
                                "type": "integer"
                            }
                        }
                    },
                    "required": [
                        "source_datatype_name",
                        "inconsistent_datatype",
                        "source_stg_function",
                        "intermediate_stg_function",
                        "destination_datatype_name",
                        "option_number"
                    ]
                },
                "unsupported_data_types": {
                    "type": "object",
                    "properties": {
                        "null": {
                            "type": "array",
                            "items": {}
                        },
                        "ignore": {
                            "type": "array",
                            "items": {}
                        },
                        "asis": {
                            "type": "array",
                            "items": {}
                        },
                        "customtext": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "source_datatype_name": {
                                        "type": "string"
                                    },
                                    "target_value": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "source_datatype_name",
                                    "target_value"
                                ]
                            }
                        }
                    },
                    "required": [
                        "null",
                        "ignore",
                        "asis",
                        "customtext"
                    ]
                },
                "ignore_data_types": {
                    "type": "array",
                    "items": {}
                },
                "pre_conditions": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean"
                        },
                        "pipeline_timeout": {
                            "type": "integer"
                        },
                        "pipeline_details": {
                            "type": "array",
                            "items": [
                                {
                                    "type": "object",
                                    "properties": {
                                        "data_movement_id": {
                                            "type": "integer"
                                        },
                                        "data_movement_name": {
                                               "type": "string",
                                               "maxLength": 75,
                                               "minLength": 3,
                                               "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$"
                                        },
                                        "status_code_description": {
                                            "type": "string"
                                        },
                                        "status_code_id": {
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "data_movement_id",
                                        "status_code_description"
                                    ]
                                }
                            ]
                        }
                    },
                    "required": [
                        "enabled",
                        "pipeline_timeout",
                        "pipeline_details"
                    ]
                },
                "post_conditions": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "boolean"
                    },
                    "rest_api_details": {
                      "type": "array",
                      "items":
                        {
                          "type": "object",
                          "properties": {
                            "rest_api_id": {
                              "type": "integer"
                            },
                            "rest_api_name": {
                               "type": "string",
                            "maxLength": 75
                            },
                            "status_code_description": {
                              "type": "string"
                            },
                            "status_code_id": {
                              "type": "integer"
                            },
                            "ordinal_position": {
                              "type": "integer"
                            },
                            "rest_api_body": {
                               "type": "string"
                            }
                          }
                        }
                    }
                  },
                  "required": [
                    "enabled",
                    "rest_api_details"
                  ]
                },
				"spark_config": {
					"type": "object",
					"properties": {
						"spark_default_command_options": {
							"type": "string"
						},
						"spark_bots_token_command_options": {
							"type": "string"
						},
						"spark_kerberos_command_options": {
							"type": "string"
						}
					},
					"required": [
						"spark_default_command_options",
						"spark_bots_token_command_options"
					]
				},
				"git_info": {
					"type": "object",
					"properties": {
						"git_url": {
							"type": "string"
						},
						"project_name": {
							"type": "string"
						},
						"git_branch_or_tag": {
							"type": "string"
						},
						"git_file_path": {
							"type": "string"
						}
					},
					"required": [
						"git_url",
						"project_name",
						"git_branch_or_tag",
						"git_file_path"
					]
				},
                "skip_verification": {
                    "type": "boolean"
                },
                "verification_threshold": {
                    "type": "string"
                },
				"run_only_file_changes": {
					"type": "string",
					"enum":["true","false"]
				},
                "ignore_null_tables":{
                     "type": "string",
                     "enum":["true","false"]
                }
            },
            "required": [
                "email_notification",
                "destination_file_format",
                "pipeline_retry",
                "schema_drift",
                "inconsistent_data_types",
                "unsupported_data_types",
                "ignore_data_types",
                "pre_conditions",
                "skip_verification",
                "verification_threshold"
            ]
        },
        "destination_schema_id": {
            "description": "unique ID of the schema that is selected as the destination",
            "type": "integer"
        },
        "tags": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "tag_category_name": {
                        "description": "The name of the tag category",
                        "type": "string"
                    },
                    "tag_category_id": {
                        "description": "The id of the tag category",
                        "type": "integer",
                        "minimum": 1
                    },
                    "tag_label_id": {
                        "description": "The label id of the tag category",
                        "type": "integer",
                        "minimum": 1
                    },
                    "tag_value": {
                        "type": "string"
                    }
                },
                "required": [
                    "tag_category_id",
                    "tag_label_id"
                ]
            }
        },
        "data_movement_id": {
            "description": "The unique ID of the Data Movement",
            "type": "integer"
        },
        "contact_info.description": {
            "type": "string"
        },
        "advanced_table_options": {
                  "type": "object",
                  "properties": {
                    "incremental_load": {
                        "type": "object",
                        "properties": {
                          "where_clause": {
                            "type": "string"
                          },
                        "condition_values": {
                        "type": "array",
                        "items": [
                          {
                            "type": "object",
                            "properties": {
                              "place_holder": {
                                "type": "string"
                              },
                              "default_value": {
                                "type": "integer"
                              },
                              "max_value": {
                                "type": "boolean"
                              }
                            },
                            "required": [
                              "place_holder",
                              "default_value",
                              "max_value"
                            ]
                          }
                        ]
                      }
                    },
                    "required": [
                      "where_clause",
                      "condition_values"
                    ]
                  },
                    "columns_options": {
                      "type": "object",
                      "properties": {
                        "modified_columns": {
                          "type": "array",
                          "items": [
                            {
                              "type": "object",
                              "properties": {
                                "column_id": {
                                  "type": "integer"
                                },
                                "column_info": {
                                  "type": "object",
                                  "properties": {
                                    "source_column_name": {
                                      "type": "string"
                                    },
                                    "source_column_type": {
                                      "type": "string"
                                    },
                                    "destination_column_name": {
                                      "type": "string"
                                    },
                                    "destination_column_type": {
                                      "type": "string"
                                    },
                                    "source_casting_exp": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "source_column_name",
                                    "source_column_type",
                                    "destination_column_name",
                                    "destination_column_type",
                                    "source_casting_exp"
                                  ]
                                }
                              },
                              "required": [
                                "column_id",
                                "column_info"
                              ]
                            }
                          ]
                        },
                        "excluded_column_ids": {
                          "type": "array",
                          "items": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "integer"
                            }
                          ]
                        },
                        "virtual_column": {
                          "type": "array",
                          "items": [
                            {
                              "type": "object",
                              "properties": {
                                "column_name": {
                                  "type": "string"
                                },
                                "column_type": {
                                  "type": "string"
                                },
                                "spark_sql_expression": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "column_name",
                                "column_type",
                                "spark_sql_expression"
                              ]
                            }
                          ]
                        }
                      },
                      "required": [
                        "modified_columns",
                        "excluded_column_ids",
                        "virtual_column"
                      ]
                    },
                    "reorder_columns": {
                      "type": "array",
                      "items": [
                        {
                          "type": "object",
                          "properties": {
                            "column_name": {
                              "type": "string"
                            },
                            "column_id": {
                              "type": "integer"
                            },
                            "is_virtual": {
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "column_name",
                            "column_id",
                            "is_virtual"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "column_name": {
                              "type": "string"
                            },
                            "column_id": {
                              "type": "integer"
                            },
                            "is_virtual": {
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "column_name",
                            "column_id",
                            "is_virtual"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "column_name": {
                              "type": "string"
                            },
                            "column_id": {
                              "type": "integer"
                            },
                            "is_virtual": {
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "column_name",
                            "column_id",
                            "is_virtual"
                          ]
                        }
                      ]
                    },
                    "remove_duplicates": {
                      "type": "object",
                      "properties": {
                        "key_columns": {
                          "type": "array",
                          "items": [
                            {
                              "type": "object",
                              "properties": {
                                "column_name": {
                                  "type": "string"
                                },
                                "renamed_column": {
                                  "type": "string"
                                },
                                "column_id": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "column_name",
                                "renamed_column",
                                "column_id"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "column_name": {
                                  "type": "string"
                                },
                                "renamed_column": {
                                  "type": "string"
                                },
                                "column_id": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "column_name",
                                "renamed_column",
                                "column_id"
                              ]
                            }
                          ]
                        },
                        "sort_columns": {
                          "type": "array",
                          "items": [
                            {
                              "type": "object",
                              "properties": {
                                "column_name": {
                                  "type": "string"
                                },
                                "renamed_column": {
                                  "type": "string"
                                },
                                "column_id": {
                                  "type": "string"
                                },
                                "sort_by": {
                                  "type": "string"
                                },
                                "sort_null_values": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "column_name",
                                "renamed_column",
                                "column_id",
                                "sort_by",
                                "sort_null_values"
                              ]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "column_name": {
                                  "type": "string"
                                },
                                "renamed_column": {
                                  "type": "string"
                                },
                                "column_id": {
                                  "type": "string"
                                },
                                "sort_by": {
                                  "type": "string"
                                },
                                "sort_null_values": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "column_name",
                                "renamed_column",
                                "column_id",
                                "sort_by",
                                "sort_null_values"
                              ]
                            }
                          ]
                        }
                      },
                      "required": [
                        "key_columns",
                        "sort_columns"
                      ]
                    },
                    "sort_by_columns": {
                      "type": "array",
                      "items": [
                        {
                          "type": "object",
                          "properties": {
                            "column_name": {
                              "type": "string"
                            },
                            "renamed_column": {
                              "type": "string"
                            },
                            "order_by": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "column_name",
                            "renamed_column",
                            "order_by"
                          ]
                        }
                      ]
                    },
                    "table_partitions": {
                      "type": "array",
                      "items": [
                        {
                          "type": "object",
                          "properties": {
                            "column_id": {
                              "type": "string"
                            },
                            "column_name": {
                              "type": "string"
                            },
                            "renamed_column": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "column_id",
                            "column_name",
                            "renamed_column"
                          ]
                        }
                      ]
                    },
                    "new_table_name": {
                      "type": "string"
                    },
                    "parallel_ingestion": {
                      "type": "object",
                      "properties": {
                        "enable": {
                          "type": "boolean"
                        },
                        "max_connections": {
                          "type": "integer"
                        }
                      },
                      "required": [
                        "enable",
                        "max_connections"
                      ]
                    },
                    "CDC": {
                      "type": "object",
                      "properties": {
                        "CDC_type": {
                          "type": "string"
                        },
                        "columns_ids": {
                          "type": "array",
                          "items": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "integer"
                            },
                            {
                              "type": "integer"
                            }
                          ]
                        },
                        "hash_type": {
                          "type": "string"
                        },
                        "add_audit_columns": {
                          "type": "boolean"
                        },
                        "audit_columns": {
                          "type": "object",
                          "properties": {
                            "start_date_column_name": {
                              "type": "string"
                            },
                            "end_date_column_name": {
                              "type": "string"
                            },
                            "flag_column_name": {
                              "type": "string"
                            },
                            "process_id_column_name": {
                              "type": "string"
                            },
                            "prev_process_id_column_name": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "start_date_column_name",
                            "end_date_column_name",
                            "flag_column_name",
                            "process_id_column_name",
                            "prev_process_id_column_name"
                          ]
                        },
                        "create_view": {
                          "type": "boolean"
                        },
                        "view_name": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "CDC_type",
                        "columns_ids",
                        "hash_type",
                        "add_audit_columns",
                        "audit_columns",
                        "create_view",
                        "view_name"
                      ]
                    },
                    "ingest_using_query": {
                      "type": "object",
                      "properties": {
                        "enable": {
                          "type": "boolean"
                        },
                        "sql_query": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "enable",
                        "sql_query"
                      ]
                    },
                    "ingestion_mode": {
                      "type": "object",
                      "properties": {
                        "enable": {
                          "type": "boolean"
                        },
                        "mode": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "enable",
                        "mode"
                      ]
                    }
                  },
                  "required": [
                    "incremental_load",
                    "columns_options",
                    "reorder_columns",
                    "remove_duplicates",
                    "sort_by_columns",
                    "table_partitions",
                    "new_table_name",
                    "parallel_ingestion",
                    "CDC",
                    "ingest_using_query",
                    "ingestion_mode"
                  ]
                }
              },
		"ingestion_connection_type": {
			"type": "string",
			"enum":["delimited_files"]
		}
    },
    "required": [
        "connection_type",
        "data_movement_name",
        "contact_info",
        "source_ingestion_details",
        "refresh_freq",
        "destination_dataplace_id",
        "workflow_engine_id",
        "destination_type",
        "source_type",
        "destination_schema_id",
        "tags",
        "compute_engine_id",
        "data_movement_id"
    ]
}
>>

checkAccessLevel(data)::=<<
$if(first(data.checkAccess).check_access)$
with module_access AS (
        SELECT mam.role_id,mam.access_id,env_group_name,condition_type_id,unnest(string_to_array(substring(VALUES, 3, length (VALUES) - 4), '","')) AS matched_pipeline_name
        FROM nabu_ui.env_group_role_info egri
        INNER JOIN nabu_ui.module_access_mapping mam ON egri.role_id = mam.role_id
        AND env_group_name in ('$data.userDetails.userId$'$if(data.userDetails.groups)$,$resolveListString(data.userDetails.groups)$$endif$)
        AND (condition_type_id = 7 OR condition_type_id = 8 OR condition_type_id = 9)
        GROUP BY 1,2,3,4,5
	)
	,pipeline_access AS (
	    SELECT  access_id,role_id,pipelineid FROM (
            SELECT access_id,role_id
                ,CASE WHEN condition_type_id = 9
                        THEN CASE WHEN tag_label_id = cast(matched_pipeline_name AS INTEGER)
                             THEN tdm.data_movement_id
                         END
                  END AS pipelineid
            FROM module_access,nabu_ui.tag_data_movement tdm
            WHERE tdm.valid_to_ts = '9999-12-31'
            GROUP BY 1,2,3

		UNION ALL

		SELECT access_id,role_id
			,CASE WHEN condition_type_id = 7
					THEN CASE WHEN data_movement_name = matched_pipeline_name
								THEN dmp.data_movement_id
						END
				  WHEN condition_type_id = 8
					 THEN CASE WHEN data_movement_name ~* matched_pipeline_name
								THEN dmp.data_movement_id
						END
			 END AS datap_id
		FROM module_access,nabu.data_movement_physical dmp
		WHERE dmp.valid_to_ts = '9999-12-31'
		GROUP BY 1,2,3

		UNION ALL

		SELECT ui_access_type_id AS access_id,0 as role_id,data_movement_id as pipelineid
		FROM nabu_ui.ui_module_access_lookup umal,nabu.data_movement_physical dmp4
		WHERE crt_by ~* '$data.userDetails.userId$'
		AND dmp4.valid_to_ts = '9999-12-31'
		AND ui_module_name = 'Pipelines'
		GROUP BY 1,2,3
	) b
	GROUP BY 1,2,3
	)
	select distinct case when $data.input_data.data_movement_id$ in (select distinct pipelineid from pipeline_access
    where pipelineid is not null and access_id =2) then true else false
    end as grant
$else$
    select true as grant
$endif$
>>

checkCron(data)::=<<
select case when '$resolveIngestionInfoDataMovement(data)$'::json::text = (select additional_properties  from nabu.job_schedule_details jsd where data_movement_id =$data.input_data.data_movement_id$ and valid_to_ts ='9999-12-31' and job_type_id=1 )::json::text then true else false end as cron_flag
>>

resolveIngestionInfoDataMovement(data)::=<<
{
    "cron_type":"$data.asMap.refresh_freq.cron_type$",
	"cron_freq":"$data.asMap.refresh_freq.cron_freq$",
	"cron_timezone":"$data.asMap.refresh_freq.cron_timezone$",
	"consider_timezone":$data.asMap.refresh_freq.consider_timezone$
	$if(data.asMap.refresh_freq.cron_info)$
	,"cron_info":$resolveCronInfo(data.asMap.refresh_freq.cron_info)$
	$endif$
}
>>

updateSource_template(data)::=<<
with workflow_id as (
 select workflow_id from nabu.bot_configuration_workflow a inner join nabu.compute_engine b on a.engine_mapping_id  = b.engine_mapping_id
 where  source_type ='$data.input_data.source_type$' and destination_type ='$data.input_data.destination_type$' and
 compute_engine_id = '$data.input_data.compute_engine_id$'
 ),
data_movement as(
update nabu.data_movement set
data_movement_name='$data.asMap.data_movement_name$',
contact_info=(modifyContactJson(data.asMap.contact_info)$),
data_movement_additional_info= E'$advancedOptions(data)$',
mod_by='$data.userDetails.userId$',
mod_ts=current_timestamp,
refresh_freq='$data.asMap.refresh_freq.cron_freq$',
workflow_engine_id=$data.asMap.workflow_engine_id$,
workflow_id=(select workflow_id from workflow_id),
compute_engine_id=$data.asMap.compute_engine_id$,
priority_order=$if(first(data.default_priority).flag)$null$else$$data.asMap.bot_priority$$endif$
where data_movement_id=$data.asMap.data_movement_id$
),
update_data_movement_details as(
update nabu.data_movement_details
set valid_to_ts = now(),
crt_by='$data.userDetails.userId$',
crt_ts=current_timestamp
where data_movement_id=$data.asMap.data_movement_id$
),
update_inconsistent_data_types as(
update nabu.user_defined_trans_for_inconsistent_datatype
set valid_to = now()
where data_movement_id=$data.asMap.data_movement_id$ and valid_to='9999-12-31'
),
update_unsupported_mappings as(
update nabu.user_defined_trans_for_unsupported_datatype
set valid_to_ts = now()
where data_movement_id=$data.asMap.data_movement_id$ and valid_to_ts='9999-12-31'
)
$if(data.input_data.flow_details.inconsistent_data_types)$$inconsistentListUpd(data)$$endif$
,update_job_schedule_details_ts as(
update nabu.job_schedule_details set valid_to_ts = current_timestamp where data_movement_id = $data.input_data.data_movement_id$ and valid_to_ts='9999-12-31' and job_type_id = (select job_type_id from nabu.job_type_lookup where job_type ='ingestion')
returning job_schedule_id
),
update_job_schedule_details as(
$if(first(data.check_cron).cron_flag)$
insert into nabu.job_schedule_details(job_schedule_id,job_type_id, data_movement_id,refresh_frequency,additional_properties, valid_from_ts, valid_to_ts, cru_by, cru_ts) values
((select * from update_job_schedule_details_ts ),(select job_type_id from nabu.job_type_lookup where job_type ='ingestion'),$data.input_data.data_movement_id$,'$data.asMap.refresh_freq.cron_freq$','$resolveIngestionInfoDataMovement(data)$',
current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp)
$else$
insert into nabu.job_schedule_details(job_type_id, data_movement_id,refresh_frequency,additional_properties, valid_from_ts, valid_to_ts, cru_by, cru_ts) values
((select job_type_id from nabu.job_type_lookup where job_type ='ingestion'),$data.input_data.data_movement_id$,'$data.asMap.refresh_freq.cron_freq$','$resolveIngestionInfoDataMovement(data)$',
current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp)
$endif$
)
,update_advanced_options_table_ts as (
UPDATE nabu.advanced_options_object_details
SET valid_to_ts = now()
where valid_to_ts = '9999-12-31'
and data_movement_id = $data.input_data.data_movement_id$
)
$if(data.input_data.advance_table_options)$
,update_advanced_options_table as (
INSERT INTO nabu.advanced_options_object_details
(object_id, data_movement_id, advance_option_details, valid_from_ts, valid_to_ts, cru_ts, cru_by) VALUES
$data.input_data.advance_table_options:{ table | ($table.table_id$,$data.input_data.data_movement_id$ ,'{"advanced_table_options":$resolveAdvancedOptionsConditions(table)$,"advanced_option_flags":$resolveAdvancedOptionsFlags(table)$\}', current_timestamp, '9999-12-31 00:00:00.000', current_timestamp, '$data.userDetails.userId$')};separator=","$
)
$endif$
,insert_data_movement as (
insert into nabu.data_movement_details
(data_movement_id,source_dataplace_id,source_schema_id,destination_dataplace_id,destination_schema_id,
ingest_all_tables_views,valid_from_ts,valid_to_ts,crt_by,crt_ts,filter_type_id,filter_rule,priority_order)
values
$data.asMap.source_ingestion_details:forEachDataMovementUpdateInsert(data);separator=","$
)
select 'pipeline updated. ' as message
>>

forEachDataMovementUpdateInsert(source,data)::=<<
$source.filters_list:forEachFilterUpdDataMovement(source,data);separator=","$
>>

forEachFilterUpdDataMovement(filter,source,data)::=<<
($data.asMap.data_movement_id$,$source.dataplace_id$,'$source.schema_id$',$data.asMap.destination_dataplace_id$,'$data.asMap.destination_schema_id$',
'[$source.ingest_all_tables_views:resolveJsonArrayString();separator=","$]',
current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp,'$filter.filter_type_id$','[$filter.filter_value:resolveFilter(filter);separator=","$]',$filter.priority_order$)
>>

inconsistentListUpd(data)::=<<
,inconsistentDataTypes as(
insert into nabu.user_defined_trans_for_inconsistent_datatype values $data.asMap.flow_details.inconsistent_data_types:forEachInconsistentUpd(data);separator=","$
)
>>



forEachInconsistentUpd(item, data)::=<<
($data.input_data.data_movement_id$, '$data.asMap.source_type$',LOWER('$data.asMap.flow_details.destination_file_format$'),
 '$data.asMap.destination_type$',$getComputeEngineId(data.asMap.compute_engine_id)$,'$item.inconsistent_datatype$','$item.source_stg_function$','$item.intermediate_stg_function$',
 '$item.destination_datatype_name$',$item.option_number$, current_timestamp,
 '9999-12-31','$data.userDetails.userId$',current_timestamp)
>>


unSupportedDataTypesMappingUpdate_template(data)::=<<
$if(data.asMap.flow_details.unsupported_data_types.null)$
insert into nabu.user_defined_trans_for_unsupported_datatype(data_movement_id, source_type,intermediate_type,destination_type,engine_id,source_datatype_name,advanced_options_sub_type_id,valid_from,valid_to_ts, cru_by, cru_ts)
 values $data.asMap.flow_details.unsupported_data_types.null:foreachUnsupportedDataTypesMappingNullUpdate(data);separator=","$;
$endif$
$if(data.asMap.flow_details.unsupported_data_types.asis)$
insert into nabu.user_defined_trans_for_unsupported_datatype(data_movement_id, source_type,intermediate_type,destination_type,engine_id,source_datatype_name,advanced_options_sub_type_id,valid_from,valid_to_ts, cru_by, cru_ts) values $data.asMap.flow_details.unsupported_data_types.asis:foreachUnsupportedDataTypesMappingAsisUpdate(data);separator=","$;
$endif$
$if(data.asMap.flow_details.unsupported_data_types.ignore)$
insert into nabu.user_defined_trans_for_unsupported_datatype(data_movement_id, source_type,intermediate_type,destination_type,engine_id,source_datatype_name,advanced_options_sub_type_id,valid_from,valid_to_ts, cru_by, cru_ts) values $data.asMap.flow_details.unsupported_data_types.ignore:foreachUnsupportedDataTypesMappingIgnoreUpdate(data);separator=","$;
$endif$
$if(data.asMap.flow_details.unsupported_data_types.customtext)$
insert into nabu.user_defined_trans_for_unsupported_datatype(data_movement_id, source_type,intermediate_type,destination_type,engine_id,source_datatype_name,advanced_options_sub_type_id,valid_from,valid_to_ts, cru_by, cru_ts, additional_info) values $data.asMap.flow_details.unsupported_data_types.customtext:foreachUnsupportedDataTypesMappingCustomtextUpdate(data);separator=","$;
$endif$
>>


foreachUnsupportedDataTypesMappingNullUpdate(item, data)::=<<
($data.input_data.data_movement_id$, '$data.asMap.source_type$',LOWER('$data.asMap.flow_details.destination_file_format$'),
 '$data.asMap.destination_type$',$getComputeEngineId(data.asMap.compute_engine_id)$,'$item$',15,current_timestamp,
 '9999-12-31','$data.userDetails.userId$',current_timestamp)
>>


foreachUnsupportedDataTypesMappingAsisUpdate(item, data)::=<<
($data.input_data.data_movement_id$, '$data.asMap.source_type$',LOWER('$data.asMap.flow_details.destination_file_format$'),
 '$data.asMap.destination_type$',$getComputeEngineId(data.asMap.compute_engine_id)$,'$item$',14,current_timestamp,
 '9999-12-31','$data.userDetails.userId$',current_timestamp)
>>


foreachUnsupportedDataTypesMappingIgnoreUpdate(item, data)::=<<
($data.input_data.data_movement_id$, '$data.asMap.source_type$',LOWER('$data.asMap.flow_details.destination_file_format$'),
 '$data.asMap.destination_type$',$getComputeEngineId(data.asMap.compute_engine_id)$,'$item$',16,current_timestamp,
 '9999-12-31','$data.userDetails.userId$',current_timestamp)
>>


foreachUnsupportedDataTypesMappingCustomtextUpdate(item, data)::=<<
($data.input_data.data_movement_id$, '$data.asMap.source_type$',LOWER('$data.asMap.flow_details.destination_file_format$'),
 '$data.asMap.destination_type$',$getComputeEngineId(data.asMap.compute_engine_id)$,'$item.source_datatype_name$',17,current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp,'$resolveUnsupportedCustomText(item)$')
>>

logTemplate_update_ingestion(data)::=<<
User $data.userDetails.userId$ modified an ingestion pipeline with data_movement_id $data.asMap.data_movement_id$ and data_movement_name '$data.asMap.data_movement_name$' where connection_type is '$data.asMap.connection_type$'
>>


// This template used to start the curation pipeline by publishing a message to kafka
// @created_by Murthy (VK1708)
// @modified_by Kusuri Dheeraj Kumar (KD2106)
// @Api_Path : "http://localhost:port/fireshots/nabu/upd/sq/restCatalog/onDemandCuration"

onDemandCuration(data)::=<<
{
  "input_data": $data.asString$,
  "sequential_queries": [
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "runCurationPipelineNow_schema",
      "validation_key":"input_data",
      "query_type":"validation"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "checkAccessForSuperAdminRole",
      "query_output_key": "checkAccess",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "onDemandcurationPipeline_checks",
      "query_output_key":"checks",
      "query_type":"select",
      "processLogic": {
        "processClass": "com.modak.fireshots.processors.impl.ChecksProcessor",
        "processType":"checks"
      }
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "emptyTemplate",
      "query_output_key": "message_uuid",
      "query_type": "uuid"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "emptyTemplate",
      "query_output_key": "batch_id",
      "query_type": "uniqueId"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "insertJobScheduleDetails_run",
      "query_output_key": "jobScheduleDetails",
      "query_type": "select"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "getWorkspacePipelineDetailsCuration",
      "query_output_key": "workspacePipelineDetails",
      "query_type": "select"
    },
    {
      "query_template_group": "$data.STPath$/manageWorkspace.stg",
      "query_template_name": "setIds",
      "query_output_key": "getId",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.STPath$/manageWorkspace.stg",
      "query_template_name": "bot_topic_DBOpsBot",
      "query_output_key": "DBOpsBot",
      "query_type": "select"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "preInsert_initFlowStatus",
      "query_output_key": "init_status",
      "query_type":"update"
    },
$if(useRabbitMQ.(true))$
    {
      "query_template_group": "$data.STPath$/manageWorkspace.stg",
      "query_template_name": "getenv_temp",
      "processLogic": {
        "processClass": "com.modak.fireshots.processors.impl.EnvProcessor",
        "processType": "map"
      },
      "query_output_key": "properties",
      "query_type": "json"
    },
    {
      "query_template_group": "$data.STPath$/manageWorkspace.stg",
      "query_template_name": "information_msg",
      "query_output_key": "message_map",
      "query_type": "json"
    },
    {
      "query_template_group": "$data.STPath$/manageWorkspace.stg",
      "query_template_name": "getRabbitMqDetails",
      "query_output_key": "rabbitMqDetails",
      "query_type":"jsonArray"
    },
    {
      "query_template_group": "$data.STPath$/manageWorkspace.stg",
      "query_template_name": "emptyTemplate",
      "query_output_key": "status",
      "service_name": "rabbitmqService",
      "query_type": "publish"
    },
$else$
    {
      "query_template_group": "$data.STPath$/manageWorkspace.stg",
      "query_template_name": "getKafkaConfigs",
      "query_output_key": "kafka_configs",
      "query_type": "select",
      "result_set_to_json": "Y"
    },
    {
      "query_template_group": "$data.STPath$/manageWorkspace.stg",
      "query_template_name": "getKafkaDetails",
      "query_output_key": "kafkaDetails",
      "query_type": "select"
    },
    {
      "query_template_group": "$data.STPath$/manageWorkspace.stg",
      "query_template_name": "information_msg",
      "processLogic":{
        "processClass":"com.modak.fireshots.processors.impl.KafkaProducerProcessor",
        "process_key":"status"
      },
      "query_output_key": "status",
      "query_type": "json"
    },
$endif$
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "postInsert_initFlowStatus",
      "query_output_key": "end_status",
      "query_type":"update"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "postInsert_FlowStatus",
      "query_output_key": "flow_status",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.STPath$/manageWorkspace.stg",
      "query_template_name": "getBatchIdAsString",
      "query_output_key": "batch_id",
      "query_type": "string"
    }
  ],
  "output_keys":["flow_status","batch_id"]
}
>>

runCurationPipelineNow_schema(data)::=<<
{
    "\$schema": "http://json-schema.org/draft-04/schema#",
    "title": "Start pipeline run",
    "type": "object",
	  "required": [
  		  "workspace_pipeline_id"
	  ],
    "properties":{
        "workspace_pipeline_id": {
            "description": "Unique identifier of a Workspace Pipeline",
            "type": "integer",
		    "minimum": 1
        }
    }
}
>>


insertJobScheduleDetails_run(data)::=<<
with update_job_schedule_details_ts as (
    update nabu.job_schedule_details
    set valid_to_ts = current_timestamp
    where data_movement_id = $data.input_data.workspace_pipeline_id$
    and valid_to_ts = '9999-12-31'
    and job_type_id in (select job_type_id from nabu.job_type_lookup where job_type ='curation')
)
INSERT INTO nabu.job_schedule_details(job_type_id, data_movement_id,dataplace_id,datastore_id,object_id,refresh_frequency,
additional_properties, valid_from_ts, valid_to_ts, cru_by, cru_ts) VALUES
((select job_type_id from nabu.job_type_lookup where job_type ='curation'),$data.input_data.workspace_pipeline_id$,null,null,null,
null,null,current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp) returning job_schedule_id
>>


//process_id = CAST(to_char(current_timestamp, 'YYYYMMDDHH24MI') AS numeric(18,0))::text
//process_id = process_id
//batch_id = bots will provide the method (code)
//object_id = $process_id$$workspace_pipeline_id$
getWorkspacePipelineDetailsCuration(data)::=<<
with cte as(
    select
    dm.data_movement_id, wp.compute_engine_id,wp.workflow_id,workflow_name,
    jsd.job_schedule_id as job_schedule_id,
    'curation_'||to_char(current_timestamp, 'YYYYMMDD') as batch_name
    from nabu.workspace_pipeline wp
    inner join nabu.data_movement dm on dm.data_movement_id = wp.workspace_pipeline_id
    inner join nabu.job_schedule_details jsd
    on jsd.data_movement_id = dm.data_movement_id and dm.valid_to_ts = '9999-12-31'
    and jsd.job_type_id = (select job_type_id from nabu.job_type_lookup jtl where jtl.job_type = 'curation')
    inner join nabu.bot_configuration_workflow c on c.workflow_id = wp.workflow_id
    where wp.workspace_pipeline_id = $data.input_data.workspace_pipeline_id$
    and job_schedule_id=$first(data.jobScheduleDetails).job_schedule_id$
)
select substring(json_object_agg(bot_type,workflow_route_bot_topic)::text,2,length(json_object_agg(bot_type,workflow_route_bot_topic)::text)-2) as workflow_route_bot_topic_details,workflow_engine_id,
data_movement_id,compute_engine_id,batch_name,
workflow_id,workflow_name,
job_schedule_id,
bot_topic_prefix
from (
    select c.bot_type,a.data_movement_id,wp.workflow_engine_id,batch_name,wp.workflow_id,bcw.workflow_name,
    job_schedule_id,d.compute_engine_id,
    bot_topic as workflow_route_bot_topic,
    b.additional_info->\>'bot_topic_prefix' as bot_topic_prefix
    from nabu.workspace_pipeline wp
    inner join nabu.data_movement_physical a on a.data_movement_id = wp.workspace_pipeline_id
    inner join nabu.workflow_engine_bots_mapping b on wp.workflow_engine_id = b.workflow_engine_id
    inner join nabu.bot_configuration_workflow bcw on bcw.workflow_id=wp.workflow_id
    and coalesce(b.bot_priority,0)=coalesce (a.priority_order,0 )
    inner join nabu.bot_type c on c.bot_type_id = b.bot_type_id
    inner join cte d on d.data_movement_id = a.data_movement_id
    where b.dataplace_id is null and a.valid_to_ts = '9999-12-31'
    group by 1,2,3,4,5,6,7,8,9,10
)a
group by data_movement_id,compute_engine_id,workflow_engine_id,batch_name,bot_topic_prefix,job_schedule_id,workflow_id ,workflow_name
>>

setIds(data)::=<<
select
cast((extract(epoch from now())*1000) as bigint)::text as initial_ts,
cast((extract(epoch from now())*100) as bigint)::text||$first(data.jobScheduleDetails).job_schedule_id$||1 as flow_id, --flow_id is used for init_flow_id
cast((extract(epoch from now())*1000) as bigint)::text||$data.input_data.workspace_pipeline_id$ as process_id,
$data.batch_id$ as batch_id,
'$first(data.workspacePipelineDetails).bot_topic_prefix$' as bot_topic_prefix,
'curation_'||to_char(current_timestamp, 'YYYYMMDD') as batch_name,
'modak' as environment,
$first(data.workspacePipelineDetails).workflow_id$ as workflow_id,
'$first(data.workspacePipelineDetails).workflow_name$' as workflow_name,
$first(data.workspacePipelineDetails).workflow_engine_id$ as workflow_engine_id,
$data.input_data.workspace_pipeline_id$ as pipeline_id,
$first(data.workspacePipelineDetails).compute_engine_id$ as compute_engine_id,
(select job_type_id from nabu.job_type_lookup where job_type ='curation') as job_type_id,
$first(data.jobScheduleDetails).job_schedule_id$ as job_schedule_id,
(select cru_by from nabu.job_schedule_details where job_schedule_id = $first(data.jobScheduleDetails).job_schedule_id$) as job_scheduled_user_id
>>

bot_topic_DBOpsBot(data)::=<<
with topic_details as(
    select c.bot_type,wp.workflow_engine_id,a.data_movement_id,
    bot_topic as workflow_route_bot_topic,
    b.additional_info->\>'bot_topic_prefix' as bot_topic_prefix
    from nabu.workspace_pipeline wp
    inner join nabu.data_movement_physical a on a.data_movement_id = wp.workspace_pipeline_id
    inner join nabu.workflow_engine_bots_mapping b on wp.workflow_engine_id = b.workflow_engine_id
    and coalesce(b.bot_priority,0)=coalesce (a.priority_order,0 )
    inner join nabu.bot_type c on c.bot_type_id = b.bot_type_id
    where a.valid_to_ts = '9999-12-31'
    and wp.workspace_pipeline_id  = $data.input_data.workspace_pipeline_id$
    group by 1,2,3,4,5
)
select workflow_route_bot_topic from topic_details where bot_type = 'DBOpsBot'
>>

getKafkaConfigs(data)::=<<
select producer_config,consumer_config
from nabu.workflow_engine we
inner join nabu.kafka k on we.kafka_id=k.kafka_id where we.workflow_engine_id=$first(data.workspacePipelineDetails).workflow_engine_id$;
>>

//Incase Kafka is of Kerberos mode, we need to remove escape characters(keyTab key) present in the producer configs
getKafkaDetails(data)::=<<
select workflow_engine_id,workflow_engine_name,we.kafka_id,kafka_brokers,
zookeeper_urls,private_key_path,public_key_path as public_key_file_path,
'$renderJsonObject(first(data.kafka_configs).producer_config)$'::jsonb as producer_config,
'$renderJsonObject(first(data.kafka_configs).consumer_config)$'::jsonb as consumer_config
from nabu.workflow_engine we
inner join nabu.kafka k on we.kafka_id=k.kafka_id where we.workflow_engine_id=$first(data.workspacePipelineDetails).workflow_engine_id$;
>>

renderJsonObject(data)::=<<
{
$data.keys:{k | "$k$":"$data.(k)$"}; separator=","$
}
>>

preInsert_initFlowStatus(data)::=<<
INSERT INTO nabu.init_flow_status
(init_flow_id, batch_id, job_schedule_id, process_id, compute_engine_id, data_movement_id, datastore_id, error_msg, error_stack, job_type_id, status_code_id, flow_ts, additional_info)
VALUES
($first(data.getId).flow_id$, $data.batch_id$, $first(data.jobScheduleDetails).job_schedule_id$, $first(data.getId).process_id$,
$first(data.getId).compute_engine_id$, $data.input_data.workspace_pipeline_id$, NULL, NULL, NULL,
(select job_type_id from nabu.job_type_lookup where job_type = 'curation'), (select status_code_id from nabu.status_code_lookup where status_code='FLOW_STARTED'),
now(), NULL);
>>

information_msg(data)::=<<
{
  "bot_name": "DBOpsBot",
  "bot_metadata": {
      $common_metadata(data, first(data.workspacePipelineDetails))$,
      "tags": {$common_tags(first(data.getId))$,"task_dependency":true},
      "task_retry_intervals_secs": [],
      "message_context": "workspace_curation_initial_flow_queries"
    },
  "bot_tasks": [
    {
      "task_name": "workspace_curation_flow_queries",
      "data_processor": {
        "classname": "com.modak.bots.processor.NullProcessor",
        "props": {}
      },
      "skipLogicPattern": "doNothing",
      "pre_task_logging_template_details": {
        "template_group": "templates/artifact_ingestion/common_templates.stg",
        "template_name": "pre_log_template"
      },
      "app_template_details": {
        "template_group": "templates/artifact_ingestion/workspace_curation_fc.stg",
        "template_name": "get_scheduled_details"
      },
      "input_data":{ $input_data(first(data.getId), first(data.workspacePipelineDetails))$ },
      "output_message_templates": [
        {
          "template_group": "templates/artifact_ingestion/workspace_curation_fc.stg",
          "template_name": "workspace_curation_information_initial_msg",
          "useIncomingData": true
        },
        {
          "template_group": "templates/artifact_ingestion/ingestion_flow.stg",
          "template_name": "task_status_success_msg"
        }
      ],
      "error_message_templates": [
        {
          "template_group": "templates/artifact_ingestion/ingestion_flow.stg",
          "template_name": "error_template_create_msg"
        }
      ],
      "loggers":$bot_log_common(data)$
    }
  ]
}
>>

input_data(data, pipelineDetails)::=<<
"template_execution_type": "single",
"query_type": "select",
"query_input": {
"bot_topic_prefix": "$data.bot_topic_prefix$",
"workflow_engine_id":$data.workflow_engine_id$ ,
"batch_id": $data.batch_id$,
"batch_name": "$data.batch_name$",
"environment": "$data.environment$",
"data_movement_id": $data.pipeline_id$,
"job_type_id": $data.job_type_id$,
"job_schedule_id": $data.job_schedule_id$,
"job_scheduled_user_id": "$data.job_scheduled_user_id$",
"workflow_id": $data.workflow_id$,
"workflow_name": "$data.workflow_name$",
"workflow_route_bot_topic_details" : {
    $pipelineDetails.workflow_route_bot_topic_details$ ,
    "completion_topic": "$pipelineDetails.bot_topic_prefix$$pipelineDetails.workflow_engine_id$_completion",
    "AuthTokenBot": "$pipelineDetails.bot_topic_prefix$$pipelineDetails.workflow_engine_id$_authtoken"
}
}
>>

common_metadata(data, pipelineDetails)::=<<
"message_id": "$data.message_uuid$",
"parent_id": "e035080f-88d6-4fdb-a318-a1ad0f1a8cc9",
"bot_id": "e035080f-88d6-4fdb-a318-a1ad0f1a8cc9",
"message_topic":"$first(data.DBOpsBot).workflow_route_bot_topic$",
"workflow_route_bot_topic_details" : {
    $pipelineDetails.workflow_route_bot_topic_details$ ,
    "completion_topic": "$pipelineDetails.bot_topic_prefix$$pipelineDetails.workflow_engine_id$_completion",
    "AuthTokenBot": "$pipelineDetails.bot_topic_prefix$$pipelineDetails.workflow_engine_id$_authtoken"
}
>>

common_tags(data) ::=<<
"process_id":$data.batch_id$,
"initial_ts":$data.batch_id$,
"batch_id":$data.batch_id$,
"generated_ts": $data.batch_id$,
"batch_name":"$data.batch_name$",
"job_schedule_id":$data.job_schedule_id$,
"data_movement_id": $data.pipeline_id$,
"job_scheduled_user_id" : "$data.job_scheduled_user_id$",
"environment": "$data.environment$",
"tags": ["AuthToken"]
>>

bot_log_common(data)::=<<
{
    "pre_loggers": [
      {
        "template_group": "templates/artifact_ingestion/common_templates.stg",
        "template_name": "bot_pre_log",
        "log_type": "FILE",
        "log_file_location": "../logs/logger_output.log"
      }
    ],
    "post_loggers": [
      {
        "template_group": "templates/artifact_ingestion/common_templates.stg",
        "template_name": "bot_post_log",
        "log_type": "FILE",
        "log_file_location": "../logs/logger_output.log"
      }
    ],
    "error_loggers": [
      {
        "template_group": "templates/artifact_ingestion/common_templates.stg",
        "template_name": "bot_error_log",
        "log_type": "FILE",
        "log_file_location": "../logs/logger_output.log"
      }
    ]
  }
>>

postInsert_initFlowStatus(data)::=<<
INSERT INTO nabu.init_flow_status
(init_flow_id, batch_id, job_schedule_id, process_id, compute_engine_id, data_movement_id, datastore_id, error_msg, error_stack, job_type_id, status_code_id, flow_ts, additional_info)
VALUES
($first(data.getId).flow_id$, $data.batch_id$, $first(data.jobScheduleDetails).job_schedule_id$, $first(data.getId).process_id$,
$first(data.getId).compute_engine_id$, $data.input_data.workspace_pipeline_id$, NULL,
$if(data.status.error_msg)$ '$data.status.error_msg$' $else$ NULL $endif$, $if(data.status.error_stack)$ '$data.status.error_stack$' $else$ NULL $endif$,
(select job_type_id from nabu.job_type_lookup where job_type = 'curation'),
(select status_code_id from nabu.status_code_lookup where status_code = $if(data.status.status)$ 'SUCCESS' $else$ 'ERROR' $endif$ and status_code_type = 'BOT_FLOW'),
now(), NULL);
>>


postInsert_FlowStatus(data)::=<<
with flow_status as (
INSERT INTO nabu.flow_status
(flow_id,flow_name,batch_id,status_code_id,number_of_flow_tasks,flow_ts,job_type_id,data_movement_id,job_schedule_id)
VALUES
($first(data.getId).flow_id$,'workspace_curation_$data.input_data.workspace_pipeline_id$_$data.batch_id$',
$data.batch_id$,
(select status_code_id from nabu.status_code_lookup where status_code = 'PROVISIONING'  and status_code_type = 'BOT_FLOW_TASK'),
0,now(),(select job_type_id from nabu.job_type_lookup where job_type = 'curation'),
$data.input_data.workspace_pipeline_id$,
$first(data.jobScheduleDetails).job_schedule_id$)
)
select 'Triggered Curation for pipeline $data.input_data.workspace_pipeline_id$.' as status
;
>>


// This template used to schedule the crawling
// @created_by Murthy (VK1708)
// @modified_by Kusuri Dheeraj Kumar (KD2106)
// @Api_Path : "http://localhost:port/fireshots/nabu/upd/sq/restCatalog/onDemandCrawling"

onDemandCrawling(data)::=<<
{
    "input_data": $data.asString$,
    "sequential_queries": [
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "onDemandCrawling_schema",
            "validation_key": "input_data",
            "query_type":"validation"
        },
       {
              "query_template_group": "$data.STPath$/restCatalog.stg",
              "query_template_name": "checkAccessForSuperAdminRole",
              "query_output_key": "checkAccess",
              "query_type":"select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "onDemandDataConnection_checks",
            "query_output_key":"checks",
            "query_type":"select",
            "processLogic": {
            "processClass": "com.modak.fireshots.processors.impl.ChecksProcessor",
            "processType":"checks"
            }
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "getMinutes",
            "processLogic": {
                "processClass": "com.modak.fireshots.processors.impl.CronProcessor",
                "generate_cron": ["minutes"],
                "result_key": "cron_details"
            },
            "query_output_key": "cron_details",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "insertJobScheduleDetails_crawling",
            "query_output_key": "job_schedule_details",
            "query_type": "select"
        },
        {
            "query_template_group": "$data.STPath$/restCatalog.stg",
            "query_template_name": "outputMessage_crawling",
            "query_output_key": "data",
            "query_type": "select"
        }
    ],
    "output_keys": [
        "data"
    ]
}
>>

onDemandCrawling_schema(data)::=<<
{
	"\$schema": "http://json-schema.org/draft-07/schema#",
	"title": "on Demand Profiling",
	"type": "object",
	"required": [
		"data_connection_id"
	],
	"properties": {
		"data_connection_id": {
            "type": "integer",
            "minimum": 1
		}
	}
}
>>


insertJobScheduleDetails_crawling(data)::=<<
with update_dataplace as(
update nabu.dataplace set
crawl_frequency = '$first(data.cron_details).generated_cron.refresh_frequency$',
mod_by = '$data.userDetails.userId$',
mod_ts = current_timestamp
where dataplace_id = $data.input_data.data_connection_id$ and valid_to_ts='9999-12-31'
),

update_ts as(
update nabu.job_schedule_details set
valid_to_ts = current_timestamp
where dataplace_id = $data.input_data.data_connection_id$
and valid_to_ts='9999-12-31'
and job_type_id in (select job_type_id from nabu.job_type_lookup where job_type in ('ondemand_crawling','crawling'))
)

insert into nabu.job_schedule_details(job_type_id, dataplace_id,refresh_frequency,
additional_properties, valid_from_ts, valid_to_ts, cru_by, cru_ts) values
((select job_type_id from nabu.job_type_lookup where job_type ='ondemand_crawling'),$data.input_data.data_connection_id$,
'$first(data.cron_details).generated_cron.refresh_frequency$','$resolveCrawl(data)$',current_timestamp,'9999-12-31'
,'$data.userDetails.userId$',current_timestamp) returning job_schedule_id
>>

resolveCrawl(data)::=<<
{"crawl_frequency": $resolveCron(data)$}
>>

resolveCron(cronJson)::=<<
{
	"cron_type":"one_time",
	"cron_freq":"$first(data.cron_details).generated_cron.refresh_frequency$",
	"cron_timezone":"$first(data.cron_details).generated_cron.timezone$",
	"consider_timezone":true
}
>>

outputMessage_crawling(data)::=<<
select 'Scheduled Crawling for data connection $data.input_data.data_connection_id$ at $first(data.cron_details).generated_cron.current_timestamp$' as status
>>


// This template used to import a Dataplace
// @created_by Swaroop(js1511)
// @Api_Path : "http://localhost:8893/fireshots/nabu/upd/sq/restCatalog/importDataSource_local"

importDataSource_local(data)::=<<
{
  "input_data": $data.asString$,
  "sequential_queries": [
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "importDataConnection_schema",
      "validation_key": "input_data",
      "query_type":"validation"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "checkAccessForSuperAdminRole",
      "query_output_key": "checkAccess",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "dataplaceTags",
      "query_output_key": "dataplace_tag_details",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "importDataplace_template",
      "query_output_key": "import",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "renderAsGetDataplaceResponse",
      "query_output_key": "data",
      "query_type":"jsonArray"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "dataplace_tag_warnings",
      "query_output_key": "dataplace_tag_warnings",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "dataplace_warnings",
      "query_output_key": "import_warnings",
      "query_type":"jsonArray"
    },

    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "generateAddDataplacePayload",
      "query_output_key": "data",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "renderAsAddDataplacePayload",
      "query_output_key": "input_data",
      "query_type":"json"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "renderAsAddDataplacePayload",
      "query_output_key": "asMap",
      "query_type":"json"
    },

    {
      "query_template_group": "$data.DirPath$/upd/manageDataSource.stg",
      "query_template_name": "addDataSource_template",
      "query_output_key":"addDataSource_query",
      "query_type":"string"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "addDataSource_import_local",
      "query_output_key":"data",
      "query_type":"select"
    }
  ],
  "output_keys":["import_warnings","data"]
}
>>

addDataSource_import_local(data)::=<<
$addDataSource_import(first(data.import_warnings), data.addDataSource_query)$
>>

addDataSource_import(data, query)::=<<
$if(!(data.flag || data.connection_type_warning || data.credential_warning))$
$query$
$else$
select 'Import Failed due to Warnings' as error_msg
$endif$
>>

// This template used to import a Curation Pipeline
// @created_by Rakesh(RG0706)
// @Api_Path : "http://localhost:8893/fireshots/nabu/upd/sq/restCatalog/importCurationPipeline"

importCurationPipeline(data)::=<<
{
  "input_data": $data.asQuotedString$,
  "sequential_queries": [
    {
      "query_template_group": "$data.DirPath$/sel/upgrade.stg",
      "query_template_name": "resolveImportData",
      "query_output_key": "input_data",
      "query_type": "json",
      "quote_json":"Y"
    },
    {
      "query_template_group": "$data.DirPath$/sel/upgrade.stg",
      "query_template_name": "importCuration_schema",
      "validation_key": "input_data",
      "query_type":"validation"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "checkAccessForSuperAdminRole",
      "query_output_key": "checkAccess",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.DirPath$/sel/upgrade.stg",
      "query_template_name": "upgradePipelineJSON_preImport",
      "query_output_key": "updated_json",
      "query_type": "json",
      "result_set_to_json":"Y",
      "quote_json":"Y"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "checkCurationPipelineErrors",
      "query_output_key": "pipeline_warnings",
      "query_type":"select",
      "result_set_to_json":"Y"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "generateOpList",
      "query_output_key": "order_error",
      "query_type": "select",
      "processLogic": {
        "processClass": "com.modak.fireshots.processors.impl.ImportProcessor",
        "processType":"nodeOrder"
      }
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "getPipelineJson",
      "query_output_key": "workspace_pipeline_json",
      "query_type":"select",
      "result_set_to_json": "Y",
      "quote_json":"Y"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "importErrors",
      "query_output_key":"node_warnings",
      "query_type":"json"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "warnings_formatter",
      "query_output_key": "warnings_errors",
      "query_type":"select",
      "result_set_to_json":"Y"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "workspaceId",
      "query_output_key":"workspace_details",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.DirPath$/sel/upgrade.stg",
      "query_template_name": "resolveImportPipelineJson",
      "query_output_key":"asMap",
      "query_type":"json",
      "result_set_to_json":"Y"
    },
    {
      "query_template_group": "$data.DirPath$/sel/upgrade.stg",
      "query_template_name": "resolveImportPipelineJson",
      "query_output_key":"input_data",
      "query_type":"json",
      "result_set_to_json":"Y"
    },
    {
      "query_template_group": "$data.STPath$/manageWorkspace.stg",
      "query_template_name": "addWorkspacePipeline_template",
      "query_output_key":"addWorkspacePipeline_query",
      "query_type":"string"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "addWorkspacePipeline_template",
      "query_output_key":"data",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.STPath$/manageWorkspace.stg",
      "query_template_name": "addWorkspacePipelineNodes",
      "query_output_key":"addWorkspacePipelineNodes_query",
      "query_type":"string"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "addWorkspacePipelineNodes",
      "query_output_key":"nodes",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.STPath$/manageWorkspace.stg",
      "query_template_name": "emptyTemplate",
      "query_output_key": "unique_id",
      "query_type": "uniqueId"
    },
    {
      "query_template_group": "$data.STPath$/manageWorkspace.stg",
      "query_template_name": "addDQRules",
      "query_output_key":"addDQRules_query",
      "query_type":"string"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "addDQRules",
      "query_output_key":"nodes",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.STPath$/manageWorkspace.stg",
      "query_template_name": "addDQRule_details",
      "query_output_key":"addDQRule_details_query",
      "query_type":"string"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "addDQRule_details",
      "query_output_key":"nodes",
      "query_type":"select"
    }
  ],
  "output_keys":["warnings_errors","data"]
}

>>

checkCurationPipelineErrors(data)::=<<
with nodes_info as (
$if(first(data.updated_json.pipelineJson.nodeDataArray).nodeId)$
$data.updated_json.pipelineJson.nodeDataArray:{item |(select $item.nodeId$ as nodeId,($resolveInput(item.inputLinks)$) as input_links,($resolveInput(item.outputLinks)$) as output_links, '$item.config.nodeName$' as nodeName)}; separator = " \n union all \n "$
$else$
select null as nodeId,null as input_links,null as output_links, null as nodeName
$endif$
),
links_info as (
$if(first(data.updated_json.pipelineJson.linkDataArray).link_id)$
$data.updated_json.pipelineJson.linkDataArray:{item |(select $item.link_id$ as link_id,$item.fromNodeId$ as fromNodeId, $item.toNodeId$ as tonodeid)}; separator = " \n union all \n "$
$else$
select null as link_id,null as fromNodeId, null as tonodeid
$endif$
)
$if(first(data.updated_json.pipelineJson.linkDataArray).link_id)$
,input_link as (
select json_array_elements_text(input_links) as input_link_id,nodeid from nodes_info
),
output_link as (
select json_array_elements_text(output_links) as output_link_id,nodeid from nodes_info
),
fromnode as (
select a.nodeid as node, output_link_id as link_id , 'output_link' as position from output_link a
inner join links_info b on a.nodeId=b.fromnodeid and b.link_id=a.output_link_id::bigint
),
tonode as (
select a.nodeid as node ,input_link_id as link_id,'input_link' as position  from input_link a
inner join links_info b on a.nodeId=b.tonodeid and b.link_id=a.input_link_id::bigint
),
exist_data as (
select * from fromnode
union
select * from tonode
),
all_data as (
select input_link_id::bigint as link_id,nodeid, 'input_link' as position from input_link
union
select output_link_id::bigint as link_id,nodeid, 'output_link' as position from output_link
),
result_as_per_nodes_info as (select a.nodeid,a.position,a.link_id from all_data a
left join exist_data b
on a.nodeid=b.node and a.position=b.position and a.link_id=b.link_id::bigint
where b.node is null
and b.position is null
and b.link_id is null),
correction_as_per_nodes_info as (
select nodeid as "nodeId"  ,'Linkage issue with '||position||' - '||link_id|| ' of nodeId '||nodeid as link,'correction in links_info' as check from result_as_per_nodes_info
),
transform1 as (
select nodeid,output_link_id::bigint as link_id from output_link
union
select nodeid,input_link_id::bigint as link_id from input_link
),
transform2 as (
select a.link_id,fromnodeid as nodeid from links_info a
inner join transform1 b on a.link_id=b.link_id and a.fromnodeid=b.nodeid
),
transform3 as (
select a.link_id,tonodeid as nodeid from links_info a
inner join transform1 b on a.link_id=b.link_id and a.tonodeid=b.nodeid
),
transform4 as (
select link_id, nodeid, 'from' as position from transform2
union
select link_id, nodeid, 'to' as position from transform3
),
transform5 as (
select link_id,fromnodeid as nodeid , 'from' as position from links_info
union
select link_id,tonodeid as nodeid , 'to' as position from links_info
),
result_as_per_links_info as (select a.nodeid,a.position,a.link_id from transform5 a
left join transform4 b
on a.nodeid=b.nodeid and a.position=b.position and a.link_id=b.link_id
where b.nodeid is null
and b.position is null
and b.link_id is null),
correction_as_per_links_info as (
select 'Linkage issue with '||position||'NodeId - '||nodeid|| ' of link_id '||link_id as "node"  ,link_id as link_id,'correction in nodes_info' as check1 from result_as_per_links_info
)
$endif$
,uniq_cte as (
select nodeName,nodeId,nodeId||'-'||nodeName as node from nodes_info
),
uniqueness as (
select * from uniq_cte ou
where (select count(*) from uniq_cte inr
where inr.nodeName = ou.nodeName or inr.nodeId=ou.nodeId) > 1
),
list_uniq as (
select  link_id  from links_info ou
where (select count(link_id) from links_info inr
where inr.link_id=ou.link_id)>1
),
workspace_pipeline_type_name as (
select '$data.updated_json.pipelineJson.pipeline_config.workspace_pipeline_type_name$' as workspace_pipeline_type_name
),
$checkComputeEngineAccess(data)$
select
$if(first(data.updated_json.pipelineJson.linkDataArray).link_id)$
(select json_agg(node) as "correction_as_per_links_info" from correction_as_per_links_info) as correction_as_per_links_info,
(select json_agg(link) as "correction_as_per_nodes_info" from correction_as_per_nodes_info) as correction_as_per_nodes_info,
(select json_agg(distinct link_id) as delete_links from correction_as_per_links_info) as delete_links,
$endif$
(select json_agg(node) as "repeated_nodes" from uniqueness) as repeated_nodes,
(select json_agg(distinct link_id) as "repeated_links" from list_uniq) as repeated_links,
(select workspace_pipeline_type_name as missing_workspace_pipeline_type from workspace_pipeline_type_name
where workspace_pipeline_type_name not in
(select workspace_pipeline_type_name  from nabu.workspace_pipeline_type_lookup wptl)) as missing_workspace_pipeline_type,
(select json_agg(tag_warning) as tag_warnings from ($if(first(data.updated_json.pipelineJson.pipeline_config.tags).tag_category_name)$
$resolveTagList(data.updated_json.pipelineJson.pipeline_config.tags)$ $else$ select null as tag_warning $endif$)a) as tag_warnings,
(select compute_engine_name as compute_engine_access_denied from access_denied_compute_engine) as compute_engine_access_denied,
(select non_exist_pipeline_conditions as non_exist_pre_conditions from ($resolveConditions(data.updated_json.pipelineJson.pipeline_config.flow_details.pre_conditions.pipeline_details)$)a) as non_exist_pre_conditions,
(select non_exist_pipeline_conditions as non_exist_post_conditions from ($resolvePostConditions(data.updated_json.pipelineJson.pipeline_config.flow_details.post_conditions.rest_api_details)$)a) as non_exist_post_conditions,
(select invalid_link_types as "invalid_link_types" from ($validateLinkTypes(data.updated_json.pipelineJson.linkDataArray)$)a) as invalid_link_types,
(select invalid_node_types from ($validateNodeTypes(data.updated_json.pipelineJson.nodeDataArray)$)a),
(select * from invalid_compute_engine) as invalid_compute_engine_name,
(select * from invalid_workflow_engine) as invalid_workflow_engine_name,
(select case when count(workspace_Pipeline_name)>0 then false else true end as "isPipelineNameUnique"
 from nabu.workspace_pipeline
 where lower(workspace_pipeline_name)=lower('$data.updated_json.pipelineJson.pipeline_config.pipeline_name$') and is_deleted is false
 ),
 (with cte as(select '$data.input_data.workspace_name$' as invalid_workspace)
select invalid_workspace from cte  where invalid_workspace not in (select workspace_name from nabu.workspace where is_deleted is not true
)
),
($WorkspaceAccessIAM(data)$
select workspace_name as access_denied_workspace
from  nabu.workspace
 where workspace_name='$data.input_data.workspace_name$'
 $if(first(data.checkAccess).check_access)$
 and workspace_id not in  (select workspace_id from workspace_access
 where workspace_id is not null)
 $else$
 and false
 $endif$
)
>>

resolveInput(list)::=<<
$if(first(list))$
with cte as (
$list:{item |$if(item)$ select $item$ as input_links $else$ select null as input_links $endif$}; separator = " \n union all \n "$
)
select json_agg(input_links) as input_links from cte
$else$
select null::json as input_links
$endif$
>>

generateOpList(data)::=<<
select 1
>>

WorkspaceAccessIAM(data)::=<<
with module_access as(
             select mam.role_id,mam.access_id,env_group_name,condition_type_id,
             unnest(string_to_array(substring(values,3,length(values)-4),'","')) as matched_workspace_name
             from nabu_ui.env_group_role_info egri
             inner join nabu_ui.module_access_mapping mam
             on egri.role_id =mam.role_id
             and env_group_name in ('$data.userDetails.userId$'$if(data.userDetails.groups)$,$resolveGroupListString(data.userDetails.groups)$$endif$)
             and (condition_type_id=19 or condition_type_id=20 or condition_type_id=21)
             group by 1,2,3,4,5
     )
     ,workspace_access as
     (
            SELECT jsonb_agg(access_id) AS access_id,role_id,workspace_id
             FROM (
             select access_id,role_id,workspace_id from (
     		select access_id,role_id,
     		case when condition_type_id =21 then
     		case when tag_label_id =cast(matched_workspace_name as integer)
     		then td.workspace_id
     		end
     		end as workspace_id
     		from module_access,nabu_ui.tag_workspace td
     		where td.valid_to_ts='9999-12-31'

     	union all
     		select access_id,role_id,
     		case when condition_type_id =19 then
     		case when workspace_name =matched_workspace_name
     		then dp.workspace_id
     		end
     		when condition_type_id =20 then
     		case when workspace_name~*matched_workspace_name
     		then dp.workspace_id
     		end
     		end as workspace_id
     		from module_access,nabu.workspace dp
     		where dp.is_deleted is false

     	union all
     		SELECT ui_access_type_id as access_id,0 as role_id,workspace_id
     		from nabu_ui.ui_module_access_lookup umal,nabu.workspace ce
     		where ce.crt_by ~* '$data.userDetails.userId$' and is_deleted is false and ui_module_name ='Workspaces'

             ) b GROUP BY 3,2,1
     )a group by 2,3
     )
>>


checkComputeEngineAccess(data)::=<<
$if(first(data.checkAccess).check_access)$
$ComputeEngineAccessIAM(data)$,
$endif$
payload_compute_engine as (
    select  '$data.updated_json.pipelineJson.pipeline_config.compute_engine_name$' as invalid_compute_engine_name,
    '$data.updated_json.pipelineJson.pipeline_config.workflow_engine_name$' as invalid_workflow_engine_name
),
valid_compute_engine as (
    select ce.compute_engine_id ,ce.compute_engine_name from nabu.engine_mapping_lookup eml
    inner join nabu.compute_engine ce on ce.engine_mapping_id = eml.engine_mapping_id
    inner join nabu.engine_lookup el on eml.engine_id  = el.engine_id
    inner join nabu.engine_sub_type_lookup estl on eml.engine_sub_type_id =estl.engine_sub_type_id
    where ce.compute_engine_name='$data.updated_json.pipelineJson.pipeline_config.compute_engine_name$'
    and engine_type='$data.updated_json.pipelineJson.pipeline_config.engine_type$'
    and engine_sub_type='$data.updated_json.pipelineJson.pipeline_config.engine_sub_type$'
    and ce.valid_to_ts='9999-12-31'
),
access_denied_compute_engine as (
    select ce.compute_engine_name
    from nabu.engine_mapping_lookup eml
    inner join nabu.compute_engine ce on ce.engine_mapping_id =eml.engine_mapping_id
    inner join nabu.engine_lookup el on eml.engine_id  =el.engine_id
    inner join nabu.engine_sub_type_lookup estl on eml.engine_sub_type_id =estl.engine_sub_type_id
    where ce.compute_engine_name='$data.updated_json.pipelineJson.pipeline_config.compute_engine_name$'
    and engine_type='$data.updated_json.pipelineJson.pipeline_config.engine_type$'
    and engine_sub_type='$data.updated_json.pipelineJson.pipeline_config.engine_sub_type$'
    and ce.valid_to_ts='9999-12-31'
    $if(first(data.checkAccess).check_access)$
    and ce.compute_engine_id not in (select compute_engine_id from compute_engine_access where compute_engine_id is not null)
    $else$
    and false
    $endif$
),
invalid_compute_engine as (
    select invalid_compute_engine_name from payload_compute_engine
    where invalid_compute_engine_name not in (select compute_engine_name from valid_compute_engine)
),
invalid_workflow_engine as (
    select invalid_workflow_engine_name from payload_compute_engine
    where invalid_workflow_engine_name not in (select workflow_engine_name from nabu.workflow_engine we where valid_to_ts ='9999-12-31')
)
>>


resolve_pipeline_preconditions(data)::=<<
$if(data.pre_conditions.pipeline_details)$
select json_build_object('enabled','$data.pre_conditions.enabled$','pipeline_timeout',$data.pre_conditions.pipeline_timeout$,'pipeline_details',(select pipeline_details from ($resolveConditions(data.pre_conditions.pipeline_details)$)a))
$else$
select json_build_object('enabled','$data.pre_conditions.enabled$','pipeline_details',null::json,'pipeline_timeout',$data.pre_conditions.pipeline_timeout$)
$endif$
>>

resolve_pipeline_postconditions(data)::=<<
$if(data.post_conditions.rest_api_details)$
select json_build_object('enabled','$data.post_conditions.enabled$','rest_api_details',(select rest_api_details from ($resolvePostConditions(data.post_conditions.rest_api_details)$)a))
$else$
select json_build_object('enabled','$data.post_conditions.enabled$','rest_api_details',null::json)
$endif$
>>

resolveConditions(conditions)::=<<
$if(first(conditions).data_movement_name)$
with test as (
$conditions:{item |(select '$item.data_movement_name$' as data_movement_name, '$item.status_code_description$' as status_code_description )}; separator = " \n union all \n "$
)
,cte as (
select data_movement_id,status_code_description,a.data_movement_name from nabu.data_movement a inner join test b on a.data_movement_name=b.data_movement_name where valid_to_ts='9999-12-31'
)
,cte2 as (
select jsonb_build_object('data_movement_id',data_movement_id,'data_movement_name',data_movement_name,'status_code_description',status_code_description,'status_code_id',status_code_id) as pipeline_details from cte a inner join
nabu.status_code_lookup scl on a.status_code_description=scl.status_code
),
cte3 as (
select data_movement_name from test where data_movement_name not in (select data_movement_name from nabu.data_movement where valid_to_ts='9999-12-31')
)
select (select json_agg(pipeline_details) from cte2) as pipeline_details,
(select json_agg(data_movement_name) from cte3) as non_exist_pipeline_conditions
$else$
select null::json as pipeline_details,
null::json as non_exist_pipeline_conditions
$endif$
>>
resolvePostConditions(conditions)::=<<
$if(first(conditions).rest_api_name)$
with test as (
$conditions:{item |(select '$item.rest_api_name$' as rest_api_name, '$item.status_code_description$' as status_code_description,$if(item.ordinal_position)$  $item.ordinal_position$ $else$ null $endif$ as ordinal_position )}; separator = " \n union all \n "$
)
,cte as (
select json_build_object('rest_api_id',a.rest_api_id,'rest_api_name',a.rest_api_name,'status_code_description',b.status_code_description,'ordinal_position',b.ordinal_position,'status_code_id',c.status_code_id) as re from nabu_ui.rest_api_info a
 inner join test b on a.rest_api_name=b.rest_api_name
 left join nabu.status_code_lookup c on b.status_code_description=c.status_code
 where a.valid_to_ts ='9999-12-31')
,cte3 as (
select rest_api_name from test where rest_api_name not in (select rest_api_name from nabu_ui.rest_api_info where  valid_to_ts ='9999-12-31')
)
select (select json_agg(re) from cte) as rest_api_details,
(select json_agg(rest_api_name) from cte3 where rest_api_name!='') as non_exist_pipeline_conditions
$else$
select null::json as rest_api_details,
null::json as non_exist_pipeline_conditions
$endif$
>>
resolveTags(list)::=<<
(with cte as (
$resolveTagList(list)$
)
select json_agg(json_build_object('tag_category_name',tag_category_name,'tag_value',tag_value,'tag_category_id',tag_category_id,'tag_label_id',tag_label_id,'pipelineId',null,'tag_id',null,'tag_warning',tag_warning)) as tags from cte
)>>

resolveNodeTags(list,nodeId)::=<<
$if(first(list).tag_category_id)$
(with cte as (
$resolveTagList(list)$
)
select json_agg(json_build_object('tag_category_name',tag_category_name,'tag_value',tag_value,'tag_category_id',tag_category_id,'tag_label_id',tag_label_id,'pipelineId',null,'nodeId',$nodeId$,'tag_id',null,'tag_warning',tag_warning)) as tags from cte
)
$else$
'[]'::jsonb
$endif$
>>

getComputeEngine(data)::=<<
$if(first(data.checkAccess).check_access)$
with $ComputeEngineAccessIAM(data)$
$endif$
select ce.compute_engine_id from nabu.engine_mapping_lookup eml
inner join nabu.compute_engine ce on ce.engine_mapping_id =eml.engine_mapping_id
inner join nabu.engine_lookup el on eml.engine_id  =el.engine_id
inner join nabu.engine_sub_type_lookup estl on eml.engine_sub_type_id =estl.engine_sub_type_id
where ce.compute_engine_name='$data.updated_json.pipelineJson.pipeline_config.compute_engine_name$'
and engine_type='$data.updated_json.pipelineJson.pipeline_config.engine_type$'
and engine_sub_type='$data.updated_json.pipelineJson.pipeline_config.engine_sub_type$'
and ce.valid_to_ts='9999-12-31'
$if(first(data.checkAccess).check_access)$
and ce.compute_engine_id in (select compute_engine_id from compute_engine_access where compute_engine_id is not null)
$endif$
>>

validateLinkTypes(links)::=<<
$if(first(links).link_id)$
with data_table as (
$links:{item |(select $item.link_id$ as link_id, $item.originPortId$ as originPortId, $item.endPortId$ as endPortId,$item.fromNodeId$ as fromNodeId, $item.toNodeId$ as toNodeId ,'$item.linkType$' as linkType,(select json_build_object( 'schema', '{\}'::json,'preview_data','{\}'::json)) as t)}; separator = " \n union all \n "$
)
select (select json_agg(json_build_object('link_id',link_id,'originPortId',originPortId,'endPortId',endPortId,'fromNodeId',fromNodeId,'toNodeId',toNodeId,'linkType',linkType,'data',t)) as linkDataArray from data_table where linkType in (select node_linktype_name  from nabu.curation_node_linktypes_lookup) $if(first(data.error).delete_links)$ and link_id not in ($resolveGroupListString(first(data.error).delete_links)$) $endif$) as linkDataArray,
(select json_agg(json_build_object('link_id',link_id,'linkType',linkType)) as invalid_link_types from data_table where linkType not in (select node_linktype_name  from nabu.curation_node_linktypes_lookup)) as invalid_link_types
$else$
select null as invalid_link_types,'[]'::json as linkDataArray
$endif$
>>
resolvePortsInfo(items)::=<<
with cte as (
$items.nodeUiConfig.ports_info:{item |(select $item.port_properties_id$ as port_properties_id)}; separator = " \n union all \n "$
)
select json_build_object('nodeTypeName','$items.nodeTypeName$','port_properties_id',json_agg(port_properties_id)) as port_properties_id from cte
where port_properties_id not in (with ports as (
                               select (node_properties->'acceptedPortPropertyIds')::text as values,node_properties_id  from nabu.curation_node_properties_lookup cnpl
                               inner join nabu.curation_node_type_lookup cntl on cntl.node_property_id =cnpl.node_properties_id
                               where cntl.node_type_name ='$items.nodeTypeName$'
                               )
                               select unnest(string_to_array(substring(values,2,length(values)-2),','))::bigint as port_property_id from ports a)
>>


validateNodeTypes(nodes)::=<<
$if(first(nodes).nodeTypeName)$
with data_table as (
$nodes:{item |(select '$item.nodeTypeName$' as nodeTypeName, '$item.config.nodeName$' as nodeName, '$item.configTypeName$' as configTypeName,'$item.nodeTypeUiConfig.nodeGroupType$' as nodeGroupType,'$item.nodeTypeUiConfig.groupLabel$' as groupLabel,'$item.nodeTypeUiConfig.initialLabel$' as initialLabel ,
 ($resolvePortsInfo(item)$) as port_properties_id, $if(item.config.connection_type)$'$item.config.connection_type$' $elseif(item.config.data_connection_type)$  '$item.config.data_connection_type$' $else$ null $endif$ as connection_type,'$item.config.credential_name$' as credential_name,$if(item.config.file_type)$'$item.config.file_type$' $else$ null $endif$ as file_type,$if(item.config.credential_type)$'$item.config.credential_type$' $else$ null $endif$ as credential_type)}; separator = " \n union all \n "$
),
final as (
select json_agg(json_build_object('nodeTypeName',nodeTypeName,'nodeName',nodeName)) as invalid_node_types from data_table where nodeTypeName not in (select node_type_name from nabu.curation_node_type_lookup)
),
properties as (
select json_agg(json_build_object('nodeTypeName',nodeTypeName,'nodeName',nodeName)) as invalid_node_property from nabu.curation_node_type_lookup b
inner join data_table a on a.nodeTypeName=b.node_type_name
inner join nabu.curation_node_properties_lookup cnpl on b.node_property_id =cnpl.node_properties_id
where b.node_type_name =a.nodeTypeName and node_properties->\>'initialLabel'::text != a.initialLabel
),
config as (
select json_agg(json_build_object('configTypeName',configTypeName,'nodeName',nodeName)) as invalid_node_config from nabu.curation_node_type_lookup b
inner join data_table a on a.nodeTypeName=b.node_type_name
inner join nabu.config_type_info cti on b.node_config_id =cti.config_type_id
where b.node_type_name =a.nodeTypeName and cti.config_type_name != configTypeName
),
group1 as (
select json_agg(json_build_object('nodeTypeName',nodeTypeName,'nodeName',nodeName,'nodeGroupType',nodeGroupType)) as invalid_group_type from nabu.curation_node_type_lookup b
inner join data_table a on a.nodeTypeName=b.node_type_name
inner join nabu.curation_node_group_type_lookup cngtl on cngtl.node_group_id=b.node_group_id
where b.node_type_name =a.nodeTypeName and  cngtl.node_group_type!=a.nodeGroupType
and nodeTypeName in (select node_type_name from nabu.curation_node_type_lookup)
),
invalid_node_port_prop as (
select json_agg(port_properties_id) as  invalid_node_port_prop from data_table
where port_properties_id->\>'port_properties_id' is not null and nodeTypeName in (select node_type_name from nabu.curation_node_type_lookup)
),
invalid_connection_type as (
select json_agg(json_build_object('nodeName',nodeName,'nodeNameType',nodeTypeName,'connection_type',connection_type)) as invalid_connection_type
from data_table where connection_type not in (select c.dataplace_sub_component_type  from nabu.curation_node_type_lookup a
                                          inner join nabu.curation_node_sub_component_mapping_lookup b on a.node_type_id =b.node_type_id
                                          inner join nabu.dataplace_sub_component_lookup c on b.dataplace_sub_component_id = c.dataplace_sub_component_id
                                          where node_type_name =nodeTypeName) and connection_type is not null and nodeTypeName not in ('split','data_connection_source')
                                          and nodeTypeName in (select node_type_name from nabu.curation_node_type_lookup)
                                          and connection_type !=''
),
invalid_credential as (
    select json_agg(json_build_object('nodeName',nodeName,'nodeNameType',nodeTypeName,'credential_name',credential_name)) as invalid_credential
    from data_table where credential_name not in (select credential_name from nabu.credential_info ci  where valid_to_ts='9999-12-31')
    and credential_name!='' and nodeTypeName not in ('split')
    and credential_type in (select credential_type from nabu.credential_type_lookup)
    and credential_type is not null and nodeTypeName in (select node_type_name from nabu.curation_node_type_lookup)
),
invalid_credential_type as (
    select json_agg(json_build_object('nodeName',nodeName,'nodeNameType',nodeTypeName,'credential_type',credential_type)) as invalid_credential_type
    from data_table where credential_type not in (select credential_type from nabu.credential_type_lookup)
    and nodeTypeName not in ('split') and nodeTypeName in (select node_type_name from nabu.curation_node_type_lookup)
),
cte as (
 	select credential_type_id
 	from nabu.dataplace_sub_component_lookup a
 	inner join nabu.credential_type_mapping_lookup b on a.dataplace_sub_component_id = b.dataplace_sub_component_id
 	$if(data.asMap.credential_type_id)$where credential_type_id = $data.asMap.credential_type_id$
 	$else$
 	where dataplace_sub_component_type = '$data.updated_json.connection_type$'
 	$endif$
 	group by 1
)
,$CredentialAccessIAM(data)$
,cred_access as (
    select credential_id,nodeName,nodeTypeName,a.credential_name from nabu.credential_info a
    inner join data_table b on a.credential_name=b.credential_name
    inner join nabu.credential_type_lookup c on a.credential_type_id =c.credential_type_id
    where a.valid_to_ts='9999-12-31' and b.credential_name !='' and b.credential_name is not null
    and c.credential_type=b.credential_type
    and b.nodeTypeName in (select node_type_name from nabu.curation_node_type_lookup)
),
creds as (
    select json_agg(json_build_object('nodeName',nodeName,'nodeNameType',nodeTypeName,'credential_name',credential_name)) as access_denied_credential
    from cred_access where credential_id not in (select credential_id from credential_access where credential_id is not null)
)
select (select * from final) as invalid_node_types,
(select * from properties) as invalid_node_properties,
(select * from config) as invalid_node_config,
(select * from group1) as invalid_node_group_type,
(select * from invalid_node_port_prop) as invalid_node_port_prop,
(select * from invalid_connection_type) as invalid_connection_type,
(select * from invalid_credential) as invalid_credential,
(select * from creds) as access_denied_credential,
(select * from invalid_credential_type) as invalid_credential_type
$else$
select null as invalid_node_types,
null as invalid_node_properties,
null as invalid_node_config,
null as invalid_node_group_type,
null as invalid_node_port_prop,
null as invalid_connection_type,
null as invalid_credential,
null as access_denied_credential,
null as invalid_credential_type
$endif$
>>

CredentialAccessIAM(data)::=<<
module_access as (
	select role_id, access_id, env_group_name, condition_type_id,
	       unnest(string_to_array(substring(values, 3, length (values) - 4), '","')) as match_word
	from nabu_ui.env_group_role_info
	inner join nabu_ui.module_access_mapping using(role_id)
	where condition_type_id in (4,5,6)
	and env_group_name in ($resolveGroupListString([data.userDetails.userId, data.userDetails.groups])$)
	group by 1,2,3,4,5
)
,credential_access as (
	select jsonb_agg(access_id) as access_id,credential_id
	from (
		select access_id, credential_id
		from module_access,nabu_ui.tag_credential
		where valid_to_ts = '9999-12-31' and
		(condition_type_id = 6 and tag_label_id = cast(match_word as integer))
	union
		select access_id, credential_id
		from module_access, nabu.credential_info
		where valid_to_ts = '9999-12-31' and
		((condition_type_id = 4 and credential_name = match_word) or
		(condition_type_id = 5 and credential_name ~* match_word))
	union
		select ui_access_type_id as access_id, credential_id
		from nabu_ui.ui_module_access_lookup, nabu.credential_info
		where valid_to_ts = '9999-12-31'
		and crt_by = '$data.userDetails.userId$'
		and ui_module_name = 'Credentials'
	)a group by 2
)
>>

ComputeEngineAccessIAM(data)::=<<
module_access as(
        select mam.role_id,mam.access_id,env_group_name,condition_type_id,
        unnest(string_to_array(substring(values,3,length(values)-4),'","')) as matched_compute_engine_name
        from nabu_ui.env_group_role_info egri
        inner join nabu_ui.module_access_mapping mam
        on egri.role_id = mam.role_id and condition_type_id in (10,11,12)
        and env_group_name in ('$data.userDetails.userId$'$if(data.userDetails.groups)$,$resolveGroupListString(data.userDetails.groups)$$endif$)
        group by 1,2,3,4,5
)
,compute_engine_access as
(
    select jsonb_agg(access_id) as access_id,compute_engine_id
    from (
        select access_id,compute_engine_id
        from (
            select access_id,
            case when condition_type_id = 12 then
            case when tag_label_id = cast(matched_compute_engine_name as integer)
            then td.compute_engine_id
            end
            end as compute_engine_id
            from module_access,nabu_ui.tag_compute_engine td
            where td.valid_to_ts='9999-12-31'
        union all
            select access_id,
            case when condition_type_id = 10 then
            case when compute_engine_name = matched_compute_engine_name
            then dp.compute_engine_id
            end
            when condition_type_id =11 then
            case when compute_engine_name ~* matched_compute_engine_name
            then dp.compute_engine_id
            end
            end as compute_engine_id
            from module_access,nabu.compute_engine dp
            where dp.valid_to_ts='9999-12-31'
        union all
            select ui_access_type_id as access_id,compute_engine_id
            from nabu_ui.ui_module_access_lookup umal,nabu.compute_engine ce
            where ce.cru_by ~* '$data.userDetails.userId$' and valid_to_ts ='9999-12-31' and ui_module_name ='Compute Engines'
        ) b group by 2,1
    )a group by 2
)
>>

resolveLinks(link)::=<<
$if(first(link))$
with links as (
$link : {item | (select $item$ as links)}; separator = " \n union all \n "$
)
select json_agg(links) as links from links
$else$
select '[]'::json as links
$endif$
>>

validateNodes(nodes)::=<<
$if(first(nodes).nodeTypeName)$
with cte as (
$nodes:{item | (select  json_build_object('nodeTypeId',(select node_type_id from nabu.curation_node_type_lookup where node_type_name='$item.nodeTypeName$')
,'nodeTypeName','$item.nodeTypeName$',
'nodeId',$item.nodeId$,
'nodeLabel','$item.nodeLabel$',
'nodeVersion',(select node_version from nabu.curation_node_type_lookup cntl where node_type_name='$item.nodeTypeName$' and node_version=$item.nodeVersion$),
'uiNodeOrder',(select ui_node_order from nabu.curation_node_type_lookup cntl where node_type_name='$item.nodeTypeName$' and ui_node_order ='$item.uiNodeOrder$'),
'configTypeId',(select cti.config_type_id  from nabu.curation_node_type_lookup cntl
                inner join nabu.config_type_info cti on cntl.node_config_id =cti.config_type_id  where node_type_name='$item.nodeTypeName$' and cti.config_type_name ='$item.configTypeName$'),
'configTypeName','$item.configTypeName$',
'node_form_default_values','$([item.nodeTypeName,"_default"])(item.node_form_default_values)$'::json,
'config',(select json_build_object('nodeName','$item.config.nodeName$','tags',$resolveNodeTags(item.config.tags,item.nodeId)$ $resolveNodeJson(item)$) as config),
'inputLinks',($resolveLinks(item.inputLinks)$),
'outputLinks',($resolveLinks(item.outputLinks)$),
'node_metrics',(select json_build_object('records_count',$if(item.node_metrics.records_count)$ '$item.node_metrics.records_count$' $else$ null $endif$,'time_elapsed','$item.node_metrics.time_elapsed$') as node_metrics),
'is_node_validated',false,
'node_error_msg',\$\$$item.node_error_msg$\$\$,
'nodeUiConfig',($resolveNodeUi(item.nodeUiConfig,item)$),
'nodeTypeUiConfig',($resolveTypeUi(item)$)
) as nodes where '$item.nodeTypeName$' in (select node_type_name from nabu.curation_node_type_lookup) )};separator = " \n union all \n "$
)
select json_agg(nodes) as nodeDataArray from cte
where nodes->\>'nodeTypeId' is not null
and nodes->'nodeTypeUiConfig'->\>'node_properties_id' is not null
and nodes->'nodeTypeUiConfig'->\>'nodeGroupTypeId' is not null
and nodes->\>'configTypeId' is not null
$else$
select '[]'::json as nodeDataArray
$endif$
>>
resolveTypeUi(item)::=<<
select json_build_object(
'node_properties_id',(select node_property_id  from nabu.curation_node_type_lookup b
                      inner join nabu.curation_node_properties_lookup cnpl on b.node_property_id =cnpl.node_properties_id
                      where b.node_type_name = '$item.nodeTypeName$' and node_properties->\>'initialLabel'::text = '$item.nodeTypeUiConfig.initialLabel$'),
'nodeGroupTypeId',(select b.node_group_id  from nabu.curation_node_type_lookup b
                   inner join nabu.curation_node_group_type_lookup cngtl on cngtl.node_group_id=b.node_group_id
                   where b.node_type_name = '$item.nodeTypeName$' and cngtl.node_group_type='$item.nodeTypeUiConfig.nodeGroupType$'),
'nodeGroupType','$item.nodeTypeUiConfig.nodeGroupType$',
'groupLabel','$item.nodeTypeUiConfig.groupLabel$',
'initialLabel','$item.nodeTypeUiConfig.initialLabel$',
'icon','$item.nodeTypeUiConfig.icon$',
'initialXPos','$item.nodeTypeUiConfig.initialXPos$'::int,
'initialYPos','$item.nodeTypeUiConfig.initialYPos$'::int,
'acceptedPortProperties',(with ports as (
                          select (node_properties->'acceptedPortPropertyIds')::text as values,node_properties_id  from nabu.curation_node_properties_lookup cnpl
                          inner join nabu.curation_node_type_lookup cntl on cntl.node_property_id =cnpl.node_properties_id
                          where cntl.node_type_name ='$item.nodeTypeName$'
                          ),
                          cte as (
                          select unnest(string_to_array(substring(values,2,length(values)-2),',')) as port_property_id,a.node_properties_id from ports a
                          )
                          select json_agg(json_build_object('port_properties_id',port_property_id,'port_properties',port_properties)) as "acceptedPortProperties" from cte
                          inner join nabu.curation_port_properties_lookup on port_property_id::bigint=port_properties_id
)
) as nodetype
>>

resolveNodeUi(config,item)::=<<
select json_build_object('xPos',$config.xPos$,'yPos',$config.yPos$,'ports_info',($resolveUiPortsInfo(config.ports_info,item)$))
>>

resolveUiPortsInfo(port)::=<<
with cte as (
$port : {item|(select json_build_object('port_id',$item.port_id$,'port_properties_id',$item.port_properties_id$,'port_location','$item.port_location$','data',(select  json_build_object('file_modified_ts',$if(item.data.file_modified_ts)$'$item.data.file_modified_ts$' $else$ null $endif$,'schema','{\}'::json ))) as ports )};separator = " \n union all \n "$
)
select json_agg(ports) as ports_info from cte
>>
resolveNodeJson(node)::=<<
$([node.nodeTypeName,"_config"])(node.config,node.nodeTypeName)$
>>

warnings_formatter(data)::=<<
with node_warning as(
 select node, warnings::jsonb from
 jsonb_each_text(
 '{
  $first(data.workspace_pipeline_json).pipelineJson.nodeDataArray:{item | "$item.config.nodeName$":{$JSONStringResolve(item.config.import_warnings)$\}}; separator = ","$
  }'::jsonb) as n(node,warnings)
)
,node_cte as (
select nw.node, jsonb_object_agg(warning_type,warning::json) as warning
from
node_warning nw,
jsonb_each_text((select warnings from node_warning where node=nw.node))w(warning_type,warning)
where coalesce(warning,'') not in ('','[]','{}','[""]')
AND warning_type <> 'invalid_dq_rules'
group by 1
union
select nw.node, jsonb_object_agg(warning_type,warning::json) as warning
from
node_warning nw,
jsonb_each_text((select warnings->nw.node->'invalid_dq_rules' from node_warning where node=nw.node))w(warning_type,warning)
where coalesce(warning,'') not in ('','[]','{}','[""]')
group by 1
),
pipeline_warnings as (
select json_object_agg(warning_type, warning::json) as pipeline_warnings  from
 jsonb_each_text(
 '{
  $data.pipeline_warnings:{item | $JSONStringResolve(item)$}; separator = ","$
  }'::jsonb) as n(warning_type,warning)
  where coalesce(warning,'') not in ('','[]','{}','[""]')
)
select (select json_object_agg(node,warning) as node_warnings  from node_cte),(select pipeline_warnings from pipeline_warnings
$if(first(data.pipeline_warnings).isPipelineNameUnique)$ where pipeline_warnings #>\> '{isPipelineNameUnique,0}'!= 'true' $endif$
)
>>
JSONStringResolve(data)::=<<
$data.keys,data.values : { key,value | "$key$": $if(first(value))$ [$resolveWarningStringList(value)$] $elseif(value.keys)$ $JSONStringResolve(value)$ $else$ "$value$" $endif$ }; separator=","$
>>
resolveWarningStringList(list)::=<<
$list:{item | $if(item.keys)$ {$JSONStringResolve(item)$\} $else$ "$item$" $endif$}; separator = ","$
>>

resolveGroupListString(list)::=<<
$list:{item | '$item$'}; separator = ","$
>>

addWorkspacePipeline_template(data)::=<<
$if(data.input_data.workspace_pipeline_json.pipelineJson.allowImportWarnings)$
    $if( data.order_error
     ||  !(first(data.pipeline_warnings).isPipelineNameUnique)
     ||  first(data.pipeline_warnings).missing_workspace_pipeline_type
     ||  first(data.pipeline_warnings).repeated_nodes
     ||  first(data.pipeline_warnings).compute_engine_access_denied
     ||  first(data.pipeline_warnings).repeated_links
     ||  first(data.pipeline_warnings).invalid_link_types
     ||  first(data.pipeline_warnings).invalid_compute_engine_name
     ||  first(data.pipeline_warnings).invalid_workflow_engine_name
     ||  first(data.pipeline_warnings).access_denied_workspace
     ||  first(data.pipeline_warnings).invalid_workspace
     ||  first(data.pipeline_warnings).invalid_node_types )$
         select 'Unable to create the pipeline, please check the errors' as "error_msg"
    $else$
         $data.addWorkspacePipeline_query$
    $endif$
$else$
    $if(first(data.warnings_errors).node_warnings
    ||  first(data.warnings_errors).pipeline_warnings
    )$
        select 'Unable to create the pipeline, please check the errors' as "error_msg"
    $else$
         $data.addWorkspacePipeline_query$
    $endif$
$endif$
>>
workspaceId(data)::=<<
select workspace_id from nabu.workspace where workspace_name ='$data.input_data.workspace_name$' and is_deleted is not true
>>

addWorkspacePipelineNodes(data)::=<<
$if(data.input_data.workspace_pipeline_json.pipelineJson.allowImportWarnings)$
    $if( data.order_error
     ||  !(first(data.pipeline_warnings).isPipelineNameUnique)
     ||  first(data.pipeline_warnings).missing_workspace_pipeline_type
     ||  first(data.pipeline_warnings).repeated_nodes
     ||  first(data.pipeline_warnings).compute_engine_access_denied
     ||  first(data.pipeline_warnings).repeated_links
     ||  first(data.pipeline_warnings).invalid_link_types
     ||  first(data.pipeline_warnings).invalid_compute_engine_name
     ||  first(data.pipeline_warnings).invalid_workflow_engine_name
     ||  first(data.pipeline_warnings).access_denied_workspace
     ||  first(data.pipeline_warnings).invalid_workspace
     ||  first(data.pipeline_warnings).invalid_node_types )$
         select 'Unable to create the pipeline, please check the errors' as "error_msg"
    $else$
         $data.addWorkspacePipelineNodes_query$
    $endif$
$else$
    $if(first(data.warnings_errors).node_warnings
    ||  first(data.warnings_errors).pipeline_warnings
    )$
        select 'Unable to create the pipeline, please check the errors' as "error_msg"
    $else$
         $data.addWorkspacePipelineNodes_query$
    $endif$
$endif$
>>


addDQRules(data)::=<<
$if(data.input_data.workspace_pipeline_json.pipelineJson.allowImportWarnings)$
    $if( data.order_error
     ||  !(first(data.pipeline_warnings).isPipelineNameUnique)
     ||  first(data.pipeline_warnings).missing_workspace_pipeline_type
     ||  first(data.pipeline_warnings).repeated_nodes
     ||  first(data.pipeline_warnings).compute_engine_access_denied
     ||  first(data.pipeline_warnings).repeated_links
     ||  first(data.pipeline_warnings).invalid_link_types
     ||  first(data.pipeline_warnings).invalid_compute_engine_name
     ||  first(data.pipeline_warnings).invalid_workflow_engine_name
     ||  first(data.pipeline_warnings).access_denied_workspace
     ||  first(data.pipeline_warnings).invalid_workspace
     ||  first(data.pipeline_warnings).invalid_node_types )$
         select 'Unable to create the pipeline, please check the errors' as "error_msg"
    $else$
         $data.addDQRules_query$
    $endif$
$else$
    $if(first(data.warnings_errors).node_warnings
    ||  first(data.warnings_errors).pipeline_warnings
    )$
        select 'Unable to create the pipeline, please check the errors' as "error_msg"
    $else$
         $data.addDQRules_query$
    $endif$
$endif$
>>

addDQRule_details(data)::=<<
$if(data.input_data.workspace_pipeline_json.pipelineJson.allowImportWarnings)$
    $if( data.order_error
     ||  !(first(data.pipeline_warnings).isPipelineNameUnique)
     ||  first(data.pipeline_warnings).missing_workspace_pipeline_type
     ||  first(data.pipeline_warnings).repeated_nodes
     ||  first(data.pipeline_warnings).compute_engine_access_denied
     ||  first(data.pipeline_warnings).repeated_links
     ||  first(data.pipeline_warnings).invalid_link_types
     ||  first(data.pipeline_warnings).invalid_compute_engine_name
     ||  first(data.pipeline_warnings).invalid_workflow_engine_name
     ||  first(data.pipeline_warnings).access_denied_workspace
     ||  first(data.pipeline_warnings).invalid_workspace
     ||  first(data.pipeline_warnings).invalid_node_types )$
         select 'Unable to create the pipeline, please check the errors' as "error_msg"
    $else$
         $data.addDQRule_details_query$
    $endif$
$else$
    $if(first(data.warnings_errors).node_warnings
    ||  first(data.warnings_errors).pipeline_warnings
    )$
        select 'Unable to create the pipeline, please check the errors' as "error_msg"
    $else$
         $data.addDQRule_details_query$
    $endif$
$endif$
>>

importErrors(data)::=<<
{
$first(data.workspace_pipeline_json).pipelineJson.nodeDataArray:{item | "$item.config.nodeName$":{$JSONStringResolve(item.config.import_warnings)$\}}; separator = ","$
}
>>

resolveNodeWarnings(data)::=<<
{
$data.keys:{k | "$k$":"$data.(k);null="null"$"}; separator=","$
}
>>


resolveTagList(list)::=<<
$if(list)$
(
    with input_tags_view as(
        select *
        from (values $list:{item |('$item.tag_category_name$', '$item.tag_value$')}; separator = ","$)
        a(tag_category_name,tag_label_name)
    )
    select tag_category_name ,tag_value, tag_category_id, tag_label_id, tag_warning
    from(
        select ti.tag_category_name,ti.tag_label_name as tag_value,tc.tag_category_id,tl.tag_label_id ,
               case when (tc.tag_category_id+tag_label_id) is null then tag_category_name||': '||ti.tag_label_name||' does not exist in this environment' end as tag_warning,
               row_number() over (partition by ti.*) as row_num
        from input_tags_view ti
        left join nabu_ui.tag_category tc using(tag_category_name)
        left join nabu_ui.tag_user_labels tl on tl.tag_label_name = ti.tag_label_name and tl.tag_category_id = tc.tag_category_id
    )tags_details where row_num = 1
)
$else$
select where false
$endif$
>>

// This template used to import a Ingestion/Custom code pipelines
// @created_by RG0706(Rakesh)
// @Api_Path : "http://localhost:8893/fireshots/nabu/upd/sq/restCatalog/importPipeline_local"


importPipeline_local(data)::=<<
{
  "input_data": $data.asString$,
  "sequential_queries": [
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "importPipeline_local_schema",
      "validation_key": "input_data",
      "query_type": "validation"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "checkAccessForSuperAdminRole",
      "query_output_key": "checkAccess",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "getPipelineConnectionTypes_local",
      "query_output_key": "connection_types",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "validatePipelineConnectionTypes",
      "query_output_key": "connection_details",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "getPipelineTagList_local",
      "query_output_key": "data_movement_tag_details",
      "query_type":"select",
      "result_set_to_json": "Y"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "getPipelineCompute_local",
      "query_output_key": "engine_details",
      "query_type":"select",
      "result_set_to_json": "Y"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "getComponentType",
      "query_output_key":"metadata_category",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "getDatabases_message",
      "query_output_key":"source_data_connections",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "getSourceComponentTypeInfo",
      "query_output_key": "source_component_type",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "get_data_connection_access",
      "query_output_key": "access",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "validateTables_helper",
      "query_output_key": "data_movement_details",
      "query_type":"select",
      "result_set_to_json": "Y"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "getAllSchemas_warning",
      "query_output_key":"source_non_exist_data",
      "query_type":"select",
      "result_set_to_json": "Y"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "destination_type",
      "query_output_key":"destination_metadata",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "destination_data",
      "query_output_key":"destination_data",
      "query_type":"select",
      "result_set_to_json": "Y"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "advance_options",
      "query_output_key":"advance_options_pipeline",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "advance_table_options",
      "query_output_key":"missing_advance_table_details",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "advance_table_options_all",
      "query_output_key":"advance_table_options",
      "query_type":"select",
      "result_set_to_json": "Y"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "ingestionWarningsFormatter",
      "query_output_key":"warnings",
      "query_type":"select",
      "result_set_to_json": "Y"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "isDefaultPriorityOrder",
      "query_output_key": "default_priority",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "addDataMovement_template",
      "query_output_key": "data",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "unSupportedDataTypesMapping_template",
      "query_output_key": "DataMapping",
      "query_type":"insert"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "logTemplate_add_ingestion",
      "query_type":"log",
      "log_service":"auditLog"
    }
  ],
  "output_keys":["data","warnings"]
}
>>

ingestionJson(data)::=<<
[
{

}
]
>>

isDefaultPriorityOrder(data)::=<<
select case when '$first(data.input_data.data).bot_priority$' = 'Default' then true else false end as flag
>>


addDataMovement_template(data)::=<<
$if(
(first(data.warnings).missing_source_details)
||  (first(data.warnings).missing_destination_details)
||  (first(data.warnings).access_denied_compute_engine)
||  (first(data.warnings).missing_advance_table_details.missing_tables)
||  (first(data.warnings).missing_advance_table_details.missing_columns)
||  (first(data.warnings).missing_advance_table_details.missing_schemas)
||  (first(data.warnings).missing_advance_table_details.missing_dataplaces)
||  (first(data.warnings).connection_error)
||  (first(data.warnings).missing_compute_engine)
||  (first(data.warnings).missing_workflow_engine)
||  (first(data.warnings).access_denied_compute_engine)
||  (first(data.warnings).invalid_pre_conditions)
||  (first(data.warnings).used_data_movement_name)
)$
select 'Import Failed. Please check the warnings' as message
$else$
with connection_profile_id as (
select connection_profile_id from nabu.connection_profile where connection_type = '$first(data.connection_details).source_type$'),
workflow_id as (
select workflow_id from nabu.bot_configuration_workflow a inner join nabu.compute_engine b on a.engine_mapping_id  = b.engine_mapping_id
where  source_type ='$first(data.connection_details).source_type$' and destination_type ='$first(data.connection_details).destination_type$'
and compute_engine_id = '$first(data.engine_details).compute_engine_details.compute_engine_id$'  and b.valid_to_ts = '9999-12-31'
),
data_movement_id as(
insert into nabu.data_movement
(data_movement_name,contact_info,data_movement_type,valid_from_ts,valid_to_ts,crt_by,crt_ts,mod_by,mod_ts,refresh_freq,connection_profile_id,data_movement_engine_id,workflow_engine_id,workflow_id,priority_order,data_movement_additional_info,compute_engine_id)
values
('$first(data.input_data.data).data_movement_name$',($addContactJson(first(data.input_data.data).contact_info)$),'Ingestion',current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp,'$data.userDetails.userId$',current_timestamp,
'$first(data.input_data.data).refresh_freq.cron_freq$',
(select * from connection_profile_id),
$if(data.input_data.data_movement_engine_id)$
$data.input_data.data_movement_engine_id$
$else$
null
$endif$
,$first(data.engine_details).workflow_engine_details.workflow_engine_id$,(select workflow_id from workflow_id),
$if(first(data.default_priority).flag)$null$else$$first(data.input_data.data).bot_priority$$endif$,
E'$advancedOptions_Import(data)$'::json,$first(data.engine_details).compute_engine_details.compute_engine_id$
)
returning data_movement_id
),
job_schedule_details as (
insert into nabu.job_schedule_details(job_type_id, data_movement_id,refresh_frequency,additional_properties, valid_from_ts, valid_to_ts, cru_by, cru_ts) values
((select job_type_id from nabu.job_type_lookup where job_type ='ingestion'),(select data_movement_id from data_movement_id),
'$first(data.input_data.data).refresh_freq.cron_freq$','$resolveImportIngestionInfo(data)$',current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp)
)
$if(first(data.input_data.data).flow_details.inconsistent_data_types)$$inconsistentList(data)$$endif$
$if(data.data_movement_tag_details)$
,tags as(
    INSERT INTO nabu_ui.tag_data_movement
    (data_movement_id, tag_label_id, valid_from_ts, valid_to_ts, crt_by, crt_ts, mod_by, mod_ts)
    SELECT (select data_movement_id from data_movement_id),tag_label_id, now(), '9999-12-31' ,'$data.userDetails.userId$',current_timestamp,'$data.userDetails.userId$', current_timestamp
    from nabu_ui.tag_user_labels
    where tag_label_id in ($data.data_movement_tag_details:{tag |$if(tag.tag_label_id)$ $tag.tag_label_id$ $else$ 0 $endif$}; separator=", "$)
    and tag_label_id not in (select tag_label_id from nabu_ui.tag_data_movement tdm where
    tdm.data_movement_id=(select data_movement_id from data_movement_id)
    and valid_to_ts = '9999-12-31')
)
$endif$
,data_movement_details as(
insert into nabu.data_movement_details
(data_movement_id,source_dataplace_id,source_schema_id,filter_type_id,filter_rule,destination_dataplace_id,destination_schema_id,ingest_all_tables_views,valid_from_ts,valid_to_ts,crt_by,crt_ts,priority_order)
values
$data.data_movement_details:forEachDataMovementInsert(data);separator=","$)
$if(first(data.input_data.data).advance_table_options)$
,table_advanced_options as(
INSERT INTO nabu.advanced_options_object_details
(object_id, data_movement_id, advance_option_details, valid_from_ts, valid_to_ts, cru_ts, cru_by) VALUES
$data.advance_table_options:{ table | ($table.table_id$, (select data_movement_id from data_movement_id),'{"advanced_table_options":$resolveAdvancedOptionsConditions(table)$,"advanced_option_flags":$resolveAdvancedOptionsFlags(table)$\}'::json, current_timestamp, '9999-12-31', current_timestamp, '$data.userDetails.userId$')};separator=","$
)
$endif$
select * from  data_movement_id
$endif$
>>

modifyContactJson(contactInfo)::=<<
select jsonb_build_object(
'owner','$contactInfo.owner$'
,'email', '[$contactInfo.email:{item | $if(item)$"$item$"$else$null$endif$}; separator = ","$]'::jsonb
,'description',\$\$$contactInfo.description$\$\$
)
>>

addContactJson(contactInfo)::=<<
select jsonb_build_object(
'owner','$data.userDetails.userId$'
,'email', '[$contactInfo.email:{item | $if(item)$"$item$"$else$null$endif$}; separator = ","$]'::jsonb
,'description',\$\$$contactInfo.description$\$\$
)
>>

forEachDataMovementInsert(source,data)::=<<
$source.filters_list:forEachFilterIngestion(source,data);separator=","$
>>
forEachFilterIngestion(filter,source,data)::=<<
((select * from data_movement_id),'$source.dataplace_id$','$source.schema_id$','$filter.filter_type_id$',
'[$filter.filter_value:resolveFilter(filter);separator=","$]',
'$first(data.destination_data).dataplace_id$','$first(data.destination_data).schema_id$',
'[$source.ingest_all_tables_views:resolveJsonArrayString();separator=","$]',
current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp,$filter.priority_order$)
>>
resolveJsonArrayInt(element)::=<<
$element$
>>
resolveJsonArrayString(element)::=<<
"$element$"
>>
resolveFilter(item,map)::=<<
$(map.filter_type)(item)$
>>
Inclusive_Regex(item)::=<<
$resolveJsonArrayString(item)$
>>
Exclusive_Regex(item)::=<<
$resolveJsonArrayString(item)$
>>
Inclusive_Like(item)::=<<
$resolveJsonArrayString(item)$
>>
Exclusive_Like(item)::=<<
$resolveJsonArrayString(item)$
>>
Static(item)::=<<
$resolveJsonArrayInt(item)$
>>
None(item)::=<<>>
resolveAdvancedOptionsConditions(table)::=<<
{
"dataplace_id": $table.dataplace_id$,
"table_name": "$table.table_name$",
"schema_id": $table.schema_id$,
"table_id": $table.table_id$,
"incremental_load": {$resolveIncrementalLoad(table.incremental_load)$},
"columns_options": {$resolveColumnOptions(table.columns_options)$},
"reorder_columns": $if(table.reorder_columns)$ [$table.reorder_columns : { reorder_column | $resolveReorderColumns(reorder_column)$}; separator=","$] $else$ [] $endif$,
"remove_duplicates": {"key_columns": [$table.remove_duplicates.key_columns : { remove_duplicates_key_columns | $resolveRemoveDuplicatesKeyColumns(remove_duplicates_key_columns)$}; separator=","$],"sort_columns": [$table.remove_duplicates.sort_columns : { remove_duplicates_sort_columns | $resolveRemoveDuplicatesSortColumns(remove_duplicates_sort_columns)$}; separator=","$]},
"sort_by_columns": [$table.sort_by_columns : { sort_by_column | $resolveSortByColumns(sort_by_column)$}; separator=","$],
"table_partitions": [$table.table_partitions : { table_partition | $resolveTablePartition(table_partition)$}; separator=","$],
"new_table_name": "$table.new_table_name$",
"parallel_ingestion":{"enable":$if(table.parallel_ingestion.enable)$ $table.parallel_ingestion.enable$ $else$false$endif$,
"max_connections":$if(table.parallel_ingestion.max_connections)$$table.parallel_ingestion.max_connections$$else$null$endif$},
"parallel_hash_ingestion": {"enable": $if(table.parallel_hash_ingestion.enable)$ $table.parallel_hash_ingestion.enable$ $else$false$endif$,
"max_connections": $if(table.parallel_hash_ingestion.max_connections)$$table.parallel_hash_ingestion.max_connections$$else$null$endif$},
"CDC": {
"CDC_process_type":"$table.CDC.CDC_process_type$",
"CDC_type": "$table.CDC.CDC_type$",
"columns_ids": [$table.CDC.columns_ids : { id | $id$}; separator=","$],
"hash_type": "$table.CDC.hash_type$",
"add_audit_columns": $if(table.CDC.add_audit_columns)$$table.CDC.add_audit_columns$$else$false$endif$,
$if(table.CDC.audit_columns)$
"audit_columns": {
"start_date_column_name": "$table.CDC.audit_columns.start_date_column_name$",
"end_date_column_name": "$table.CDC.audit_columns.end_date_column_name$",
"process_id_column_name": "$table.CDC.audit_columns.process_id_column_name$",
"prev_process_id_column_name": "$table.CDC.audit_columns.prev_process_id_column_name$"
},
$endif$
"create_view": $if(table.CDC.create_view)$$table.CDC.create_view$$else$false$endif$,
"view_name": "$table.CDC.view_name$"
},
$if(table.ingest_using_query)$
"ingest_using_query": {
"enable": $if(table.ingest_using_query.enable)$$table.ingest_using_query.enable$$else$false$endif$,
"sql_query": "$table.ingest_using_query.sql_query$"
},
$endif$
"ingestion_mode": {
"enable": $if(table.ingestion_mode.enable)$$table.ingestion_mode.enable$$else$false$endif$,
"mode": "$table.ingestion_mode.mode$"
}
}
>>
EmptyStringAsFalse::=[ "":false, default: true]
resolveAdvancedOptionsFlags(data)::=<<
{
"table_name": "$data.table_name$",
"table_id": $data.table_id$,
"dataplace_id": $data.dataplace_id$,
"schema_id": $data.schema_id$,
"incremental_load": $if(EmptyStringAsFalse.(data.incremental_load.where_clause))$true$else$false$endif$,
"columns_options":  $if(data.columns_options)$
$if(data.columns_options.modified_columns)$ true $else$
$if(data.columns_options.excluded_column_ids)$ true $else$
$if(data.columns_options.virtual_column)$ true $else$ false $endif$
$endif$
$endif$
$else$ false $endif$,
"modified_columns": $if(data.columns_options.modified_columns)$true$else$false$endif$,
"excluded_column_ids": $if(data.columns_options.excluded_column_ids)$true$else$false$endif$,
"virtual_column": $if(data.columns_options.virtual_column)$true$else$false$endif$,
"reorder_columns": $if(data.reorder_columns)$true$else$false$endif$,
"remove_duplicates": $if(data.remove_duplicates.key_columns)$true$else$false$endif$,
"sort_by_columns": $if(data.sort_by_columns)$true$else$false$endif$,
"table_partitions": $if(data.table_partitions)$true$else$false$endif$,
"new_table_name": $if(EmptyStringAsFalse.(data.new_table_name))$true$else$false$endif$,
"parallel_ingestion": $if(data.parallel_ingestion.enable)$true$else$false$endif$,
"parallel_hash_ingestion": $if(data.parallel_hash_ingestion.enable)$true$else$false$endif$,
"CDC": $if(EmptyStringAsFalse.(data.CDC.CDC_type))$true$else$false$endif$,
"ingest_using_query": $if(data.ingest_using_query.enable)$true$else$false$endif$,
"ingestion_mode": $if(data.ingestion_mode.enable)$true$else$false$endif$
}
>>
resolveIncrementalLoad(data)::=<<
"where_clause": "$data.where_clause$",
"condition_values": $if(data.condition_values)$ [ $data.condition_values : { values | $resolveConditionValues(values)$ }; separator=","$ ] $else$ [] $endif$
>>
resolveConditionValues(data)::=<<
{
"place_holder": "$data.place_holder$",
"default_value": "$data.default_value$",
"max_value":$data.max_value$
$if(data.max_value)$
, "max_column_name":"$data.max_column_name$"
, "max_column_id": $data.max_column_id$
$endif$
}
>>
resolveColumnOptions(data)::=<<
"modified_columns": [ $data.modified_columns : { column | $resolveModifiedColumns(column)$}; separator=","$],
"excluded_column_ids": [$data.excluded_column_ids : { id | $id$}; separator=","$],
"virtual_column": [$data.virtual_column : { virtual_column | $resolveVirtualColumn(virtual_column)$}; separator=","$]
>>
resolveVirtualColumn(data)::=<<
{
"column_name": "$data.column_name$",
"column_type": "$data.column_type$",
"spark_sql_expression": "$data.spark_sql_expression$"
}
>>
resolveModifiedColumns(data)::=<<
{
"column_id": $if(data.column_id)$$data.column_id$$else$null$endif$,
"column_info": {
"source_column_name": "$data.column_info.source_column_name$",
"source_column_type": "$data.column_info.source_column_type$",
"destination_column_name": "$data.column_info.destination_column_name$",
"destination_column_type": "$data.column_info.destination_column_type$",
"source_casting_exp":"$data.column_info.source_casting_exp$"
}
}
>>
resolveReorderColumns(data)::=<<
{
"column_name": "$data.column_name$",
"column_id":$if(data.column_id)$$data.column_id$$else$null$endif$,
"is_virtual": $data.is_virtual$,
"order":$data.order$
}
>>
resolveRemoveDuplicatesKeyColumns(data)::=<<
{
"column_name": "$data.column_name$",
"renamed_column": "$data.renamed_column$",
"column_id": $if(data.column_id)$$data.column_id$$else$null$endif$
}
>>
resolveRemoveDuplicatesSortColumns(data)::=<<
{
"column_name": "$data.column_name$",
"renamed_column": "$data.renamed_column$",
"column_id": $if(data.column_id)$$data.column_id$$else$null$endif$,
"sort_by": "$data.sort_by$"
$if(data.sort_null_values)$
,"sort_null_values": "$data.sort_null_values$"
$endif$
}
>>
resolveSortByColumns(data)::=<<
{
"column_name": "$data.column_name$",
"renamed_column": "$data.renamed_column$",
"order_by": "$data.order_by$"
$if(data.sort_null_values)$
,"sort_null_values": "$data.sort_null_values$"
$endif$
}
>>
resolveTablePartition(data)::=<<
{
"column_id": $if(data.column_id)$$data.column_id$$else$null$endif$,
"column_name": "$data.column_name$",
"renamed_column": "$data.renamed_column$"
}
>>
resolveImportIngestionInfo(data)::=<<
{
"cron_type":"$first(data.input_data.data).refresh_freq.cron_type$",
"cron_freq":"$first(data.input_data.data).refresh_freq.cron_freq$",
"cron_timezone":"$first(data.input_data.data).refresh_freq.cron_timezone$",
"consider_timezone": $if(first(data.input_data.data).refresh_freq.consider_timezone)$  $first(data.input_data.data).refresh_freq.consider_timezone$ $else$ false $endif$
$if(first(data.input_data.data).refresh_freq.cron_info)$
,"cron_info":$resolveCronInfo(first(data.input_data.data).refresh_freq.cron_info)$
$endif$
}
>>
resolveIngestionTableFormatJson(data)::=<<
{
"prefix_value": $if(first(data.input_data.data).ingestion_table_format.prefix_value)$"$first(data.input_data.data).ingestion_table_format.prefix_value$"$else$""$endif$
$if(first(data.input_data.data).ingestion_table_format.prefix)$
,"prefix": $first(data.input_data.data).ingestion_table_format.prefix$
$endif$
$if(first(data.input_data.data).ingestion_table_format.database_name)$
,"database_name":$first(data.input_data.data).ingestion_table_format.database_name$
$endif$
$if(first(data.input_data.data).ingestion_table_format.schema_name)$
,"schema_name": $first(data.input_data.data).ingestion_table_format.schema_name$
$endif$
}
>>

//Used by Import
advancedOptions_Import(data)::=<<
{
$if(first(data.input_data.data).ingestion_table_format)$
"ingestion_table_format":$resolveIngestionTableFormatJson(data)$,
$endif$
"flow_details": $flowDetails_Import(data)$
$if(first(data.input_data.data).ingestion_connection_type)$
,"ingestion_connection_type": "$first(data.input_data.data).ingestion_connection_type$"
$endif$
$if(data.asMap.workflow_actions)$
,"workflow_actions": "$data.asMap.workflow_actions$"
$endif$
,"target_relative_path": $if(first(data.input_data.data).target_relative_path)$"$first(data.input_data.data).target_relative_path$"$else$""$endif$
,"overwrite_default_relative_path": $if(first(data.input_data.data).overwrite_default_relative_path)$ $first(data.input_data.data).overwrite_default_relative_path$ $else$ false $endif$
$if(first(data.input_data.data).source_relative_target_path)$
,"source_relative_target_path": "$first(data.input_data.data).source_relative_target_path$"
$endif$
$if(data.asMap.workflow_actions)$
,"workflow_actions": "$data.asMap.workflow_actions$"
$endif$
}
>>

resolveList(list)::=<<
$list:{item | "$item$"}; separator = ","$
>>

flowDetails_Import(data)::=<<
{
"email_notification": $emailNotfication(first(data.input_data.data))$,
"destination_file_format":"$first(data.input_data.data).flow_details.destination_file_format$",
"retry_count": $if(first(data.input_data.data).flow_details.retry_count)$ $first(data.input_data.data).flow_details.retry_count$ $else$ 3 $endif$,
"pipeline_retry": $if(first(data.input_data.data).flow_details.pipeline_retry)$ $first(data.input_data.data).flow_details.pipeline_retry$ $else$ false $endif$,
"schema_drift":$schemaDrift_Import(data)$,
"ignore_data_types":[$resolveList(first(data.input_data.data).flow_details.ignore_data_types)$],
"unsupported_data_types":$unsupportedTypes(first(first(data.input_data.data).flow_details.unsupported_data_types))$,
"pre_conditions": $preConditions(data)$,
"post_conditions": $postConditions(data)$,
"skip_verification": $if(first(data.input_data.data).flow_details.skip_verification)$  $first(data.input_data.data).flow_details.skip_verification$ $else$ false $endif$,
"verification_threshold": $if(first(data.input_data.data).flow_details.verification_threshold)$  "$first(data.input_data.data).flow_details.verification_threshold$" $else$ "10%" $endif$,
"parallel_source_connections" : $if(first(data.input_data.data).flow_details.parallel_source_connections)$ $first(data.input_data.data).flow_details.parallel_source_connections$ $else$ 3 $endif$,
"pipeline_flow_timeout" : $if(first(data.input_data.data).flow_details.pipeline_flow_timeout)$ $first(data.input_data.data).flow_details.pipeline_flow_timeout$ $else$ 20 $endif$
$if(first(data.input_data.data).flow_details.run_only_file_changes)$
,"run_only_file_changes":$first(data.input_data.data).flow_details.run_only_file_changes$
$endif$
$if(first(data.input_data.data).flow_details.git_info)$
,"git_info": $resolveKeys(first(data.input_data.data).flow_details.git_info)$
$endif$
$if(first(data.input_data.data).flow_details.spark_config)$
,"spark_config": $resolveKeys(first(data.input_data.data).flow_details.spark_config)$
$endif$
$if(first(data.input_data.data).flow_details.ignore_null_tables)$
,"ignore_null_tables":$first(data.input_data.data).flow_details.ignore_null_tables$
$endif$
$if(first(data.input_data.data).flow_details.archive_data)$
,"archive_data": $archiveData(data)$
$endif$
}
>>
schemaDrift_Import(data)::=<<
{
"enabled":$if(first(data.input_data.data).flow_details.schema_drift.enabled)$ true $else$ false $endif$,
"email_ids":[$resolveList(first(data.input_data.data).flow_details.schema_drift.email_ids)$]
,"advanced_options_sub_type_id":$if(first(data.input_data.data).flow_details.schema_drift.advanced_options_sub_type_id)$ $first(data.input_data.data).flow_details.schema_drift.advanced_options_sub_type_id$ $else$4$endif$
,"advanced_options_sub_type":$if(first(data.input_data.data).flow_details.schema_drift.advanced_options_sub_type_id)$"$first(data.input_data.data).flow_details.schema_drift.advanced_options_sub_type$"$else$"drop_create_table"$endif$
,"config": $schemaDriftConfig(first(data.input_data.data).flow_details.schema_drift.config)$
}
>>
schemaDriftConfig(config)::=<<
{
"suffix": "$config.suffix$",
"timestamp": "$config.timestamp$"
}
>>
resolveKeys(data)::=<<
{
$data.keys:{k | "$k$":"$data.(k)$"}; separator=","$
}
>>
inconsistentList(data)::=<<
,inconsistentDataTypes as(
insert into nabu.user_defined_trans_for_inconsistent_datatype values $first(data.input_data.data).flow_details.inconsistent_data_types:forEachInconsistent(data);separator=","$
)
>>
archiveData(data)::=<<
{
"enabled": $if(first(data.input_data.data).flow_details.archive_data.enabled)$true$else$false$endif$,
"archive_files_path": "$first(data.input_data.data).flow_details.archive_data.archive_files_path$",
"file_format": "$first(data.input_data.data).flow_details.archive_data.file_format$"
}
>>
forEachInconsistent(item, data)::=<<
((select * from data_movement_id), '$first(data.connection_details).source_type$',LOWER('$first(data.input_data.data).flow_details.destination_file_format$'),
'$first(data.connection_details).destination_type$',$getComputeEngineId(first(data.engine_details).compute_engine_details.compute_engine_id)$,'$item.inconsistent_datatype$','$item.source_stg_function$','$item.intermediate_stg_function$',
'$item.destination_datatype_name$',$item.option_number$, current_timestamp,
'9999-12-31','$data.userDetails.userId$',current_timestamp)
>>
getComputeEngineId(engine_id)::=<<
(select em.engine_id
from nabu.engine_mapping_lookup em
inner join nabu.compute_engine ce on em.engine_mapping_id = ce.engine_mapping_id
and ce.valid_to_ts = '9999-12-31' and em.valid_to_ts = '9999-12-31' and compute_engine_id =$engine_id$)
>>

preConditions(data)::=<<
{
"enabled": $if(first(data.input_data.data).flow_details.pre_conditions.enabled)$ $first(data.input_data.data).flow_details.pre_conditions.enabled$ $else$ false $endif$,
"pipeline_timeout": $if(first(data.input_data.data).flow_details.pre_conditions.pipeline_timeout)$ $first(data.input_data.data).flow_details.pre_conditions.pipeline_timeout$ $else$ 8 $endif$,
"pipeline_details":[$pipelineList(first(data.input_data.data).flow_details.pre_conditions.pipeline_details)$]
}
>>
postConditions(data)::=<<
{
"enabled": $if(first(data.input_data.data).flow_details.post_conditions.enabled)$ $first(data.input_data.data).flow_details.post_conditions.enabled$ $else$ false $endif$,
"rest_api_details": [$restAPIList(first(data.input_data.data).flow_details.post_conditions.rest_api_details)$]
}
>>
pipelineList(list)::=<<
$list:{item | $printPipelineObject(item)$}; separator = ","$
>>
printPipelineObject(object)::=<<
{
"data_movement_id": $object.data_movement_id$,
"data_movement_name":"$object.data_movement_name$",
"status_code_description": "$object.status_code_description$",
"status_code_id": $object.status_code_id$
}
>>
restAPIList(list)::=<<
$list:{item | $printRestAPIObject(item)$}; separator = ","$
>>
printRestAPIObject(object)::=<<
{
"rest_api_id": $if(object.rest_api_id)$ $object.rest_api_id$ $else$ null $endif$,
"status_code_description": "$object.status_code_description$",
"status_code_id": $if(object.status_code_id)$ $object.status_code_id$ $else$ null $endif$,
"rest_api_name": "$object.rest_api_name$",
"ordinal_position": $if(object.ordinal_position)$ $object.ordinal_position$ $else$ null $endif$,
"payload": $if(object.payload)$ "$object.payload$" $else$ null $endif$
}
>>
logTemplate_add_ingestion(data)::=<<
$if(
(first(data.warnings).missing_source_details)
||  (first(data.warnings).missing_destination_details)
||  (first(data.warnings).access_denied_compute_engine)
||  (first(data.warnings).missing_advance_table_details.missing_tables)
||  (first(data.warnings).missing_advance_table_details.missing_columns)
||  (first(data.warnings).missing_advance_table_details.missing_schemas)
||  (first(data.warnings).missing_advance_table_details.missing_dataplaces)
||  (first(data.warnings).connection_error)
||  (first(data.warnings).missing_compute_engine)
||  (first(data.warnings).missing_workflow_engine)
||  (first(data.warnings).access_denied_compute_engine)
||  (first(data.warnings).invalid_pre_conditions)
||  (first(data.warnings).used_data_movement_name)
)$
select 'Import Failed. Please check the warnings' as message
$else$
User $data.userDetails.userId$ added an ingestion pipeline with data_movement_name '$first(data.input_data.data).data_movement_name$' where connection_type is '$first(data.connection_details).source_type$'
$endif$
>>

unSupportedDataTypesMapping_template(data)::=<<
$if(
(first(data.warnings).missing_source_details)
||  (first(data.warnings).missing_destination_details)
||  (first(data.warnings).access_denied_compute_engine)
||  (first(data.warnings).missing_advance_table_details.missing_tables)
||  (first(data.warnings).missing_advance_table_details.missing_columns)
||  (first(data.warnings).missing_advance_table_details.missing_schemas)
||  (first(data.warnings).missing_advance_table_details.missing_dataplaces)
||  (first(data.warnings).connection_error)
||  (first(data.warnings).missing_compute_engine)
||  (first(data.warnings).missing_workflow_engine)
||  (first(data.warnings).access_denied_compute_engine)
||  (first(data.warnings).invalid_pre_conditions)
||  (first(data.warnings).used_data_movement_name)
)$

$else$

$unSupportedDataTypesMapping_resolveTemplate(first(first(data.input_data.data).flow_details.unsupported_data_types), data)$

$endif$
>>

unSupportedDataTypesMapping_resolveTemplate(datatypes, data)::=<<
$if(datatypes.null)$
insert into nabu.user_defined_trans_for_unsupported_datatype(data_movement_id, source_type,intermediate_type,destination_type,engine_id,source_datatype_name,advanced_options_sub_type_id,valid_from,valid_to_ts, cru_by, cru_ts)
values $datatypes.null:foreachUnsupportedListNull(data);separator=","$;
$endif$
$if(datatypes.asis)$
insert into nabu.user_defined_trans_for_unsupported_datatype(data_movement_id, source_type,intermediate_type,destination_type,engine_id,source_datatype_name,advanced_options_sub_type_id,valid_from,valid_to_ts, cru_by, cru_ts)
values $datatypes.asis:foreachUnsupportedListAsis(data);separator=","$;
$endif$
$if(datatypes.ignore)$
insert into nabu.user_defined_trans_for_unsupported_datatype(data_movement_id, source_type,intermediate_type,destination_type,engine_id,source_datatype_name,advanced_options_sub_type_id,valid_from,valid_to_ts, cru_by, cru_ts)
values $datatypes.ignore:foreachUnsupportedListIgnore(data);separator=","$;
$endif$
$if(datatypes.customtext)$
insert into nabu.user_defined_trans_for_unsupported_datatype(data_movement_id, source_type,intermediate_type,destination_type,engine_id,source_datatype_name,advanced_options_sub_type_id,valid_from,valid_to_ts, cru_by, cru_ts, additional_info)
values $datatypes.customtext:foreachUnsupportedListCustomtext(data);separator=","$;
$endif$
>>

foreachUnsupportedListNull(item, data)::=<<
($first(data.data).data_movement_id$, '$first(data.connection_details).source_type$',LOWER('$first(data.input_data.data).flow_details.destination_file_format$'),
'$first(data.connection_details).destination_type$',$getComputeEngineId(first(data.engine_details).compute_engine_details.compute_engine_id)$,'$item$',15,current_timestamp,
'9999-12-31','$data.userDetails.userId$',current_timestamp)
>>
foreachUnsupportedListAsis(item, data)::=<<
($first(data.data).data_movement_id$, '$first(data.connection_details).source_type$',LOWER('$first(data.input_data.data).flow_details.destination_file_format$'),
'$first(data.connection_details).destination_type$',$getComputeEngineId(first(data.engine_details).compute_engine_details.compute_engine_id)$,'$item$',14,current_timestamp,
'9999-12-31','$data.userDetails.userId$',current_timestamp)
>>
foreachUnsupportedListIgnore(item, data)::=<<
($first(data.data).data_movement_id$, '$data.asMap.source_type$',LOWER('$data.asMap.flow_details.destination_file_format$'),
'$data.asMap.destination_type$',$getComputeEngineId(data.asMap.compute_engine_id)$,'$item$',16,current_timestamp,
'9999-12-31','$data.userDetails.userId$',current_timestamp)
>>
foreachUnsupportedListCustomtext(item,data)::=<<
($first(data.data).data_movement_id$, '$data.asMap.source_type$',LOWER('$data.asMap.flow_details.destination_file_format$'),
'$data.asMap.destination_type$',$getComputeEngineId(data.asMap.compute_engine_id)$,'$item.source_datatype_name$',17,current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp, '$resolveUnsupportedCustomText(item)$')
>>
resolveUnsupportedCustomText(map)::=<<
{
"target_value":"$map.target_value$"
}
>>
ingestionWarningsFormatter(data)::=<<
select
$if(first(data.input_data.data).advance_table_options)$
(select '$first(data.missing_advance_table_details).non_exist_data$'::json  as missing_advance_table_details),
$endif$
(select json_object_agg(warning_type, warning::json) as missing_source_details  from
jsonb_each_text(
'{
$data.source_non_exist_data:{item | $JSONStringResolve(item)$}; separator = ","$
}'::jsonb) as n(warning_type,warning)
where coalesce(warning,'') not in ('','[]','{}')
),
(select json_object_agg(warning_type, warning::json) as missing_destination_details  from
jsonb_each_text(
'{
$data.destination_data:{item | $JSONStringResolve(item)$}; separator = ","$
}'::jsonb) as n(warning_type,warning)
where coalesce(warning,'') not in ('','[]','{}') and warning_type in ('missing_schema','missing_data_connection','access_denied')
)
$if(first(data.connection_details).error_msg)$,(select '$first(data.connection_details).error_msg$'  as connection_error) $endif$
$if(!first(data.engine_details).compute_engine_details)$,(select '$first(data.input_data.data).compute_engine_name$' as missing_compute_engine ) $endif$
$if(!first(data.engine_details).workflow_engine_details)$,(select '$first(data.input_data.data).workflow_engine_name$' as missing_workflow_engine ) $endif$
$if(first(data.engine_details).access_denied)$,(select '$first(data.engine_details).access_denied$' as access_denied_compute_engine ) $endif$
,( with cte as (
$if(first(data.data_movement_tag_details))$
$data.data_movement_tag_details:{item | select '$item.tag_warning$' as tag_warning }; separator = "\n union all \n"$)
$else$
select '' as tag_warning)
$endif$
select json_agg(tag_warning) as tag_warning from cte where tag_warning not in (''))
$if(first(data.advance_options_pipeline).non_exist_pre_condition_pipelines)$,(select '$first(data.advance_options_pipeline).non_exist_pre_condition_pipelines$'::json as invalid_pre_conditions) $endif$
,(select '$first(data.input_data.data).data_movement_name$' as used_data_movement_name from
nabu.data_movement where data_movement_name='$first(data.input_data.data).data_movement_name$' and valid_to_ts='9999-12-31' )
>>


// This template used to import a Data Domain
// @created_by Swaroop(JS1511)
// @Api_Path : "http://localhost:8893/fireshots/nabu/upd/sq/restCatalog/importDataDomain_local"

importDataDomain_local(data)::=<<
{
  "input_data": $data.asString$,
  "sequential_queries": [
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "getConnectionType_dataDomain",
      "query_output_key": "connection_type",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "validateConnectionType_dataDomain",
      "query_output_key": "connection_details",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "getTagList_dataDomain",
      "query_output_key": "tags_list",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "getConfigurations_dataDomain",
      "query_output_key": "datastore_details",
      "query_type":"select",
      "result_set_to_json" : "Y"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "getDataDomainComponentTypeInfo",
      "query_output_key": "source_component_type",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "get_data_connection_access",
      "query_output_key": "access",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "validateDataDomain_helper",
      "query_output_key": "dataplace_details",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "getDataDomain_message",
      "query_output_key":"source_data_connections",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "getDataDomain_warning",
      "query_output_key":"source_non_exist_data",
      "query_type":"select"
    },


    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "validateDataDomain_helper",
      "query_output_key": "dataplace_details_query",
      "query_type":"string"
    },
    {
      "query_template_group": "$data.DirPath$/sel/manageImport.stg",
      "query_template_name": "getDataDomain_warning",
      "query_output_key":"dataplace_warnings_query",
      "query_type":"string"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "getDataDomainImportWarnings",
      "query_output_key":"import_warnings",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "renderDataDomainImportWarnings",
      "query_output_key":"import_warnings",
      "query_type":"json"
    },

    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "generateAddDataDomainInputData",
      "query_output_key":"data",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "renderAddDataDomainInputData",
      "query_output_key":"input_data",
      "query_type":"json"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "renderAddDataDomainInputData",
      "query_output_key":"asMap",
      "query_type":"json"
    },

    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "checkDomainCreation",
      "query_output_key":"check_create",
      "query_type":"select"
    },

    {
      "query_template_group": "$data.STPath$/manageDatastore.stg",
      "query_template_name": "getMetadataCategory",
      "query_output_key":"metadata_category_query",
      "query_type":"string"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "getMetadataCategory_dataDomainImport",
      "query_output_key":"metadata_category",
      "query_type":"select"
    },

    {
      "query_template_group": "$data.STPath$/manageDatastore.stg",
      "query_template_name": "addDatastore_template",
      "query_output_key":"addDatastore_query",
      "query_type":"string"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "addDatastore_template",
      "query_output_key":"data",
      "query_type":"select"
    },

    {
      "query_template_group": "$data.STPath$/manageDatastore.stg",
      "query_template_name": "addDatastoreComputeEngineMapping",
      "query_output_key":"datastore_compute_engine_mapping_query",
      "query_type":"string"
    },
    {
      "query_template_group": "$data.STPath$/manageDatastore.stg",
      "query_template_name": "addDatastoreCollectionMapping",
      "query_output_key":"datastore_collection_mapping_query",
      "query_type":"string"
    },
    {
      "query_template_group": "$data.STPath$/manageDatastore.stg",
      "query_template_name": "addDatastoreIndexingMapping",
      "query_output_key":"datastore_indexing_mapping_query",
      "query_type":"string"
    },


    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "addDatastoreComputeEngineMapping",
      "query_output_key":"datastore_compute_engine_mapping",
      "query_type":"insert"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "addDatastoreCollectionAndIndexingMapping",
      "query_output_key":"datastore_collection_mapping",
      "query_type":"insert"
    }

  ],
  "output_keys":["import_warnings","data"]
}
>>

generateAddDataDomainInputData(data)::=<<
with inputJSON as(
 select '$data.asString$'::jsonb as datastore_info
)
,tags as(
 select coalesce(
 $if(first(data.tags_list))$
 (
    select json_agg(row_to_json(a))
    from (values
         $data.tags_list: {tag |  ($getOrDefaultInt(tag.tag_label_id)$::int4, $getOrDefaultInt(tag.tag_category_id)$::int4,'$tag.tag_value$','$tag.tag_category_name$')}; separator=",\n"$
    )a (tag_label_id,tag_category_id,tag_value,tag_category_name)
    where tag_label_id is not null and tag_category_id is not null
 ),
 $endif$
 '[]')::jsonb
)
,dataplace_details as(
 select coalesce(
 (
    select jsonb_agg(row_to_json(a))
    from(
        $data.dataplace_details_query$
    )a
 ),
 '[]')::jsonb
)
select
$insertEngineIds(first(data.datastore_details))$ ||
jsonb_build_object('tags', (select * from tags)) ||
jsonb_build_object('datastore_details', (select * from dataplace_details)) as input_data
from inputJSON
>>

insertEngineIds(data)::=<<
jsonb_set(jsonb_set(jsonb_set(jsonb_set(jsonb_set(
  datastore_info #> '{datastore_details,0}',
 '{indexing_configuration,compute_engine_id}', $to_jsonb_id(data.indexing_configuration.compute_engine_details.compute_engine_id)$),
 '{indexing_configuration,workflow_engine_id}', $to_jsonb_id(data.indexing_configuration.workflow_engine_details.workflow_engine_id)$),
 '{profiling_configuration,compute_engine_id}', $to_jsonb_id(data.profiling_configuration.compute_engine_details.compute_engine_id)$),
 '{profiling_configuration,workflow_engine_id}', $to_jsonb_id(data.profiling_configuration.workflow_engine_details.workflow_engine_id)$),
 '{filter_resolving_configuration,workflow_engine_id}', $to_jsonb_id(data.filter_resolving_configuration.workflow_engine_details.workflow_engine_id)$)
>>

to_jsonb_id(id)::=<<
$if(id)$to_jsonb($id$)$else$'null'$endif$
>>

renderAddDataDomainInputData(data)::=<<
$first(data.data).input_data$
>>

getDataDomainImportWarnings(data)::=<<
with unqiueNameCheck as(
 select not exists(select * from nabu.datastore where valid_to_ts = '9999-12-31' and datastore_name = '$first(data.input_data.datastore_details).datastore_name$') unique_name
)
,dataplace_details_warnings as(
 select coalesce(
 (
    select row_to_json(a)
    from(
        $data.dataplace_warnings_query$
    )a
 ),
 '[]')::jsonb
)
select
jsonb_build_object('data_connection_warnings', (select * from dataplace_details_warnings))||
jsonb_build_object('uniqueName', (select * from unqiueNameCheck))||
jsonb_build_object('connection_type_warning', nullif('$first(data.connection_details).error_msg$',''))
as warnings
>>

renderDataDomainImportWarnings(data)::=<<
$first(data.import_warnings).warnings$
>>

checkDomainCreation(data)::=<<
select
$if(data.import_warnings.uniqueName
&& (!data.import_warnings.connection_type_warning)
&& first(data.input_data.datastore_details)
&& data.input_data.indexing_configuration.compute_engine_id
&& data.input_data.indexing_configuration.workflow_engine_id
&& data.input_data.filter_resolving_configuration.workflow_engine_id
)$
true
$else$
false
$endif$
as create
>>

testDomainCreation(data)::=<<
select $if(first(data.check_create).create)$'OK'$else$'Fail'$endif$
>>

getMetadataCategory_dataDomainImport(data)::=<<
$if(first(data.check_create).create)$
$data.metadata_category_query$
$else$
select where false
$endif$
>>

addDatastore_template(data)::=<<
$if(first(data.check_create).create)$
$data.addDatastore_query$
$else$
select 'Failed to import the Data Domain. Please check the warnings' as error_msg
$endif$
>>

addDatastoreComputeEngineMapping(data)::=<<
$if(first(data.check_create).create && first(data.data).datastore_id)$
$data.datastore_compute_engine_mapping_query$
$endif$
>>

addDatastoreCollectionAndIndexingMapping(data)::=<<
$if(first(data.check_create).create && first(data.data).datastore_id)$
$data.datastore_collection_mapping_query$;
$data.datastore_indexing_mapping_query$;
$endif$
>>

getOrDefaultInt(int)::=<<
$int; null="null"$
>>

// This template is used to add a Workflow Orchestration
// @created_by Dharani Darapuneni(DD1109)
// @Api_Path : "http://localhost:port/fireshots/nabu/upd/sq/restCatalog/addWorkflow"

addWorkflow(data)::=<<
{
  "input_data": $data.asQuotedString$,
  "sequential_queries": [
    {
      "query_template_group": "$data.STPath$/manageWorkflowOrchestration.stg",
      "query_template_name": "addWorkflow_schema",
      "validation_key": "input_data",
      "query_type":"validation"
    },
    {
      "query_template_group": "$data.STPath$/manageWorkflowOrchestration.stg",
      "query_template_name": "addWorkflow_checks",
      "query_output_key": "checks",
      "query_type": "select",
      "post_process": ["checks"]
    },
    {
      "query_template_group": "$data.STPath$/manageWorkflowOrchestration.stg",
      "query_template_name": "addWorkflow_template",
      "query_output_key":"data",
      "query_type":"select"
    }
  ],
  "output_keys":["data"]
}
>>


// This template is used to modify a Workflow
// @created_by Dharani Darapuneni(DD1109)
// @Api_Path : "http://localhost:port/fireshots/nabu/upd/sq/restCatalog/modifyWorkflow"

modifyWorkflow(data)::=<<
{
  "input_data": $data.asQuotedString$,
  "sequential_queries": [
    {
      "query_template_group": "$data.STPath$/manageWorkflowOrchestration.stg",
      "query_template_name": "addWorkflow_schema",
      "validation_key": "input_data",
      "query_type":"validation"
    },
    {
      "query_template_group": "$data.STPath$/manageWorkflowOrchestration.stg",
      "query_template_name": "modifyWorkflow_checks",
      "query_output_key": "checks",
      "query_type": "select",
      "post_process": ["checks"]
    },
    {
      "query_template_group": "$data.STPath$/manageWorkflowOrchestration.stg",
      "query_template_name": "modifyWorkflow_archive",
      "query_output_key":"archive",
      "query_type":"update"
    },
    {
      "query_template_group": "$data.STPath$/manageWorkflowOrchestration.stg",
      "query_template_name": "modifyWorkflow_template",
      "query_output_key":"data",
      "query_type":"update"
    }
  ],
  "output_keys":["data"]
}
>>


// This template is used to run the workflow
// @created_by Dharani Darapuneni (DD1109)
// @Api_Path : "http://localhost:port/fireshots/nabu/upd/sq/restCatalog/runWorkflowNow"

runWorkflowNow(data)::=<<
{
  "input_data": $data.asString$,
  "sequential_queries": [
    {
      "query_template_group": "$data.STPath$/manageWorkflowOrchestration.stg",
      "query_template_name": "runWorkflowNow_schema",
      "validation_key":"input_data",
      "query_type":"validation"
    },
    {
        "query_template_group": "$data.STPath$/manageWorkflowOrchestration.stg",
        "query_template_name": "runWorkflowNow_checks",
        "query_output_key":"checks",
        "query_type":"select",
        "post_process": ["checks"]
    },
    {
      "query_template_group": "$data.STPath$/manageWorkflowOrchestration.stg",
      "query_template_name": "emptyTemplate",
      "query_output_key": "message_uuid",
      "query_type": "uuid"
    },
    {
      "query_template_group": "$data.STPath$/manageWorkflowOrchestration.stg",
      "query_template_name": "emptyTemplate",
      "query_output_key": "batch_id",
      "query_type": "uniqueId"
    },
    {
      "query_template_group": "$data.STPath$/manageWorkflowOrchestration.stg",
      "query_template_name": "insertJobScheduleDetails",
      "query_output_key": "jobScheduleDetails",
      "query_type": "select"
    },
    {
      "query_template_group": "$data.STPath$/manageWorkflowOrchestration.stg",
      "query_template_name": "getWorkflowDetails",
      "query_output_key": "workflowDetails",
      "query_type": "select"
    },
        {
          "query_template_group": "$data.STPath$/manageWorkflowOrchestration.stg",
          "query_template_name": "getenv_temp",
          "processLogic": {
                "processClass": "com.modak.fireshots.processors.impl.EnvProcessor",
                "envVariable":"env_variable",
                "result_key": "topic"
           },
          "query_output_key": "topic",
          "query_type": "select"
        },
    {
      "query_template_group": "$data.STPath$/manageWorkflowOrchestration.stg",
      "query_template_name": "setIds",
      "query_output_key": "getId",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.STPath$/manageWorkflowOrchestration.stg",
      "query_template_name": "preInsert_initFlowStatus",
      "query_output_key": "init_status",
      "query_type":"update"
    },
$if(useRabbitMQ.(true))$
    {
      "query_template_group": "$data.STPath$/manageWorkflowOrchestration.stg",
      "query_template_name": "information_msg",
      "query_output_key": "message_map",
      "query_type": "json"
    },
    {
      "query_template_group": "$data.STPath$/manageWorkflowOrchestration.stg",
      "query_template_name": "getRabbitMqDetails",
      "query_output_key": "rabbitMqDetails",
      "query_type":"jsonArray"
    },
    {
      "query_template_group": "$data.STPath$/manageWorkflowOrchestration.stg",
      "query_template_name": "emptyTemplate",
      "query_output_key": "status",
      "service_name": "rabbitmqService",
      "query_type": "publish"
    },
$else$
    {
      "query_template_group": "$data.STPath$/manageWorkflowOrchestration.stg",
      "query_template_name": "getKafkaConfigs",
      "query_output_key": "kafka_configs",
      "query_type": "select",
      "result_set_to_json": "Y"
    },
    {
      "query_template_group": "$data.STPath$/manageWorkflowOrchestration.stg",
      "query_template_name": "getKafkaDetails",
      "query_output_key": "kafkaDetails",
      "query_type": "select"
    },
    {
      "query_template_group": "$data.STPath$/manageWorkflowOrchestration.stg",
      "query_template_name": "information_msg",
      "processLogic":{
        "processClass":"com.modak.fireshots.processors.impl.KafkaProducerProcessor",
        "process_key":"status"
      },
      "query_output_key": "status",
      "query_type": "json"
    },
$endif$
    {
      "query_template_group": "$data.STPath$/manageWorkflowOrchestration.stg",
      "query_template_name": "postInsert_initFlowStatus",
      "query_output_key": "end_status",
      "query_type":"update"
    },
    {
      "query_template_group": "$data.STPath$/manageWorkflowOrchestration.stg",
      "query_template_name": "postInsertCheckPointStatus",
      "query_output_key": "flow_status",
      "query_type":"select"
    },
    {
        "query_template_group": "$data.STPath$/manageWorkflowOrchestration.stg",
        "query_template_name": "getBatchIdAsString",
        "query_output_key": "batch_id",
        "query_type": "string"
    }
  ],
  "output_keys":["status","batch_id"]
}
>>

runWorkflowNow_schema(data)::=<<
{
    "\$schema": "http://json-schema.org/draft-04/schema#",
    "title": "Start workflow run",
    "type": "object",
	  "required": [
  		  "workflow_orch_id"
	  ],
    "properties":{
        "workflow_orch_id": {
            "description": "Unique identifier of a workflow_orch_id",
            "type": "integer",
		    "minimum": 1
        }
    }
}
>>

runWorkflowNow_checks(data)::=<<
$workflowOrchestrationChecks(data, ["valid","active","access"])$
>>

emptyTemplate(data)::=<<>>

getBatchIdAsString(data)::=<<
$data.batch_id$
>>

insertJobScheduleDetails(data)::=<<
with update_job_schedule_details_ts as (
    update nabu.job_schedule_details
    set valid_to_ts = current_timestamp
    where workflow_orch_id = $data.input_data.workflow_orch_id$
    and valid_to_ts = '9999-12-31'
    and job_type_id in (select job_type_id from nabu.job_type_lookup where job_type in ('workflow_orch','ondemand_workflow_orch'))
)
INSERT INTO nabu.job_schedule_details(job_type_id, workflow_orch_id,object_id,refresh_frequency,
additional_properties, valid_from_ts, valid_to_ts, cru_by, cru_ts) VALUES
((select job_type_id from nabu.job_type_lookup where job_type ='ondemand_workflow_orch'),$data.input_data.workflow_orch_id$,null,
null,null,current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp) returning job_schedule_id
>>

getWorkflowDetails(data)::=<<
select
wo.workflow_orch_id ,workflow_orch_name, contact_info from nabu.workflow_orchestration wo
inner join nabu.job_schedule_details jsd
on jsd.workflow_orch_id =wo.workflow_orch_id
where jsd.job_type_id = (select job_type_id from nabu.job_type_lookup jtl where jtl.job_type = 'ondemand_workflow_orch')
and wo.workflow_orch_id  = $data.input_data.workflow_orch_id$
and job_schedule_id=$first(data.jobScheduleDetails).job_schedule_id$
>>

setIds(data)::=<<
select
cast((extract(epoch from now())*1000) as bigint)::text as initial_ts,
cast((extract(epoch from now())*100) as bigint)::text||$first(data.jobScheduleDetails).job_schedule_id$||1 as flow_id, --flow_id is used for init_flow_id,
cast((extract(epoch from now())*1000) as bigint)::text||$data.input_data.workflow_orch_id$ as process_id,
$data.batch_id$ as batch_id,
'workflow_orch_'||to_char(current_timestamp, 'YYYYMMDD') as batch_name,
$data.input_data.workflow_orch_id$ as workflow_orch_id,
(select job_type_id from nabu.job_type_lookup where job_type ='ondemand_workflow_orch') as job_type_id,
$first(data.jobScheduleDetails).job_schedule_id$ as job_schedule_id,
(select cru_by from nabu.job_schedule_details where job_schedule_id = $first(data.jobScheduleDetails).job_schedule_id$) as job_scheduled_user_id
>>

getKafkaConfigs(data)::=<<
select producer_config,consumer_config
from nabu.kafka k where kafka_id=1;
>>

//Incase Kafka is of Kerberos mode, we need to remove escape characters(keyTab key) present in the producer configs
getKafkaDetails(data)::=<<
select k.kafka_id,kafka_brokers,
zookeeper_urls,private_key_path,public_key_path as public_key_file_path,
'$renderJsonObject(first(data.kafka_configs).producer_config)$'::jsonb as producer_config,
'$renderJsonObject(first(data.kafka_configs).consumer_config)$'::jsonb as consumer_config
from nabu.kafka k where kafka_id=1;
>>

renderJsonObject(data)::=<<
{
$data.keys:{k | "$k$":"$data.(k)$"}; separator=","$
}
>>

getenv_temp(data)::=<<
select 'NABU_WORKFLOW_TOPIC' as env_variable
>>

preInsert_initFlowStatus(data)::=<<
INSERT INTO nabu.init_flow_status
(init_flow_id, batch_id, job_schedule_id, process_id, compute_engine_id, workflow_orch_id, error_msg, error_stack, job_type_id, status_code_id, flow_ts, additional_info)
VALUES
($first(data.getId).flow_id$, $data.batch_id$, $first(data.jobScheduleDetails).job_schedule_id$, $first(data.getId).process_id$,
NULL, $data.input_data.workflow_orch_id$, NULL, NULL,
(select job_type_id from nabu.job_type_lookup where job_type = 'ondemand_workflow_orch'), (select status_code_id from nabu.status_code_lookup where status_code='FLOW_STARTED'),
now(), NULL);
>>

information_msg(data)::=<<
{
  "bot_metadata": {
        "message_topic":"$data.topic.envValue$",
        "topic": "$data.topic.envValue$",
        "batch_id": $first(data.getId).batch_id$,
        "userId": "$first(data.getId).job_scheduled_user_id$"
    },
  "bot_tasks": [
    {
      "task_name": "workflow_input",
      "input_data":{ $input_data(first(data.getId), first(data.workflowDetails))$ }
    }
  ]
}
>>

input_data(data, workflowDetails)::=<<
"source_info": {
  "workflow_orch_id": "$data.workflow_orch_id$",
  "workflow_orch_name": "$workflowDetails.workflow_orch_name$",
  "contact_info": $workflowDetails.contact_info$
},
"run_attributes": {}
>>

postInsert_initFlowStatus(data)::=<<
INSERT INTO nabu.init_flow_status
(init_flow_id, batch_id, job_schedule_id, process_id, compute_engine_id, workflow_orch_id, error_msg, error_stack, job_type_id, status_code_id, flow_ts, additional_info)
VALUES
($first(data.getId).flow_id$, $data.batch_id$, $first(data.jobScheduleDetails).job_schedule_id$, $first(data.getId).process_id$,
NULL, $data.input_data.workflow_orch_id$,
$if(data.status.error_msg)$ '$data.status.error_msg$' $else$ NULL $endif$, $if(data.status.error_stack)$ '$data.status.error_stack$' $else$ NULL $endif$,
(select job_type_id from nabu.job_type_lookup where job_type = 'ondemand_workflow_orch'),
(select status_code_id from nabu.status_code_lookup where status_code = $if(data.status.status)$ 'SUCCESS' $else$ 'ERROR' $endif$ and status_code_type = 'BOT_FLOW'),
now(), NULL);
>>

postInsertCheckPointStatus(data)::=<<
$if(data.status.status)$
with status as(
INSERT INTO nabu.workflow_checkpoint_status
(workflow_orch_id,batch_id,status,status_code_id,error_msg,error_stack,start_time,end_time,valid_from_ts,valid_to_ts,additional_info)
VALUES
($data.input_data.workflow_orch_id$,$data.batch_id$,
'PROVISIONING',(select status_code_id from nabu.status_code_lookup where status_code = 'PROVISIONING' and status_code_type = 'WORKFLOW_NODE'),
$if(data.status.error_msg)$ '$data.status.error_msg$' $else$ NULL $endif$,
$if(data.status.error_stack)$ '$data.status.error_stack$' $else$ NULL $endif$,
now(),null,
now(),
'9999-12-31',null)
ON CONFLICT (  workflow_orch_id, batch_id) DO NOTHING
)
select $data.input_data.workflow_orch_id$ as workflow_orch_id ;
$else$
select
$endif$
>>


// This template is used to delete a workflow orchestration
// @created_by Rakesh (RG0706)
// @Api_Path : "http://localhost:port/fireshots/nabu/del/sq/manageWorkflowOrchestration/deleteWorkflow"

deleteDataflow(data)::=<<
{
  "input_data": $data.asString$,
  "sequential_queries": [
    {
      "query_template_group": "$data.DirPath$/del/manageWorkflowOrchestration.stg",
      "query_template_name": "deleteWorkflowOrchestration_schema",
      "validation_key": "input_data",
      "query_type":"validation"
    },
    {
      "query_template_group": "$data.DirPath$/del/manageWorkflowOrchestration.stg",
      "query_template_name": "deleteWorkflowOrchestration_checks",
      "query_output_key": "checks",
      "query_type": "select",
      "post_process": ["checks"]
    },
    {
      "query_template_group": "$data.DirPath$/del/manageWorkflowOrchestration.stg",
      "query_template_name": "deleteWorkflowOrchestration_template",
      "query_output_key":"data",
      "query_type":"update"
    }
  ],
  "output_keys":["data"]
}
>>


// This template is used to delete the dataConnection
// @created_by Kusuri Dheeraj Kumar (KD2106)
// API_Path: http://localhost:8893/fireshots/nabu/upd/sq/restCatalog/deleteDataConnection

deleteDataConnection(data)::=<<
{
  "input_data": $data.asString$,
  "sequential_queries": [
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "deleteDataConnection_schema",
      "validation_key": "input_data",
      "query_type": "validation"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "checkAccessForSuperAdminRole",
      "query_output_key": "checkAccess",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "dataConnection_checks",
      "query_output_key": "checks",
      "query_type":"select",
      "post_process": ["checks"]
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "deleteDataConnection_template",
      "query_output_key": "data",
      "query_type": "update"
    }
  ],
  "output_keys": [
    "data"
  ]
}
>>

deleteDataConnection_schema(data)::=<<
{
  "\$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "properties": {
    "data_connection_id": {
      "type": "integer"
    }
  },
  "required": [
    "data_connection_id"
  ]
}
>>

deleteDataConnection_template(data)::=<<
update nabu.dataplace
set valid_to_ts = now(),
mod_by='$data.userDetails.userId$',
mod_ts=now()
where dataplace_id = $data.input_data.data_connection_id$
and valid_to_ts = '9999-12-31';

update nabu.dataplace_relational_component
set valid_to_ts = now()
where dataplace_id = $data.input_data.data_connection_id$
and valid_to_ts = '9999-12-31';

update nabu.dataplace_table_metadata
set valid_to_ts = now()
where dataplace_id = $data.input_data.data_connection_id$
and valid_to_ts = '9999-12-31';

update nabu.dataplace_column_metadata
set valid_to_ts = now()
where dataplace_id = $data.input_data.data_connection_id$
and valid_to_ts = '9999-12-31';

update nabu.dataplace_file_system_component
set valid_to_ts = now()
where dataplace_id = $data.input_data.data_connection_id$
and valid_to_ts = '9999-12-31';

update nabu.dataplace_file_documentum_metadata
set valid_to_ts = now()
where dataplace_id = $data.input_data.data_connection_id$
and valid_to_ts = '9999-12-31';

update nabu.dataplace_file_drive_metadata
set valid_to_ts = now()
where dataplace_id = $data.input_data.data_connection_id$
and valid_to_ts = '9999-12-31';

update nabu.dataplace_file_metadata
set valid_to_ts = now()
where dataplace_id = $data.input_data.data_connection_id$
and valid_to_ts = '9999-12-31';

update nabu.dataplace_file_sharepoint_metadata
set valid_to_ts = now()
where dataplace_id = $data.input_data.data_connection_id$
and valid_to_ts = '9999-12-31';

update nabu.dataplace_semi_structured_column_metadata
set valid_to_ts = now()
where dataplace_id = $data.input_data.data_connection_id$
and valid_to_ts = '9999-12-31';

update nabu.dataplace_index_column
set valid_to_ts = now()
where dataplace_id = $data.input_data.data_connection_id$
and valid_to_ts = '9999-12-31';

update nabu.dataplace_table_privileges
set valid_to_ts = now()
where dataplace_id = $data.input_data.data_connection_id$
and valid_to_ts = '9999-12-31';

update nabu.table_metadata_estimated_rows
set valid_to_ts = now()
where dataplace_id = $data.input_data.data_connection_id$
and valid_to_ts = '9999-12-31';

update nabu.partition_table_info
set valid_to_ts = now()
where dataplace_id = $data.input_data.data_connection_id$
and valid_to_ts = '9999-12-31';

update nabu.partition_column_info
set valid_to_ts = now()
where dataplace_id = $data.input_data.data_connection_id$
and valid_to_ts = '9999-12-31';

update nabu.partitions_info
set valid_to_ts = now()
where dataplace_id = $data.input_data.data_connection_id$
and valid_to_ts = '9999-12-31';

update nabu.amp_info
set valid_to_ts = now()
where dataplace_id = $data.input_data.data_connection_id$
and valid_to_ts = '9999-12-31';

update nabu.dataplace_file_sharepoint_metadata
set valid_to_ts = now()
where dataplace_id = $data.input_data.data_connection_id$
and valid_to_ts = '9999-12-31';

update nabu.dataplace_sharepoint_semi_structured_column_metadata
set valid_to_ts = now()
where dataplace_id = $data.input_data.data_connection_id$
and valid_to_ts = '9999-12-31';

update nabu.dataplace_collection_metadata
set valid_to_ts = now()
where dataplace_id = $data.input_data.data_connection_id$
and valid_to_ts = '9999-12-31';

update nabu.dataplace_collection_field_metadata
set valid_to_ts = now()
where dataplace_id = $data.input_data.data_connection_id$
and valid_to_ts = '9999-12-31';

update nabu.dataplace_collection_field_index
set valid_to_ts = now()
where dataplace_id = $data.input_data.data_connection_id$
and valid_to_ts = '9999-12-31';

update nabu_ui.tag_dataplace
set valid_to_ts=now(),
mod_by='$data.userDetails.userId$',mod_ts=now()
where dataplace_id = $data.asMap.data_connection_id$
and valid_to_ts = '9999-12-31';
>>

// This template is used to delete the deleteDataMovement pipelines
// @created_by Kusuri Dheeraj Kumar (KD2106)
// API_Path: http://localhost:8893/fireshots/nabu/upd/sq/restCatalog/deletePipeline

deletePipeline(data)::=<<
{
  "input_data": $data.asString$,
  "sequential_queries": [
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "deletePipeline_schema",
      "validation_key": "input_data",
      "query_type": "validation"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "checkAccessForSuperAdminRole",
      "query_output_key": "checkAccess",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "dataMovement_checks",
      "query_output_key": "checks",
      "query_type":"select",
      "post_process": ["checks"]
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "deletePipeline_template",
      "query_output_key": "data",
      "query_type": "update"
    }
  ],
  "output_keys": [
    "data"
  ]
}
>>

deletePipeline_schema(data)::=<<
{
  "\$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "properties": {
    "pipeline_id": {
      "type": "integer"
    }
  },
  "required": [
    "pipeline_id"
  ]
}
>>

deletePipeline_template(data)::=<<
update nabu.data_movement
set valid_to_ts=now(),
mod_by='$data.userDetails.userId$',
mod_ts=now()
where data_movement_id=$data.asMap.pipeline_id$
and valid_to_ts = '9999-12-31';

update nabu.data_movement_details
set valid_to_ts=now()
where data_movement_id=$data.asMap.pipeline_id$
and valid_to_ts = '9999-12-31';

update nabu_ui.tag_data_movement
set valid_to_ts=now(),
mod_by='$data.userDetails.userId$',mod_ts=now()
where data_movement_id = $data.asMap.pipeline_id$
and valid_to_ts = '9999-12-31';

update nabu.job_schedule_details set valid_to_ts = now() where
data_movement_id = $data.input_data.pipeline_id$
and job_type_id = (select job_type_id from nabu.job_type_lookup where job_type ='ingestion')
and valid_to_ts = '9999-12-31';

update nabu.user_defined_trans_for_unsupported_datatype
set valid_to_ts = now()
where data_movement_id=$data.asMap.pipeline_id$ and valid_to_ts='9999-12-31';

update nabu.user_defined_trans_for_inconsistent_datatype
set valid_to = now()
where data_movement_id=$data.asMap.pipeline_id$ and valid_to='9999-12-31';

$if(data.input_data.advance_table_options)$
UPDATE nabu.advanced_options_object_details
SET valid_to_ts= now()
where data_movement_id = $data.input_data.pipeline_id$
and valid_to_ts='9999-12-31';
$endif$
>>

// This template is used to delete the Workspace curation pipelines
// @created_by Kusuri Dheeraj Kumar (KD2106)
// API_Path: http://localhost:8893/fireshots/nabu/upd/sq/restCatalog/deleteCurationPipeline

deleteCurationPipeline(data)::=<<
{
  "input_data": $data.asString$,
  "sequential_queries": [
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "deleteCurationPipeline_schema",
      "validation_key": "input_data",
      "query_type": "validation"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "curationPipeline_checks",
      "query_output_key": "checks",
      "query_type":"select",
      "post_process": ["checks"]
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "deleteCurationPipeline_template",
      "query_output_key": "data",
      "query_type": "update"
    }
  ],
  "output_keys": [
    "data"
  ]
}
>>

deleteCurationPipeline_schema(data)::=<<
{
  "\$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "properties": {
    "workspace_pipeline_id": {
      "type": "integer"
    }
  },
  "required": [
    "workspace_pipeline_id"
  ]
}
>>

deleteCurationPipeline_template(data)::=<<
UPDATE nabu.workspace_pipeline
SET is_deleted= true
WHERE workspace_pipeline_id = $data.input_data.workspace_pipeline_id$;

update nabu.data_movement
set valid_to_ts=now(),
mod_by='$data.userDetails.userId$',
mod_ts=now()
where data_movement_id=$data.input_data.workspace_pipeline_id$
and valid_to_ts = '9999-12-31';

UPDATE nabu.workspace_pipeline_object_details
SET valid_to_ts=now(), mod_by='$data.userDetails.userId$',mod_ts=now()
WHERE workspace_pipeline_id = $data.input_data.workspace_pipeline_id$
and valid_to_ts = '9999-12-31';

UPDATE nabu_ui.tag_workspace_pipeline
SET valid_to_ts=now(), mod_by='$data.userDetails.userId$',mod_ts=now()
WHERE workspace_pipeline_id = $data.input_data.workspace_pipeline_id$
and valid_to_ts = '9999-12-31';

UPDATE nabu.data_movement_details
SET valid_to_ts=now()
WHERE data_movement_id=$data.input_data.workspace_pipeline_id$
and valid_to_ts = '9999-12-31';

UPDATE nabu.dq_rule
SET is_deleted =true
where dq_rule_source_id =$data.input_data.workspace_pipeline_id$ and dq_rule_source_type_id =2;

UPDATE nabu.dq_rule_details
SET valid_to_ts = now()
where workspace_pipeline_id =$data.input_data.workspace_pipeline_id$
and valid_to_ts = '9999-12-31';
>>

// This template is used to delete the Data Domains
// @created_by Kusuri Dheeraj Kumar (KD2106)
// API_Path: http://localhost:8893/fireshots/nabu/upd/sq/restCatalog/deleteDataDomain

deleteDataDomain(data)::=<<
{
  "input_data": $data.asString$,
  "sequential_queries": [
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "deleteDataDomain_schema",
      "validation_key": "input_data",
      "query_type": "validation"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "checkAccessForSuperAdminRole",
      "query_output_key": "checkAccess",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "dataDomain_checks",
      "query_output_key": "checks",
      "query_type":"select",
      "post_process": ["checks"]
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "getCollectionStatus",
      "query_output_key":"status",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "resolveDeleteSearchDocuments",
      "query_output_key":"searchDocuments",
      "service_name": "solr",
      "query_type":"delete"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "resolveDeleteFilterSearchDocuments",
      "query_output_key":"filterSearchDocuments",
      "service_name": "solr",
      "query_type":"delete"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "resolveDeleteDocuments",
      "query_output_key":"documents",
      "service_name": "solr",
      "query_type":"delete"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "deleteDataDomain_template",
      "query_output_key": "data",
      "query_type": "update"
    }
  ],
  "output_keys": [
    "data"
  ]
}
>>

deleteDataDomain_schema(data)::=<<
{
  "\$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "properties": {
    "data_domain_id": {
      "type": "integer"
    }
  },
  "required": [
    "data_domain_id"
  ]
}
>>

getCollectionStatus(data)::=<<
select
case when (
select count(*) from (
select status from nabu.datastore_collection_mapping dcm
where datastore_id =$data.input_data.data_domain_id$
and additional_info ->\> 'is_valid' = 'true'
)x
) > 0 then
(select status::boolean from nabu.datastore_collection_mapping dcm
where datastore_id = $data.input_data.data_domain_id$)
else
(select false as status)
end
>>

resolveDeleteDocuments(data)::=<<
$(["deleteDocuments_",first(data.status).status])(data)$
>>

resolveDeleteSearchDocuments(data)::=<<
{
"STPath":"$data.STPath$/globalsearch.stg",
"metadata_flag":false,
"queryConfig": {
                 "query":"datastore_id:$data.input_data.data_domain_id$",
                 "collection":"nabu_search",
                 "type":"delete",
                 "facet_query":"",
                 "fields":"",
                 "filter":""
                 },
"dataFilter":"delete_documents"
}
>>

resolveDeleteFilterSearchDocuments(data)::=<<
{
"STPath":"$data.STPath$/globalsearch.stg",
"metadata_flag":false,
"queryConfig": {
                 "query":"datastore_id:$data.input_data.data_domain_id$",
                 "collection":"nabu_filter_search",
                 "type":"delete",
                 "facet_query":"",
                 "fields":"",
                 "filter":""
                 },
"dataFilter":"delete_documents"
}
>>

deleteDocuments_true(data)::=<<
{
"STPath":"$data.STPath$/globalsearch.stg",
"metadata_flag":false,
"queryConfig": {
                 "query":"*:*",
                 "collection":"datastore_$data.input_data.data_domain_id$",
                 "type":"delete",
                 "facet_query":"",
                 "fields":"",
                 "filter":""
                 },
"dataFilter":"delete_documents"
}
>>

deleteDocuments_false(data)::=<<
{
"STPath":"$data.STPath$/globalsearch.stg",
"metadata_flag":false,
"queryConfig": {
                 "query":"datastore_id:$data.input_data.data_domain_id$",
                 "collection":"nabu_search",
                 "type":"select",
                 "facet_query":"",
                 "fields":"",
                 "filter":""
                 },
"dataFilter":"delete_documents"
}
>>

deleteDataDomain_template(data)::=<<
update nabu.datastore set valid_to_ts=now(),
mod_by='$data.userDetails.userId$',
mod_ts=now()
where datastore_id=$data.asMap.data_domain_id$
and valid_to_ts = '9999-12-31';

update nabu.datastore_schema_definition set valid_to_ts=now(),
mod_by='$data.userDetails.userId$',
mod_ts=now()
where datastore_id=$data.asMap.data_domain_id$
and valid_to_ts = '9999-12-31';

update nabu.datastore_table_mapping set valid_to_ts=now()
where datastore_id=$data.asMap.data_domain_id$
and valid_to_ts = '9999-12-31';

with get_role_ids as
(select role_id from nabu_ui.datastore_role_mapping
where datastore_id=$data.asMap.data_domain_id$)
update nabu_ui.roles_info
set valid_to_ts = now(),
mod_by='$data.userDetails.userId$',
mod_ts=now()
where role_id in (select * from get_role_ids)
and valid_to_ts = '9999-12-31';

update nabu.datastore_group_mapping set valid_to_ts=now()
where datastore_id=$data.asMap.data_domain_id$
and valid_to_ts = '9999-12-31';

update nabu_ui.tag_datastore set valid_to_ts=now(),
mod_by='$data.userDetails.userId$',
mod_ts=now()
where datastore_id=$data.asMap.data_domain_id$
and valid_to_ts = '9999-12-31';

update nabu.datastore_collection_mapping
set additional_info = additional_info::jsonb ||'{"is_valid":false}'::jsonb
where datastore_id =$data.input_data.data_domain_id$;

delete from nabu.datastore_indexing_mapping where
datastore_id =$data.input_data.data_domain_id$;


with get_entity_ids as (
select entity_id from nabu_data_catalog.entity where valid_to_ts ='9999-12-31' and
datastore_id=$data.asMap.data_domain_id$
)
update nabu_ui.tag_entity set valid_to_ts=now(),
mod_by='$data.userDetails.userId$',
mod_ts=now()
where entity_id in (select entity_id from get_entity_ids)
and valid_to_ts = '9999-12-31';

with get_facet_ids as (
select facet_id from nabu_data_catalog.facet where valid_to_ts ='9999-12-31' and
datastore_id=$data.asMap.data_domain_id$
)
update nabu_ui.tag_facet set valid_to_ts=now(),
mod_by='$data.userDetails.userId$',
mod_ts=now()
where facet_id in (select facet_id from get_facet_ids)
and valid_to_ts = '9999-12-31';

update nabu_data_catalog.entity set valid_to_ts=now(),
mod_by='$data.userDetails.userId$',
mod_ts=now()
where datastore_id=$data.asMap.data_domain_id$
and valid_to_ts = '9999-12-31';

update nabu_data_catalog.facet set valid_to_ts=now(),
mod_by='$data.userDetails.userId$',
mod_ts=now()
where datastore_id=$data.asMap.data_domain_id$
and valid_to_ts = '9999-12-31';

update nabu_data_catalog.filter set valid_to_ts=now(),
mod_by='$data.userDetails.userId$',
mod_ts=now()
where datastore_id=$data.asMap.data_domain_id$
and valid_to_ts = '9999-12-31';

update nabu_data_catalog.fieldstores set valid_to_ts=now(),
mod_by='$data.userDetails.userId$',
mod_ts=now()
where datastore_id=$data.asMap.data_domain_id$
and valid_to_ts = '9999-12-31';

update nabu_ui.tag_table set valid_to_ts=now(),
mod_by='$data.userDetails.userId$',
mod_ts=now()
where datastore_id=$data.asMap.data_domain_id$
and valid_to_ts = '9999-12-31';

update nabu_ui.tag_column set valid_to_ts=now(),
mod_by='$data.userDetails.userId$',
mod_ts=now()
where datastore_id=$data.asMap.data_domain_id$
and valid_to_ts = '9999-12-31';

update nabu_ui.tag_collection set valid_to_ts=now(),
mod_by='$data.userDetails.userId$',
mod_ts=now()
where datastore_id=$data.asMap.data_domain_id$
and valid_to_ts = '9999-12-31';

update nabu_ui.tag_field set valid_to_ts=now(),
mod_by='$data.userDetails.userId$',
mod_ts=now()
where datastore_id=$data.asMap.data_domain_id$
and valid_to_ts = '9999-12-31';

update nabu.column_profile set valid_to_ts =now(),mod_ts =now(),
mod_by ='$data.userDetails.userId$'
where datastore_id=$data.asMap.data_domain_id$
and valid_to_ts = '9999-12-31';

update nabu.job_schedule_details set valid_to_ts=now()
where datastore_id=$data.asMap.data_domain_id$
and valid_to_ts = '9999-12-31'
>>

// This template is used to add the compute engine into database
// @created_by Murthy(VK1708)
// @Api_Path : "http://localhost:port/fireshots/nabu/upd/sq/restCatalog/addComputeEngine"

addComputeEngine(data)::=<<
{
  "input_data": $data.asString$,
  "sequential_queries": [
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "addComputeEngine_schema",
          "validation_key": "input_data",
          "query_type":"validation"
  },
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "addComputeEngine_checks",
          "query_output_key":"checks",
          "query_type":"select",
          "post_process":["checks"]
  },
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "checkKerberos",
          "query_output_key":"check_kerberos",
          "query_type":"select"
  },
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "addComputeEngine_template",
          "query_output_key":"idDetails",
          "query_type":"select"
  },
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "computeEngineConfig_template",
          "query_output_key":"data",
          "query_type":"update"
  },
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "addComputeEngine_logDetails",
          "query_output_key":"logDetails",
          "query_type":"select"
  },
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "addArchive_addComputeEngine",
          "query_output_key":"archiveDetails",
          "query_type":"insert"
  },
  {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "logTemplate_addComputeEngine",
          "query_type":"log",
          "log_service":"auditLog"
  }
  ],
  "output_keys":["data"]
}
>>

addComputeEngine_schema(data)::=<<
{
    "\$schema": "http://json-schema.org/draft-04/schema#",
    "type": "object",
    "properties": {
        "compute_engine_name": {
            "type": "string",
	        "minLength": 3,
            "maxLength": 75,
            "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$"
        },
        "engine_id": {
            "type": "integer",
            "minimum": 1
        },
        "engine_sub_type_id": {
            "type": "integer",
            "minimum": 1
        },
        "compute_engine_info": {
            "type": "object",
		"properties": {
			"yarn_app_url": {
				"type": "string"
			},
			"nabu_external_path": {
				"type": "string"
			},
			"project":{
				"type": "string"
			},
                	"cluster":{
                    		"type": "string"
                	},
                	"region":{
                    		"type": "string"
                	},
                	"credentials_json_filepath":{
                    		"type": "string"
                	},
                	"cde_user":{
                    		"type": "string"
                	},
                	"credentials_filepath":{
                     		"type": "string"
                	},
                	"cluster_endpoint":{
                     		"type": "string"
                	},
                	"spark_version":{
                     		"type": "string"
                	},
                	"spark_home_path":{
                             "type": "string"
                    },
                	"scala_version":{
                     		"type": "string"
                	},
                	"spark_version_value":{
                    		 "type": "string"
                	},
                	"scala_version_value":{
                      		"type": "string"
                	}
		}
        },
        "description": {
            "type": "string",
            "maxLength": 500
        },
        "tags": {
		  "type": "array",
		  "items": {
		    "type": "object",
		    "properties": {
		      "tag_category_name": {
		        "type": "string"
		      },
		      "tag_value": {
		        "type": "string"
		      },
		      "tag_category_id": {
		        "type": "integer"
		      },
		      "tag_label_id": {
		        "type": "integer"
		      },
		      "previous_tag_label_id": {
		        "type": "string"
		      }
		    },
		    "required": [
		      "tag_category_name",
		      "tag_value",
		      "tag_category_id",
		      "tag_label_id",
		      "previous_tag_label_id"
		    ]
		  }
		},
        "config_json": {
            "type": "object",
            "properties": {
                "hostname": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "kerberos": {
                    "type": "boolean"
                }
            }
        }
    },
    "required": [
        "compute_engine_name",
        "engine_id",
        "engine_sub_type_id",
        "compute_engine_info",
        "description"
    ]
}
>>

addComputeEngine_checks(data)::=<<
select $false:UniqueComputeEngineName(data)$
>>

UniqueComputeEngineName(modify, data)::=<<
not exists(select * from nabu.compute_engine where valid_to_ts='9999-12-31' and lower(compute_engine_name)=lower('$data.input_data.compute_engine_name$')
 $if(modify)$and compute_engine_id<> $data.input_data.compute_engine_id$ $endif$) "unique"
>>

addComputeEngine_template(data)::=<<
with compute_engine_id as (
    insert into nabu.compute_engine(compute_engine_name, compute_engine_info,valid_from_ts, valid_to_ts, cru_by, cru_ts, mod_by, mod_ts, engine_mapping_id, additional_info, credential_id) values
    ('$data.input_data.compute_engine_name$','$resolveComputeEngineInfo(data.input_data.compute_engine_info)$',current_timestamp,'9999-12-31',
    '$data.userDetails.userId$',current_timestamp, '$data.userDetails.userId$',current_timestamp, (select engine_mapping_id from nabu.engine_mapping_lookup where engine_id = $data.input_data.engine_id$
    and engine_sub_type_id = $data.input_data.engine_sub_type_id$ and valid_to_ts = '9999-12-31'), '$resolveComputeEngineAdditionalInfo(data)$'::jsonb||$resolveMetastores(data)$,
    $if(EmptyAsFalse.(data.input_data.credential_id))$ $data.input_data.credential_id$ $else$ NULL $endif$) returning compute_engine_id
)
$if(data.input_data.spark_configurations)$
, spark_configs as(
    insert into nabu.compute_engine_spark_config_details (compute_engine_id, spark_configuration_type_id, spark_configuration_priority_number, spark_configuration_priority_json, additional_info, valid_from_ts, valid_to_ts, cru_by, cru_ts) VALUES
    $data.input_data.spark_configurations: insertSparkConfigs(data.input_data.extra_configs, data.input_data.compute_engine_id); separator = ", \n"$
)
$endif$


$if(data.asMap.tags)$
$"compute_engine":resolveTags(data)$
$endif$

, get_config_type_id  as(
 select config_type_id from nabu.engine_sub_type_lookup where engine_sub_type_id=$data.input_data.engine_sub_type_id$
 )

insert into nabu.config(config_type_id, config_name, config_json, valid_from_ts, valid_to_ts, cru_by, cru_ts) values
((select * from get_config_type_id),concat('compute_engine_',(select * from compute_engine_id),'_config'),
'$resolveConfigJson(data)$',current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp)
returning config_id,(select compute_engine_id from compute_engine_id)
>>

computeEngineConfig_template(data)::=<<
$if(first(data.idDetails).config_id)$
update nabu.compute_engine set compute_engine_config_id = $first(data.idDetails).config_id$
where compute_engine_id = $first(data.idDetails).compute_engine_id$ and valid_to_ts = '9999-12-31'
$endif$
>>

checkKerberos(data)::=<<
select case when '$data.input_data.config_json.kerberos$'='true' or '$data.input_data.config_json.kerberos$'='false' then true
	  else false end as kerberos_exists
>>

resolveConfigJson(data)::=<<
$if(data.input_data.config_json.hostname)$
{
"hostname":"$data.input_data.config_json.hostname$",
"username":"$data.input_data.config_json.username$"
$if(first(data.check_kerberos).kerberos_exists)$
,"kerberos":$data.input_data.config_json.kerberos$
$endif$
}
$else$
{}
$endif$
>>

resolveComputeEngineAdditionalInfo(data)::=<<
{
"description":"$data.input_data.description$"
}
>>

resolveMetastores(data)::=<<
$if(data.input_data.metastore_ids)$
(jsonb_build_object('metastore_ids',(select coalesce(jsonb_agg(dataplace_id),'[]')
from nabu.dataplace d where dataplace_id in ($data.input_data.metastore_ids:{id|$id$};separator=","$) and valid_to_ts = '9999-12-31')))
$else$
'{}'
$endif$
>>

resolveTags(resource, data)::=<<
,update_tag_category_details as(
    update nabu_ui.tag_category_details
    set mod_by='$data.userDetails.userId$',mod_ts=now()
    where tag_category_id in ($data.input_data.tags: {tag |$tag.tag_category_id$}; separator=","$)
)
,insert_tag_category_details as(
    insert into nabu_ui.tag_category_details(tag_category_id,icon_id,other_info,crt_by,crt_ts,mod_by,mod_ts)
    select * from (values
        $data.input_data.tags: {tag |  ($tag.tag_category_id$,0,'{"default":true,"checked":false\}'::jsonb,'$data.userDetails.userId$',current_timestamp,'$data.userDetails.userId$',current_timestamp)}; separator=","$
    )a (tag_category_id,icon_id,other_info,crt_by,crt_ts,mod_by,mod_ts)
    where tag_category_id not in (select tag_category_id from nabu_ui.tag_category_details)
)
,tags as(
    insert into nabu_ui.tag_$resource$($resource$_id,tag_label_id,valid_from_ts,valid_to_ts,crt_by,crt_ts,mod_by,mod_ts)(
        select distinct $resource$_id,a.* from (values
            $data.input_data.tags: {tag |  ($tag.tag_label_id$,current_timestamp,'9999-12-31'::timestamp,'$data.userDetails.userId$',current_timestamp,'$data.userDetails.userId$',current_timestamp)}; separator=",\n"$
        )a (tag_label_id,valid_from_ts,valid_to_ts,crt_by,crt_ts,mod_by,mod_ts), $resource$_id
    )
)
>>

resolveComputeEngineInfo(data)::=<<
{
$data.keys:{k | "$k$":"$data.(k)$"}; separator=","$
}
>>

addComputeEngine_logDetails(data)::=<<
select compute_engine_id from nabu.compute_engine where compute_engine_name = '$data.input_data.compute_engine_name$'
>>

addArchive_addComputeEngine(data)::=<<
with tags as (
	    select $first(data.logDetails).compute_engine_id$ as compute_engine_id,coalesce(jsonb_agg(row_to_json(tag)),'[]') as tag
	    from(
        	select td.tag_id,td.tag_label_id,ul.tag_label_name,c.tag_category_name,cd.tag_category_color
         	from  nabu_ui.tag_compute_engine  td
         	inner join nabu_ui.tag_user_labels as ul on td.tag_label_id=ul.tag_label_id
         	inner join nabu_ui.tag_category as c on ul.tag_category_id=c.tag_category_id
         	inner join nabu_ui.tag_category_details as cd on ul.tag_category_id=cd.tag_category_id
         	where td.compute_engine_id = $first(data.logDetails).compute_engine_id$
         	and valid_to_ts='9999-12-31'
         ) as tag
)
, sparkconfigs as(
	select $first(data.logDetails).compute_engine_id$ as compute_engine_id, coalesce(json_agg(row_to_json(d)),'[]') as spark_configs
	from nabu.compute_engine_spark_config_details d
	where d.compute_engine_id = $first(data.logDetails).compute_engine_id$
	and d.valid_to_ts = '9999-12-31'
)
, archive_log as(
	select jsonb_build_object(
               'compute_engine_info',row_to_json(ce)::jsonb,
               'config_json',row_to_json(c)::jsonb,
               'spark_configs', spark_configs::jsonb,
               'tags', tag::jsonb
    )
	from nabu.compute_engine ce
	inner join nabu.config c on ce.compute_engine_config_id=c.config_id
	inner join tags t on t.compute_engine_id=ce.compute_engine_id
	inner join sparkconfigs s on s.compute_engine_id = ce.compute_engine_id
	where ce.compute_engine_id= $first(data.logDetails).compute_engine_id$
)
insert into nabu.compute_engine_archive values
($first(data.logDetails).compute_engine_id$,
(select * from archive_log),
null,'$data.userDetails.userId$',now());
>>

logTemplate_addComputeEngine(data)::=<<
{"audit_event_type_id": 75,"compute_engine_id":$first(data.logDetails).compute_engine_id$,"user_id": "$data.userDetails.userId$","log_time ": "$data.log_time$"}
>>

// This template is used to update the compute engine into database
// @created_by Murthy(VK1708)
// @Api_Path : "http://localhost:port/fireshots/nabu/upd/sq/restCatalog/modifyComputeEngine"

modifyComputeEngine(data)::=<<
{
  "input_data": $data.asString$,
  "sequential_queries": [
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "modifyComputeEngine_schema",
      "validation_key": "input_data",
      "query_type":"validation"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "checkAccessForSuperAdminRole",
      "query_output_key": "checkAccess",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "modifyComputeEngine_checks",
      "query_output_key":"checks",
      "query_type":"select",
      "post_process":["checks"]
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "checkKerberos",
      "query_output_key":"check_kerberos",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "addArchive_modifyComputeEngine",
      "query_output_key": "computeEngineArchiveModify",
      "query_type":"insert"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "modifyComputeEngine_template",
      "query_output_key":"data",
      "query_type":"update"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "logTemplate_modifyComputeEngine",
      "query_type":"log",
      "log_service":"auditLog"
    }
  ],
  "output_keys":["data","computeEngineArchiveModify"]
}
>>

modifyComputeEngine_schema(data)::=<<
{
    "\$schema": "http://json-schema.org/draft-04/schema#",
    "type": "object",
    "properties": {
        "compute_engine_id": {
            "type": "integer",
            "minimum": 1
        },
        "compute_engine_name": {
            "type": "string",
	        "minLength": 3,
            "maxLength": 75,
            "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$"
        },
        "engine_id": {
            "type": "integer",
            "minimum": 1
        },
        "engine_sub_type_id": {
            "type": "integer",
            "minimum": 1
        },
        "compute_engine_info": {
            "type": "object",
			"properties": {
				"yarn_app_url": {
					"type": "string"
				},
				"nabu_external_path": {
					"type": "string"
				},
                	"project":{
                 		"type": "string"
                	},
                	"cluster":{
                    		"type": "string"
                	},
                	"region":{
                    		"type": "string"
                	},
                	"credentials_json_filepath":{
                    		"type": "string"
                	},
                	"cde_user":{
                    		"type": "string"
                	},
                	"credentials_filepath":{
                     		"type": "string"
                	},
                	"cluster_endpoint":{
                     		"type": "string"
                	},
                	"spark_version":{
                     		"type": "string"
                	},
                	"spark_home_path":{
                             "type": "string"
                    },
                	"scala_version":{
                     		"type": "string"
                	},
                	"spark_version_value":{
                     		"type": "string"
                	},
                	"scala_version_value":{
                      		"type": "string"
                	}
		}
        },
        "description": {
            "type": "string",
            "maxLength": 500
        },
        "tags": {
		  "type": "array",
		  "items": {
		    "type": "object",
		    "properties": {
		      "tag_category_name": {
		        "type": "string"
		      },
		      "tag_value": {
		        "type": "string"
		      },
		      "tag_category_id": {
		        "type": "integer"
		      },
		      "tag_label_id": {
		        "type": "integer"
		      },
		      "previous_tag_label_id": {
		        "type": "string"
		      }
		    },
		    "required": [
		      "tag_category_name",
		      "tag_value",
		      "tag_category_id",
		      "tag_label_id",
		      "previous_tag_label_id"
		    ]
		  }
		},
        "config_json": {
            "type": "object",
            "properties": {
                "hostname": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "kerberos": {
                    "type": "boolean"
                }
            }
        }
    },
    "required": [
        "compute_engine_id",
        "compute_engine_name",
        "engine_id",
        "engine_sub_type_id",
        "compute_engine_info",
        "description"
    ]
}
>>

checkAccessForSuperAdminRole(data)::=<<
$if(data.userDetails.roleId)$
select case when $data.userDetails.roleId$ in (select role_id from nabu_ui.roles_info ri where role_name ='Super_Admin') then false else true end as check_access
$else$
select not exists(
    select env_group_name
    from nabu_ui.roles_info r inner join nabu_ui.env_group_role_info e using(role_id)
    where role_name = 'Super_Admin' $if(data.userDetails.roleId)$ and role_id = $data.userDetails.roleId$ $endif$
    and env_group_name in ('$[data.userDetails.userId,data.userDetails.groups];separator="','"$')
) as check_access
$endif$
>>

modifyComputeEngine_checks(data)::=<<
select $ValidComputeEngine(data)$, ($checkComputeAccessLevel(data)$) as "access", $true:UniqueComputeEngineName(data)$
>>

ValidComputeEngine(data)::=<<
exists(select * from nabu.compute_engine where valid_to_ts='9999-12-31' and compute_engine_id=$data.input_data.compute_engine_id$ ) "valid"
>>

checkComputeAccessLevel(data)::=<<
$if(first(data.checkAccess).check_access)$
with module_access as(
        select mam.role_id,mam.access_id,env_group_name,condition_type_id,
        unnest(string_to_array(substring(values,3,length(values)-4),'","')) as matched_compute_engine_name
        from nabu_ui.env_group_role_info egri
        inner join nabu_ui.module_access_mapping mam
        on egri.role_id =mam.role_id
        and env_group_name in ('$data.userDetails.userId$'$if(data.userDetails.groups)$,$resolveListString(data.userDetails.groups)$$endif$)
        and (condition_type_id=10 or condition_type_id=11 or condition_type_id=12)
        group by 1,2,3,4,5
)
,compute_engine_access as
(
	select  access_id ,compute_engine_id from(
		select access_id,
		case when condition_type_id =12 then
		case when tag_label_id =cast(matched_compute_engine_name as integer)
		then td.compute_engine_id
		end
		end as compute_engine_id
		from module_access,nabu_ui.tag_compute_engine td
		where td.valid_to_ts='9999-12-31'
		group by 1,2
	union all
		select access_id,
		case when condition_type_id =10 then
		case when compute_engine_name =matched_compute_engine_name
		then dp.compute_engine_id
		end
		when condition_type_id =11 then
		case when compute_engine_name~*matched_compute_engine_name
		then dp.compute_engine_id
		end
		end as compute_engine_id
		from module_access,nabu.compute_engine dp
		where dp.valid_to_ts='9999-12-31'
		group by 1,2

	union all
		SELECT ui_access_type_id as access_id,compute_engine_id
		from nabu_ui.ui_module_access_lookup umal,nabu.compute_engine ce
		where ce.cru_by ~* '$data.userDetails.userId$' and valid_to_ts ='9999-12-31' and ui_module_name ='Compute Engines'
		group by 1,2
)b
group by 1,2
)
select case when $data.input_data.compute_engine_id$ in (select compute_engine_id from compute_engine_access
where compute_engine_id is not null and access_id = 2 group by 1) then true else false
end as "access"
$else$
select true as "access"
$endif$
>>

modifyComputeEngine_template(data)::=<<
update nabu.compute_engine set
compute_engine_name = '$data.input_data.compute_engine_name$',
compute_engine_info = '$resolveComputeEngineInfo(data.input_data.compute_engine_info)$',
additional_info = '$resolveComputeEngineAdditionalInfo(data)$'::jsonb||$resolveMetastores(data)$,
engine_mapping_id = (select engine_mapping_id from nabu.engine_mapping_lookup where engine_id = $data.input_data.engine_id$
and engine_sub_type_id = $data.input_data.engine_sub_type_id$ and valid_to_ts = '9999-12-31'),
$if(EmptyAsFalse.(data.input_data.credential_id))$  credential_id = $data.input_data.credential_id$ , $endif$
mod_by = '$data.userDetails.userId$',
mod_ts = current_timestamp
where compute_engine_id = $data.input_data.compute_engine_id$ and valid_to_ts = '9999-12-31';

with get_config_type_id as(
select config_type_id from nabu.engine_sub_type_lookup where engine_sub_type_id=$data.input_data.engine_sub_type_id$
)

update nabu.config set
config_type_id = (select * from get_config_type_id) ,
config_json = '$resolveConfigJson(data)$'
where config_id = (
			select compute_engine_config_id from nabu.compute_engine
			where compute_engine_id = $data.input_data.compute_engine_id$
			and valid_to_ts = '9999-12-31'
		);

$if(data.input_data.spark_configurations)$
update nabu.compute_engine_spark_config_details
set valid_to_ts = now()
where compute_engine_id = $data.input_data.compute_engine_id$;


insert into nabu.compute_engine_spark_config_details (compute_engine_id, spark_configuration_type_id, spark_configuration_priority_number, spark_configuration_priority_json, additional_info, valid_from_ts, valid_to_ts, cru_by, cru_ts) VALUES
$data.input_data.spark_configurations: insertSparkConfigs(data.input_data.extra_configs, data.input_data.compute_engine_id); separator = ", \n"$ ;
$endif$
>>

insertSparkConfigs(sparkConfigs, extraConfigs, computeEngineId)::=<<
($if(computeEngineId)$ $computeEngineId$ $else$ (select * from compute_engine_id) $endif$, $sparkConfigs.spark_configuration_type_id$, $sparkConfigs.spark_configuration_priority_number$, '$resolveSparkConfigJSON(sparkConfigs.spark_configuration_priority_json, extraConfigs)$', NULL, now(), '9999-12-31', '$data.userDetails.userId$', now())
>>

resolveSparkConfigJSON(spark_configuration_priority_json, extra_config_json)::=<<
{ "default_configs" : $resolveComputeEngineInfo(spark_configuration_priority_json)$, "extra_configs" : $resolveComputeEngineInfo(extra_config_json)$ }
>>

logTemplate_modifyComputeEngine(data)::=<<
{"audit_event_type_id": 76 "dataplace_id":$data.input_data.compute_engine_id$,"user_id": "$data.userDetails.userId$","log_time ": "$data.log_time$"}
>>


addArchive_modifyComputeEngine(data)::=<<
with tags as (
	    select  $data.input_data.compute_engine_id$ as compute_engine_id,coalesce(jsonb_agg(row_to_json(tag)),'[]') as tag
	    from(
        	select td.tag_id,td.tag_label_id,ul.tag_label_name,c.tag_category_name,cd.tag_category_color
         	from  nabu_ui.tag_compute_engine  td
         	inner join nabu_ui.tag_user_labels as ul on td.tag_label_id=ul.tag_label_id
         	inner join nabu_ui.tag_category as c on ul.tag_category_id=c.tag_category_id
         	inner join nabu_ui.tag_category_details as cd on ul.tag_category_id=cd.tag_category_id
         	where td.compute_engine_id =  $data.input_data.compute_engine_id$
         	and valid_to_ts='9999-12-31'
         ) as tag
)
, sparkconfigs as(
	select  $data.input_data.compute_engine_id$ as compute_engine_id, coalesce(json_agg(row_to_json(d)),'[]') as spark_configs
	from nabu.compute_engine_spark_config_details d
	where d.compute_engine_id =  $data.input_data.compute_engine_id$
	and d.valid_to_ts = '9999-12-31'
)
, archive_log as(
	select jsonb_build_object(
               'compute_engine_info',row_to_json(ce)::jsonb,
               'config_json',row_to_json(c)::jsonb,
               'spark_configs', spark_configs::jsonb,
               'tags', tag::jsonb
    )
	from nabu.compute_engine ce
	inner join nabu.config c on ce.compute_engine_config_id=c.config_id
	inner join tags t on t.compute_engine_id=ce.compute_engine_id
	inner join sparkconfigs s on s.compute_engine_id = ce.compute_engine_id
	where ce.compute_engine_id =  $data.input_data.compute_engine_id$
)
insert into nabu.compute_engine_archive values
($data.input_data.compute_engine_id$,
(select * from archive_log),
null,'$data.userDetails.userId$',now());
>>

EmptyAsFalse::=[ "":[], default: key ]

// This template is used to delete a compute engine
// @created_by Murthy(VK1708)
// @Api_Path : "http://localhost:port/fireshots/nabu/del/sq/manageComputeEngine/deleteComputeEngine"

deleteComputeEngine(data)::=<<
{
  "input_data": $data.asString$,
  "sequential_queries": [
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "deleteComputeEngine_schema",
      "validation_key": "input_data",
      "query_type":"validation"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "checkAccessForSuperAdminRole",
      "query_output_key": "checkAccess",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "computeEngine_check",
      "query_output_key": "checks",
      "query_type":"select",
      "post_process": ["checks"]
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "deleteComputeEngine_logDetails",
      "query_output_key":"logDetails",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "deleteComputeEngine_template",
      "query_output_key":"data",
      "query_type":"update"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "logTemplate_deleteComputeEngine",
      "query_type":"log",
      "log_service":"auditLog"
    }
  ],
  "output_keys":["data"]
}
>>

deleteComputeEngine_schema(data)::=<<
{
  "\$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "properties": {
    "compute_engine_id": {
      "type": "integer",
      "minimum": 1
    }
  },
  "required": [
    "compute_engine_id"
  ]
}
>>

computeEngine_check(data)::=<<
select $ValidComputeEngine(data)$, ($checkComputeAccessLevel(data)$) as "access"
>>

deleteComputeEngine_logDetails(data)::=<<
select compute_engine_name from nabu.compute_engine
where compute_engine_id=$data.input_data.compute_engine_id$
>>

deleteComputeEngine_template(data)::=<<
update nabu.config set valid_to_ts = now()
where config_id = (	select compute_engine_config_id
					from nabu.compute_engine
					where compute_engine_id=$data.input_data.compute_engine_id$
					and valid_to_ts = '9999-12-31' )
and valid_to_ts = '9999-12-31';

update nabu.compute_engine
set valid_to_ts = now()
where compute_engine_id = $data.input_data.compute_engine_id$ and valid_to_ts = '9999-12-31';

update nabu.compute_engine_spark_config_details
set valid_to_ts = now()
where compute_engine_id = $data.input_data.compute_engine_id$ and valid_to_ts = '9999-12-31';

update nabu_ui.tag_compute_engine
set valid_to_ts=now(),
mod_by='$data.userDetails.userId$',mod_ts=now()
where compute_engine_id = $data.asMap.compute_engine_id$
and valid_to_ts = '9999-12-31';
>>

logTemplate_deleteComputeEngine(data)::=<<
{"audit_event_type_id": 77,"compute_engine_id":$data.input_data.compute_engine_id$,"user_id": "$data.userDetails.userId$","log_time ": "$data.log_time$"}
>>

resolveListString(list)::=<<
$list:{item | '$item$'}; separator = ","$
>>

// This template used to modify refresh frequency.
// @created_by K V MURALI KRISHNA(VK2508)
// @modified_by Kusuri Dheeraj Kumar (KD2106)
// @Api_Path : "http://localhost:port/fireshots/nabu/upd/sq/restCatalog/modifyDataConnectionSchedule"

modifyDataConnectionSchedule(data)::=<<
{
  "input_data": $data.asString$,
  "sequential_queries": [
		{
			"query_template_group": "$data.STPath$/manageScheduling.stg",
			"query_template_name": "modifyDataConnectionSchedule_schema",
			"validation_key": "input_data",
			"query_type":"validation"
		},
        {
            "query_template_group": "$data.STPath$/manageScheduling.stg",
            "query_template_name": "dataQueryForCornValidation",
            "processLogic": {
                "processClass": "com.modak.fireshots.processors.impl.CronProcessor",
                "readable_format_cron_cols":["user_readable_format"],
                "result_key": "cronValidation"
              },
            "query_output_key": "cronValidation",
            "query_type":"select"
        },
        {
            "query_template_group": "$data.STPath$/manageScheduling.stg",
            "query_template_name": "scheduleDataSource_checks",
            "query_output_key": "checks",
            "query_type":"select",
            "post_process": ["checks"]
        },
		{
			"query_template_group": "$data.STPath$/manageScheduling.stg",
			"query_template_name": "modifyDataConnectionSchedule_template",
			"query_output_key": "data",
			"query_type":"update"
		},
		{
			"query_template_group": "$data.STPath$/manageScheduling.stg",
			"query_template_name": "logTemplate_modifyDataConnectionSchedule",
			"query_type":"log",
			"log_service":"auditLog"
		}
    ],
    "output_keys":["data"]
}
>>

scheduleDataSource_checks(data)::=<<
select $ValidDatasource(data)$, $cronValidation_checks(data)$
>>

modifyDataConnectionSchedule_schema(data)::=<<
{
    "\$schema": "http://json-schema.org/draft-04/schema#",
    "definitions": {
        "recurring": {
            "description": "user defined frequency",
            "type": "object",
            "required": [
                "cron_type",
                "cron_freq",
                "cron_timezone",
                "cron_info",
                "consider_timezone"
            ],
            "properties": {
                "cron_type": {
                    "title": "Type of cron whether recurring or onetime",
                    "type": "string",
                    "enum": [
                        "recurring"
                    ]
                },
                "cron_freq": {
                    "title": "frequency",
                    "type": "string"
                },
                "cron_timezone": {
                    "title": "Zone of time Country/City",
                    "type": "string"
                },
                "consider_timezone": {
                    "type": "boolean"
                },
                "cron_info": {
                    "type": "object",
                    "properties": {
                        "schedule_type": {
                            "title": "Type of schedule whether it is Daily/Weekly/Monthly/Yearly/Advanced",
                            "type": "string",
                            "enum": [
                                "Daily",
                                "weekly",
                                "Monthly",
                                "Yearly",
                                "Advanced"
                            ]
                        },
                        "start_date": {
                            "title": "Start Date",
                            "type": "string"
                        },
                        "end_date": {
                            "title": "End Date",
                            "type": "string"
                        }
                    },
                    "required": [
                        "schedule_type",
                        "start_date"
                    ]
                }
            }
        },
        "one_time": {
            "description": "User defined frequency",
            "type": "object",
            "required": [
                "cron_type",
                "cron_freq",
                "cron_timezone",
                "consider_timezone"
            ],
            "properties": {
                "cron_type": {
                    "title": "Type of cron whether Recurring or Onetime",
                    "type": "string",
                    "enum": [
                        "one_time"
                    ]
                },
                "cron_freq": {
                    "title": "crawl frequency",
                    "type": "string"
                },
                "cron_timezone": {
                    "title": "Zone of time Country/City",
                    "type": "string"
                },
                "consider_timezone": {
                    "type": "boolean"
                }
            }
        }
    },
    "type": "object",
    "properties": {
        "dataplace_id": {
            "title": "Dataplace Id",
            "type": "integer",
            "minimum": 1
        },
        "crawl_frequency": {
            "description": "Crawl Frequency",
            "\$ref": "#/definitions/$data.input_data.crawl_frequency.cron_type$"
        }
    },
    "required": [
        "dataplace_id",
        "crawl_frequency"
    ]
}
>>

modifyDataConnectionSchedule_template(data)::=<<
with update_dataplace as(
update nabu.dataplace set
crawl_frequency = '$data.asMap.crawl_frequency.cron_freq$',
mod_by = '$data.userDetails.userId$',
mod_ts = current_timestamp
where dataplace_id = $data.input_data.dataplace_id$ and valid_to_ts='9999-12-31'
),

update_ts as(
update nabu.job_schedule_details set
valid_to_ts = current_timestamp
where dataplace_id = $data.input_data.dataplace_id$
and valid_to_ts='9999-12-31'
and job_type_id in (select job_type_id from nabu.job_type_lookup where job_type in ('ondemand_crawling','crawling'))
)

insert into nabu.job_schedule_details(job_type_id, dataplace_id,refresh_frequency,additional_properties, valid_from_ts, valid_to_ts, cru_by, cru_ts)
values(
(select job_type_id from nabu.job_type_lookup where job_type ='crawling'),
$data.input_data.dataplace_id$,
'$data.input_data.crawl_frequency.cron_freq$',
E'$resolveCrawlInfo(data.input_data.crawl_frequency)$',
current_timestamp,
'9999-12-31',
'$data.userDetails.userId$',
current_timestamp
)
>>

resolveCrawlInfo(data)::=<<
$if(data.cron_type)$
{"crawl_frequency": $resolveCronJson(data)$}
$endif$
>>


logTemplate_modifyDataConnectionSchedule(data)::=<<
{"audit_event_type_id":10 ,"dataplace_id":$data.input_data.dataplace_id$,"user_id": "$data.userDetails.userId$","log_time ": "$data.log_time$"}
>>


// This template used to modify Profiling, Indexing and Filter Resolving Frequency.
// @created_by K V MURALI KRISHNA(VK2508)
// @modified_by Kusuri Dheeraj Kumar (KD2106)
// @Api_Path : "http://localhost:port/fireshots/nabu/upd/sq/restCatalog/modifyDatastoreSchedule"

modifyDatastoreSchedule(data)::=<<
{
  "input_data": $data.asString$,
  "sequential_queries": [
		{
			"query_template_group": "$data.STPath$/manageScheduling.stg",
			"query_template_name": "modifyDatastoreSchedule_schema",
			"validation_key": "input_data",
			"query_type":"validation"
		},
        {
            "query_template_group": "$data.STPath$/manageScheduling.stg",
            "query_template_name": "dataQueryForCornValidation",
            "processLogic": {
                "processClass": "com.modak.fireshots.processors.impl.CronProcessor",
                "readable_format_cron_cols":["user_readable_format"],
                "result_key": "cronValidation"
              },
            "query_output_key": "cronValidation",
            "query_type":"select"
        },
        {
            "query_template_group": "$data.STPath$/manageScheduling.stg",
            "query_template_name": "scheduleDataStore_checks",
            "query_output_key": "checks",
            "query_type":"select",
            "post_process": ["checks"]
        },
		{
			"query_template_group": "$data.STPath$/manageScheduling.stg",
			"query_template_name": "modifyDatastoreSchedule_template",
			"query_output_key": "data",
			"query_type":"update"
		},
		{
			"query_template_group": "$data.STPath$/manageScheduling.stg",
			"query_template_name": "logTemplate_modifyDatastoreSchedule",
			"query_type":"log",
			"log_service":"auditLog"
		}
    ],
    "output_keys":["data"]
}
>>

scheduleDataStore_checks(data)::=<<
select $ValidDataStore(data)$, $cronValidation_checks(data)$
>>

modifyDatastoreSchedule_schema(data)::=<<
{
    "\$schema": "http://json-schema.org/draft-04/schema#",
    "definitions": {
        "recurring": {
            "description": "user defined frequency",
            "type": "object",
            "required": [
                "cron_type",
                "cron_freq",
                "cron_timezone",
                "cron_info",
                "consider_timezone"
            ],
            "properties": {
                "cron_type": {
                    "title": "Type of cron whether recurring or onetime",
                    "type": "string",
                    "enum": [
                        "recurring"
                    ]
                },
                "cron_freq": {
                    "title": "frequency",
                    "type": "string"
                },
                "cron_timezone": {
                    "title": "Zone of time Country/City",
                    "type": "string"
                },
                "consider_timezone": {
                    "type": "boolean"
                },
                "cron_info": {
                    "type": "object",
                    "properties": {
                        "schedule_type": {
                            "title": "Type of schedule whether it is Daily/Weekly/Monthly/Yearly/Advanced",
                            "type": "string",
                            "enum": [
                                "Daily",
                                "weekly",
                                "Monthly",
                                "Yearly",
                                "Advanced"
                            ]
                        },
                        "start_date": {
                            "title": "Start Date",
                            "type": "string"
                        },
                        "end_date": {
                            "title": "End Date",
                            "type": "string"
                        }
                    },
                    "required": [
                        "schedule_type",
                        "start_date"
                    ]
                }
            }
        },
        "one_time": {
            "description": "User defined frequency",
            "type": "object",
            "required": [
                "cron_type",
                "cron_freq",
                "cron_timezone",
                "consider_timezone"
            ],
            "properties": {
                "cron_type": {
                    "title": "Type of cron whether Recurring or Onetime",
                    "type": "string",
                    "enum": [
                        "one_time"
                    ]
                },
                "cron_freq": {
                    "title": "crawl frequency",
                    "type": "string"
                },
                "cron_timezone": {
                    "title": "Zone of time Country/City",
                    "type": "string"
                },
                "consider_timezone": {
                    "type": "boolean"
                }
            }
        }
    },
    "type": "object",
    "properties": {
        "datastore_id": {
            "title": "Datastore Id",
            "type": "integer",
            "minimum": 1
        },
        "frequency_type": {
            "description": "Type of frequency",
            "type": "string",
            "enum": [
                "profiling",
                "indexing",
                "filter_resolving"
            ]
        },
        "frequency": {
            "description": "Frequency",
            "\$ref": "#/definitions/$data.input_data.frequency.cron_type$"
        }
    },
    "required": [
        "datastore_id",
        "frequency_type",
        "frequency"
    ]
}
>>

modifyDatastoreSchedule_template(data)::=<<
$([first(data.input_data.frequency_type),"_template"])(data)$
>>

profiling_template(data)::=<<
with datastore as(
update nabu.datastore set
profiling_frequency='$data.asMap.frequency.cron_freq$',
mod_by='$data.userDetails.userId$',
mod_ts=current_timestamp
where datastore_id=$data.asMap.datastore_id$ and valid_to_ts = '9999-12-31'
),

update_job_schedule_details as(
update nabu.job_schedule_details set valid_to_ts=now()
where datastore_id=$data.asMap.datastore_id$
and job_type_id in (select job_type_id from nabu.job_type_lookup where job_type in ('profiling','ondemand_profiling')) and valid_to_ts  = '9999-12-31'
)

insert into nabu.job_schedule_details(job_type_id, datastore_id,refresh_frequency,additional_properties,valid_from_ts, valid_to_ts, cru_by, cru_ts) values(
(select job_type_id from nabu.job_type_lookup where job_type ='profiling'),
$data.asMap.datastore_id$,
'$data.asMap.frequency.cron_freq$',
E'$resolveProfilingInfo(data.asMap.frequency)$',
current_timestamp,
'9999-12-31',
'$data.userDetails.userId$',
current_timestamp
)
>>

resolveProfilingInfo(data)::=<<
$if(data.cron_type)$
$resolveCronJson(data)$
$endif$
>>

indexing_template(data)::=<<
with datastore as(
update nabu.datastore set
indexing_frequency='$data.asMap.frequency.cron_freq$',
mod_by='$data.userDetails.userId$',
mod_ts=current_timestamp
where datastore_id=$data.asMap.datastore_id$ and valid_to_ts = '9999-12-31'
),

update_job_schedule_details as(
update nabu.job_schedule_details set valid_to_ts=now()
where datastore_id=$data.asMap.datastore_id$
and job_type_id =(select job_type_id from nabu.job_type_lookup where job_type ='indexing') and valid_to_ts  = '9999-12-31'
)

insert into nabu.job_schedule_details(job_type_id, datastore_id,refresh_frequency,additional_properties,valid_from_ts, valid_to_ts, cru_by, cru_ts) values(
(select job_type_id from nabu.job_type_lookup where job_type ='indexing'),
$data.asMap.datastore_id$,
'$data.asMap.frequency.cron_freq$',
'$resolveIndexingInfo(data.asMap.frequency)$',
current_timestamp,
'9999-12-31',
'$data.userDetails.userId$',
current_timestamp
)
>>

resolveIndexingInfo(data)::=<<
$if(data.cron_type)$
$resolveCronJson(data)$
$endif$
>>

filter_resolving_template(data)::=<<
with datastore as(
update nabu.datastore set
filter_resolving_frequency='$data.asMap.frequency.cron_freq$',
mod_by='$data.userDetails.userId$',
mod_ts=current_timestamp
where datastore_id=$data.asMap.datastore_id$ and valid_to_ts = '9999-12-31'
),

update_job_schedule_details as(
update nabu.job_schedule_details set valid_to_ts=now()
where datastore_id=$data.asMap.datastore_id$
and job_type_id =(select job_type_id from nabu.job_type_lookup where job_type ='filter_resolving') and valid_to_ts  = '9999-12-31'
)

insert into nabu.job_schedule_details(job_type_id, datastore_id,refresh_frequency,additional_properties,valid_from_ts, valid_to_ts, cru_by, cru_ts) values(
(select job_type_id from nabu.job_type_lookup where job_type ='filter_resolving'),
$data.asMap.datastore_id$,
'$data.asMap.frequency.cron_freq$',
'$resolveFilterResolvingInfo(data.asMap.frequency)$',
current_timestamp,
'9999-12-31',
'$data.userDetails.userId$',
current_timestamp
)
>>

resolveFilterResolvingInfo(data)::=<<
$if(data.cron_type)$
$resolveCronJson(data)$
$endif$
>>

logTemplate_modifyDatastoreSchedule(data)::=<<
{"audit_event_type_id":13 ,"datastore_id":$data.input_data.datastore_id$,"user_id": "$data.userDetails.userId$","log_time ": "$data.log_time$"}
>>


// This template used to modify refresh frequency.
// @created_by Manju (ma0253u)
// @modified_by Kusuri Dheeraj Kumar (KD2106)
// @Api_Path : "http://localhost:port/fireshots/nabu/upd/sq/restCatalog/modifySchedule"


modifySchedule(data)::=<<
{
  "input_data": $data.asString$,
  "sequential_queries": [
            {
        			"query_template_group": "$data.STPath$/manageScheduling.stg",
        			"query_template_name": "modifySchedule_schema",
        			"validation_key": "input_data",
        			"query_type":"validation"
        	},
            {
                    "query_template_group": "$data.STPath$/manageScheduling.stg",
                    "query_template_name": "dataQueryForCornValidation",
                    "processLogic": {
                      "processClass": "com.modak.fireshots.processors.impl.CronProcessor",
                      "readable_format_cron_cols":["user_readable_format"],
                      "result_key": "cronValidation"
                    },
                    "query_output_key": "cronValidation",
                    "query_type":"select"
            },
            {
                    "query_template_group": "$data.STPath$/manageScheduling.stg",
                    "query_template_name": "scheduleDataMovement_checks",
                    "query_output_key": "checks",
                    "query_type":"select",
                    "post_process": ["checks"]
            },
            {
                    "query_template_group": "$data.STPath$/manageScheduling.stg",
                    "query_template_name": "checkCron",
                    "query_output_key":"check_cron",
                    "query_type":"select"
            },
        	{
        			"query_template_group": "$data.STPath$/manageScheduling.stg",
        			"query_template_name": "modifyDataMovementSchedule_template",
        			"query_output_key": "data",
        			"query_type":"update"
        	},
        	{
        			"query_template_group": "$data.STPath$/manageScheduling.stg",
        			"query_template_name": "logTemplate_modifyDataMovementSchedule",
        			"query_type":"log",
        			"log_service":"auditLog"
        	}
    ],
    "output_keys":["data"]
}
>>

scheduleDataMovement_checks(data)::=<<
select $ValidDataMovement(data)$, $cronValidation_checks(data)$
>>

modifySchedule_schema(data)::=<<
{
  "\$schema": "http://json-schema.org/draft-04/schema#",
  "definitions": {
    "recurring": {
      "description": "user defined crawling frequency",
      "type": "object",
      "required": [
        "cron_type",
        "cron_freq",
        "cron_timezone",
        "cron_info",
        "consider_timezone"
      ],
      "properties": {
        "cron_type": {
          "title": "Type of cron whether Recurring or Onetime",
          "type": "string",
          "enum": [
            "recurring"
          ]
        },
        "cron_freq": {
          "title": "crawl frequency",
          "type": "string"
        },
        "cron_timezone": {
          "title": "Zone of time Country/City",
          "type": "string"
        },
        "consider_timezone": {
          "type": "boolean"
        },
        "cron_info": {
          "type": "object",
          "properties": {
            "schedule_type": {
              "title": "Type of schedule whether it is Daily/Weekly/Monthly/Yearly/Advanced",
              "type": "string",
              "enum": [
                "Daily",
                "weekly",
                "Monthly",
                "Yearly",
                "Advanced"
              ]
            },
            "start_date": {
              "title": "Start Date",
              "type": "string"
            },
            "end_date": {
              "title": "End Date",
              "type": "string"
            }
          },
          "required": [
            "schedule_type",
            "start_date"
          ]
        }
      }
    },
    "one_time": {
      "description": "user defined crawling frequency",
      "type": "object",
      "required": [
        "cron_type",
        "cron_freq",
        "cron_timezone",
        "consider_timezone"
      ],
      "properties": {
        "cron_type": {
          "title": "Type of cron whether Recurring or Onetime",
          "type": "string",
          "enum": [
            "one_time"
          ]
        },
        "cron_freq": {
          "title": "crawl frequency",
          "type": "string"
        },
        "cron_timezone": {
          "title": "Zone of time Country/City",
          "type": "string"
        },
        "consider_timezone": {
          "type": "boolean"
        }
      }
    }
  },
  "type": "object",
  "properties": {
    "data_movement_id": {
      "type": "integer"
    },
    "refresh_freq": {
      "description": "Refresh Frequency",
      "\$ref": "#/definitions/$data.input_data.refresh_freq.cron_type$"
    }
  },
  "required": [
    "data_movement_id",
    "refresh_freq"
  ]
}
>>

checkCron(data)::=<<
select case when '$resolveCronJson(data.asMap.refresh_freq)$'::json::text = (select additional_properties  from nabu.job_schedule_details jsd where data_movement_id =$data.input_data.data_movement_id$ and valid_to_ts ='9999-12-31' and job_type_id=1 )::json::text then true else false end as cron_flag
>>

modifyDataMovementSchedule_template(data)::=<<
with datamovement_details as(
update nabu.data_movement
set
refresh_freq='$data.asMap.refresh_freq.cron_freq$',
mod_ts=current_timestamp
where data_movement_id=$data.asMap.data_movement_id$
)
,update_job_schedule_details_ts as(
update nabu.job_schedule_details set valid_to_ts = current_timestamp where data_movement_id = $data.input_data.data_movement_id$ and valid_to_ts='9999-12-31' and job_type_id in (select job_type_id from nabu.job_type_lookup where job_type in ('ingestion','ondemand_ingestion'))
returning job_schedule_id
)
$if(first(data.check_cron).cron_flag)$
insert into nabu.job_schedule_details(job_schedule_id,job_type_id, data_movement_id,refresh_frequency,additional_properties, valid_from_ts, valid_to_ts, cru_by, cru_ts) values
((select * from update_job_schedule_details_ts ),1,$data.input_data.data_movement_id$,'$data.asMap.refresh_freq.cron_freq$', '$resolveCronJson(data.asMap.refresh_freq)$',
current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp)
$else$
insert into nabu.job_schedule_details(job_type_id, data_movement_id,refresh_frequency,additional_properties, valid_from_ts, valid_to_ts, cru_by, cru_ts) values
(1,$data.input_data.data_movement_id$,'$data.asMap.refresh_freq.cron_freq$', '$resolveCronJson(data.asMap.refresh_freq)$',
current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp)
$endif$
>>

logTemplate_modifyDataMovementSchedule(data)::=<<
{"audit_event_type_id":16 ,"dataplace_id":$data.input_data.data_movement_id$,"user_id": "$data.userDetails.userId$","log_time ": "$data.log_time$"}
>>


// This template is used to add a workspace
// @created_by Dharani Darapuneni (DD1109)
// @Api_Path : "http://localhost:port/fireshots/nabu/upd/sq/restCatalog/addWorkspace"

addWorkspace(data)::=<<
{
  "input_data": $data.asString$,
  "sequential_queries": [
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "addWorkspace_schema",
      "validation_key": "input_data",
      "query_type":"validation"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "addWorkspace_checks",
      "query_output_key": "checks",
      "query_type": "select",
      "post_process": ["checks"]
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "addWorkspace_template",
      "query_output_key":"data",
      "query_type":"select"
    },
    {
          "query_template_group": "$data.STPath$/restCatalog.stg",
          "query_template_name": "addWorkspace_archive",
          "query_output_key":"archive",
          "query_type":"update"
    }
  ],
  "output_keys":["data"]
}
>>

addWorkspace_schema(data)::=<<
{
  "\$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "properties": {
    "workspace_name": {
      "type": "string",
      "minLength": 3,
      "maxLength": 75,
      "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$"
    },
    "workspace_description": {
      "type": "string"
    },
    "workspace_datasets": {
      "type": "array",
      "items": [
        {
          "type": "object",
          "properties":{
            "datastore_id": {
              "type": "integer"
            },
            "table_id": {
              "type": "integer"
            }
          }
        }
      ]
    }
  },
  "required": [
    "workspace_name",
    "workspace_description",
    "workspace_datasets"
  ]
}
>>

addWorkspace_checks(data)::=<<
select $false:workspace_uniqueCheck(data)$
>>

workspace_uniqueCheck(modify,data)::=<<
not exists(select * from nabu.workspace where not is_deleted and lower(workspace_name)=lower('$data.input_data.workspace_name$')
$if(modify)$and workspace_id<>$data.input_data.workspace_id$$endif$) "unique"
>>

addWorkspace_template(data)::=<<
WITH workspace AS (
    INSERT INTO nabu.workspace
    (workspace_name, workspace_info, additional_info, is_deleted, crt_by, crt_ts, mod_by, mod_ts)
    VALUES('$data.input_data.workspace_name$', json_build_object('workspace_description', '$data.asString$'::jsonb->'workspace_description'), '{}', false, '$data.userDetails.userId$', current_timestamp, '$data.userDetails.userId$', current_timestamp)
    returning workspace_id
)
$if(data.input_data.workspace_datasets)$
,workspace_objects AS(
    INSERT INTO nabu.workspace_object_details
    (workspace_id, datastore_id, dataplace_id, object_component_id, object_id, valid_from_ts, valid_to_ts, crt_by, crt_ts, mod_by, mod_ts) VALUES
    $data.input_data.workspace_datasets:
                { dataset | ((SELECT workspace_id from workspace),
                            $dataset.datastore_id$,
                            (SELECT dataplace_id FROM nabu.dataplace_table_metadata_physical WHERE table_id = $dataset.table_id$ AND valid_to_ts = '9999-12-31'),
                            (SELECT schema_id FROM nabu.dataplace_table_metadata_physical WHERE table_id = $dataset.table_id$ AND valid_to_ts = '9999-12-31'),
                            $dataset.table_id$, current_timestamp, '9999-12-31', '$data.userDetails.userId$', current_timestamp,
                            '$data.userDetails.userId$', current_timestamp)};separator=","$
      )
$endif$
SELECT workspace_id FROM workspace
>>

addWorkspace_archive(data)::=<<
with tags as (
select  $first(data.data).workspace_id$ as workspace_id,coalesce(json_agg(tag),'[]') as tag from (
    select row_to_json(tags) as tag from
        (select td.tag_id,td.tag_label_id
        ,ul.tag_label_name,c.tag_category_name,cd.tag_category_color
         from  nabu_ui.tag_workspace td
         inner join nabu_ui.tag_user_labels as ul on td.tag_label_id=ul.tag_label_id
         inner join nabu_ui.tag_category as c on ul.tag_category_id=c.tag_category_id
         inner join nabu_ui.tag_category_details as cd on ul.tag_category_id=cd.tag_category_id
         where td.workspace_id =$first(data.data).workspace_id$
         and valid_to_ts='9999-12-31') as tags
    ) as tags
)
INSERT INTO nabu.workspace_archive
VALUES($first(data.data).workspace_id$, (select jsonb_build_object('workspace_details',row_to_json(dp)::jsonb, 'tags',tag::jsonb) from nabu.workspace dp
inner join tags t on t.workspace_id=dp.workspace_id
where dp.workspace_id=$first(data.data).workspace_id$)
,'{}', '$data.userDetails.userId$', current_timestamp)
>>


// This template is used to modify a workspace
// @created_by Dharani Darapuneni(DD1109)
// @Api_Path : "http://localhost:port/fireshots/nabu/upd/sq/restCatalog/modifyWorkspace"

modifyWorkspace(data)::=<<
{
  "input_data": $data.asString$,
  "sequential_queries": [
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "modifyWorkspace_schema",
      "validation_key": "input_data",
      "query_type":"validation"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "checkAccessForSuperAdminRole",
      "query_output_key": "checkAccess",
      "query_type":"select"
    },
    {
        "query_template_group": "$data.STPath$/restCatalog.stg",
        "query_template_name": "modifyWorkspace_checks",
        "query_output_key":"checks",
        "query_type":"select",
        "post_process":["checks"]
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "modifyWorkspace_archive",
      "query_output_key":"archive",
      "query_type":"update"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "modifyWorkspace_template",
      "query_output_key":"data",
      "query_type":"update"
    }
  ],
  "output_keys":["data"]
}
>>

modifyWorkspace_schema(data)::=<<
{
  "\$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "properties": {
    "workspace_id": {
      "type": "integer"
    },
    "workspace_name": {
      "type": "string",
      "minLength": 3,
      "maxLength": 75,
      "pattern": "^([A-Za-z])([A-Za-z0-9_-]|[ ])*[A-Za-z0-9]\$"
    },
    "workspace_description": {
      "type": "string"
    }
  },
  "required": [
    "workspace_id",
    "workspace_name",
    "workspace_description"
  ]
}
>>

modifyWorkspace_checks(data)::=<<
select $ValidWorkspace(data)$, ($workspaceAccessCheck(data)$) as "access", $true:workspace_uniqueCheck(data)$
>>

ValidWorkspace(data)::=<<
exists(select * from nabu.workspace where workspace_id=$data.asMap.workspace_id$ and is_deleted<> true) "valid"
>>

modifyWorkspace_archive(data)::=<<
with tags as (
select  $data.input_data.workspace_id$ as workspace_id,coalesce(json_agg(tag),'[]') as tag from (
    select row_to_json(tags) as tag from
        (select td.tag_id,td.tag_label_id
        ,ul.tag_label_name,c.tag_category_name,cd.tag_category_color
         from  nabu_ui.tag_workspace td
         inner join nabu_ui.tag_user_labels as ul on td.tag_label_id=ul.tag_label_id
         inner join nabu_ui.tag_category as c on ul.tag_category_id=c.tag_category_id
         inner join nabu_ui.tag_category_details as cd on ul.tag_category_id=cd.tag_category_id
         where td.workspace_id =$data.input_data.workspace_id$
         and valid_to_ts='9999-12-31') as tags
    ) as tags
)
INSERT INTO nabu.workspace_archive
VALUES($data.input_data.workspace_id$, (select jsonb_build_object('workspace_details',row_to_json(dp)::jsonb, 'tags',tag::jsonb) from nabu.workspace dp
inner join tags t on t.workspace_id=dp.workspace_id
where dp.workspace_id=$data.input_data.workspace_id$)
,'{}', '$data.userDetails.userId$', current_timestamp)
>>

modifyWorkspace_template(data)::=<<
UPDATE nabu.workspace
SET workspace_name= '$data.input_data.workspace_name$', workspace_info=json_build_object('workspace_description', '$data.asString$'::jsonb->'workspace_description'), mod_by='$data.userDetails.userId$', mod_ts=current_timestamp
WHERE workspace_id = $data.input_data.workspace_id$
>>


// This template is used to delete a workspace
// @created_by Dharani Darapuneni (DD1109)
// @Api_Path : "http://localhost:port/fireshots/nabu/del/sq/restCatalog/deleteWorkspace"

deleteWorkspace(data)::=<<
{
  "input_data": $data.asString$,
  "sequential_queries": [
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "deleteWorkspace_schema",
      "validation_key": "input_data",
      "query_type":"validation"
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "checkAccessForSuperAdminRole",
      "query_output_key": "checkAccess",
      "query_type":"select"
    },
    {
        "query_template_group": "$data.STPath$/restCatalog.stg",
        "query_template_name": "deleteWorkspace_checks",
        "query_output_key":"checks",
        "query_type":"select",
        "post_process":["checks"]
    },
    {
      "query_template_group": "$data.STPath$/restCatalog.stg",
      "query_template_name": "deleteWorkspace_template",
      "query_output_key":"data",
      "query_type":"update"
    }
  ],
  "output_keys":["data"]
}
>>

deleteWorkspace_schema(data)::=<<
{
  "\$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "properties": {
    "workspace_id": {
      "type": "integer"
    }
  },
  "required": [
    "workspace_id"
  ]
}
>>

deleteWorkspace_checks(data)::=<<
select $ValidWorkspace(data)$, ($workspaceAccessCheck(data)$) as "access"
>>

deleteWorkspace_template(data)::=<<
UPDATE nabu.workspace
SET is_deleted= true
WHERE workspace_id = $data.input_data.workspace_id$;

UPDATE nabu.workspace_object_details
SET valid_to_ts=now(), mod_by='$data.userDetails.userId$',mod_ts=now()
WHERE workspace_id = $data.input_data.workspace_id$
and valid_to_ts = '9999-12-31';

UPDATE nabu.workspace_pipeline
SET is_deleted= true
WHERE workspace_id = $data.input_data.workspace_id$;

UPDATE nabu.data_movement
SET valid_to_ts=now(),
mod_by='$data.userDetails.userId$',
mod_ts=now()
WHERE data_movement_id in (select workspace_pipeline_id from nabu.workspace_pipeline where workspace_id =$data.input_data.workspace_id$)
and valid_to_ts = '9999-12-31';

UPDATE nabu.workspace_pipeline_object_details
SET valid_to_ts=now(), mod_by='$data.userDetails.userId$',mod_ts=now()
WHERE workspace_pipeline_id in ( select workspace_pipeline_id from nabu.workspace_pipeline where workspace_id =$data.input_data.workspace_id$)
and valid_to_ts = '9999-12-31';

UPDATE nabu_ui.tag_workspace_pipeline
SET valid_to_ts=now(), mod_by='$data.userDetails.userId$',mod_ts=now()
WHERE workspace_pipeline_id  in ( select workspace_pipeline_id from nabu.workspace_pipeline where workspace_id =$data.input_data.workspace_id$)
and valid_to_ts = '9999-12-31';

UPDATE nabu.data_movement_details
SET valid_to_ts=now()
WHERE data_movement_id in ( select workspace_pipeline_id from nabu.workspace_pipeline where workspace_id =$data.input_data.workspace_id$)
and valid_to_ts = '9999-12-31';

UPDATE nabu_ui.tag_workspace
SET valid_to_ts=now(), mod_by='$data.userDetails.userId$',mod_ts=now()
WHERE workspace_id = $data.input_data.workspace_id$
and valid_to_ts = '9999-12-31';
>>


// This template used to modify refresh frequency in workspace.
// @created_by Murthy(VK1708)
// @modified_by Kusuri Dheeraj Kumar (KD2106)
// @Api_Path : "http://localhost:port/fireshots/nabu/upd/sq/restCatalog/modifyWorkspaceSchedule"

modifyWorkspaceSchedule(data)::=<<
{
  "input_data": $data.asString$,
  "sequential_queries": [
    {
      "query_template_group": "$data.STPath$/manageScheduling.stg",
      "query_template_name": "modifyWorkspaceSchedule_schema",
      "validation_key": "input_data",
      "query_type":"validation"
    },
    {
      "query_template_group": "$data.STPath$/manageScheduling.stg",
      "query_template_name": "dataQueryForCornValidation",
      "processLogic": {
        "processClass": "com.modak.fireshots.processors.impl.CronProcessor",
        "readable_format_cron_cols":["user_readable_format"],
        "result_key": "cronValidation"
      },
      "query_output_key": "cronValidation",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.STPath$/manageScheduling.stg",
      "query_template_name": "scheduleCuration_checks",
      "query_output_key": "checks",
      "query_type":"select",
      "post_process": ["checks"]
    },
    {
      "query_template_group": "$data.STPath$/manageScheduling.stg",
      "query_template_name": "checkCronWorkspace",
      "query_output_key":"check_cron",
      "query_type":"select"
    },
    {
      "query_template_group": "$data.STPath$/manageScheduling.stg",
      "query_template_name": "modifyWorkspaceSchedule_template",
      "query_output_key": "data",
      "query_type":"update"
    },
    {
      "query_template_group": "$data.STPath$/manageScheduling.stg",
      "query_template_name": "logTemplate_modifyWorkspaceSchedule",
      "query_type":"log",
      "log_service":"auditLog"
    }
  ],
  "output_keys":["data"]
}
>>

scheduleCuration_checks(data)::=<<
select $ValidCuration(data)$, $cronValidation_checks(data)$
>>

checkCronWorkspace(data)::=<<
select case when '$resolveCronJson(data.asMap.refresh_freq)$'::json::text = (select additional_properties  from nabu.job_schedule_details jsd where data_movement_id =$data.input_data.workspace_pipeline_id$ and valid_to_ts ='9999-12-31'  and job_type_id=3)::json::text then true else false end as cron_flag
>>

modifyWorkspaceSchedule_schema(data)::=<<
{
  "\$schema": "http://json-schema.org/draft-04/schema#",
  "definitions": {
    "recurring": {
      "description": "user defined crawling frequency",
      "type": "object",
      "required": [
        "cron_type",
        "cron_freq",
        "cron_timezone",
        "cron_info",
        "consider_timezone"
      ],
      "properties": {
        "cron_type": {
          "title": "Type of cron whether Recurring or Onetime",
          "type": "string",
          "enum": [
            "recurring"
          ]
        },
        "cron_freq": {
          "title": "crawl frequency",
          "type": "string"
        },
        "cron_timezone": {
          "title": "Zone of time Country/City",
          "type": "string"
        },
        "consider_timezone": {
          "type": "boolean"
        },
        "cron_info": {
          "type": "object",
          "properties": {
            "schedule_type": {
              "title": "Type of schedule whether it is Daily/Weekly/Monthly/Yearly/Advanced",
              "type": "string",
              "enum": [
                "Daily",
                "weekly",
                "Monthly",
                "Yearly",
                "Advanced"
              ]
            },
            "start_date": {
              "title": "Start Date",
              "type": "string"
            },
            "end_date": {
              "title": "End Date",
              "type": "string"
            }
          },
          "required": [
            "schedule_type",
            "start_date"
          ]
        }
      }
    },
    "one_time": {
      "description": "user defined crawling frequency",
      "type": "object",
      "required": [
        "cron_type",
        "cron_freq",
        "cron_timezone",
        "consider_timezone"
      ],
      "properties": {
        "cron_type": {
          "title": "Type of cron whether Recurring or Onetime",
          "type": "string",
          "enum": [
            "one_time"
          ]
        },
        "cron_freq": {
          "title": "crawl frequency",
          "type": "string"
        },
        "cron_timezone": {
          "title": "Zone of time Country/City",
          "type": "string"
        },
        "consider_timezone": {
          "type": "boolean"
        }
      }
    }
  },
  "type": "object",
  "properties": {
    "workspace_pipeline_id": {
      "type": "integer"
    },
    "refresh_freq": {
      "description": "Refresh Frequency",
      "\$ref": "#/definitions/$data.input_data.refresh_freq.cron_type$"
    }
  },
  "required": [
    "workspace_pipeline_id",
    "refresh_freq"
  ]
}
>>

modifyWorkspaceSchedule_template(data)::=<<
with datamovement_details as(
    update nabu.workspace_pipeline
    set
    workspace_pipeline_json = jsonb_set(jsonb_set(workspace_pipeline_json::jsonb, '{pipelineJson,refresh_freq}', '$resolveCronJson(data.asMap.refresh_freq)$'::jsonb)::jsonb,'{pipelineJson,last_validation_ts}', to_jsonb(now()::timestamp(3) without time zone::text)),
    mod_ts=current_timestamp,
    mod_by='$data.userDetails.userId$'
    where workspace_pipeline_id=$data.asMap.workspace_pipeline_id$
)
,update_job_schedule_details_ts as(
    update nabu.job_schedule_details set valid_to_ts = current_timestamp where data_movement_id = $data.input_data.workspace_pipeline_id$ and valid_to_ts='9999-12-31' and job_type_id = (select job_type_id from nabu.job_type_lookup where job_type ='curation')
    returning job_schedule_id
)
$if(first(data.check_cron).cron_flag)$
insert into nabu.job_schedule_details(job_schedule_id,job_type_id, data_movement_id,refresh_frequency,additional_properties, valid_from_ts, valid_to_ts, cru_by, cru_ts) values
((select * from update_job_schedule_details_ts ),(select job_type_id from nabu.job_type_lookup where job_type ='curation'),$data.input_data.workspace_pipeline_id$,'$data.asMap.refresh_freq.cron_freq$', '$resolveCronJson(data.asMap.refresh_freq)$',
current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp)
$else$
insert into nabu.job_schedule_details(job_type_id, data_movement_id,refresh_frequency,additional_properties, valid_from_ts, valid_to_ts, cru_by, cru_ts) values
((select job_type_id from nabu.job_type_lookup where job_type ='curation'),$data.input_data.workspace_pipeline_id$,'$data.asMap.refresh_freq.cron_freq$', '$resolveCronJson(data.asMap.refresh_freq)$',
current_timestamp,'9999-12-31','$data.userDetails.userId$',current_timestamp)
$endif$
>>

logTemplate_modifyWorkspaceSchedule(data)::=<<
{"audit_event_type_id":16 ,"workspace_pipeline_id":$data.input_data.workspace_pipeline_id$,"user_id": "$data.userDetails.userId$","log_time ": "$data.log_time$"}
>>

//Common Templates

resolveCronJson(cronJson)::=<<
{
	"cron_type":"$cronJson.cron_type$",
	"cron_freq":"$cronJson.cron_freq$",
	"cron_timezone":"$cronJson.cron_timezone$",
    "consider_timezone":$cronJson.consider_timezone$
	$if(cronJson.cron_info)$
	,"cron_info":$resolveCronInfo(cronJson.cron_info)$
	$endif$
}
>>

resolveCronInfo(cronInfo)::=<<
{
	"schedule_type":"$cronInfo.schedule_type$",
    "start_date":"$cronInfo.start_date$"
	$if(cronInfo.end_date)$
    ,"end_date":"$cronInfo.end_date$"
	$endif$
}
>>

dataQueryForCornValidation(data)::=<<
select $if(data.asMap.frequency.cron_freq)$'$data.asMap.frequency.cron_freq$' $endif$
$if(data.asMap.crawl_frequency.cron_freq)$'$data.asMap.crawl_frequency.cron_freq$' $endif$
$if(data.asMap.refresh_freq.cron_freq)$'$data.asMap.refresh_freq.cron_freq$' $endif$
as user_readable_format
>>

//common templates For Scheduling

ValidDatasource(data)::=<<
exists(select * from nabu.dataplace where valid_to_ts='9999-12-31' and dataplace_id=$if(data.input_data.data_connection_id)$ $data.input_data.data_connection_id$ $else$ $data.input_data.dataplace_id$ $endif$) "valid"
>>

ValidDataMovement(data)::=<<
exists(select * from nabu.data_movement where valid_to_ts='9999-12-31' and $if(data.asMap.data_movement_id)$ data_movement_id=$data.asMap.data_movement_id$ $else$ data_movement_id=$data.asMap.pipeline_id$ $endif$) "valid"
>>

ValidCuration(data)::=<<
exists( select * from nabu.workspace_pipeline_object_details where valid_to_ts='9999-12-31' and workspace_pipeline_id = $data.asMap.workspace_pipeline_id$ ) "valid"
>>

ValidDataStore(data)::=<<
exists( select * from nabu.datastore where valid_to_ts='9999-12-31' and datastore_id = $data.asMap.datastore_id$ ) "valid"
>>

cronValidation_checks(data)::=<<
$if(data.asMap.frequency.cron_freq)$ '$data.asMap.frequency.cron_freq$' $endif$
$if(data.asMap.crawl_frequency.cron_freq)$ '$data.asMap.crawl_frequency.cron_freq$' $endif$
$if(data.asMap.refresh_freq.cron_freq)$ '$data.asMap.refresh_freq.cron_freq$' $endif$ != '$first(data.cronValidation).user_readable_format$' as "cron"
>>

dataMovementAccesscheck(data)::=<<
$if(first(data.checkAccess).check_access)$
with module_access AS (
        SELECT mam.role_id,mam.access_id,env_group_name,condition_type_id,unnest(string_to_array(substring(VALUES, 3, length (VALUES) - 4), '","')) AS matched_pipeline_name
        FROM nabu_ui.env_group_role_info egri
        INNER JOIN nabu_ui.module_access_mapping mam ON egri.role_id = mam.role_id
        AND env_group_name in ('$data.userDetails.userId$'$if(data.userDetails.groups)$,$resolveListString(data.userDetails.groups)$$endif$)
        $if(data.userDetails.roleId)$ and mam.role_id in ($data.userDetails.roleId$) $endif$
        AND (condition_type_id = 7 OR condition_type_id = 8 OR condition_type_id = 9)
        GROUP BY 1,2,3,4,5
	)
	,pipeline_access AS (
	    SELECT  access_id,role_id,pipelineid FROM (
            SELECT access_id,role_id
                ,CASE WHEN condition_type_id = 9
                        THEN CASE WHEN tag_label_id = cast(matched_pipeline_name AS INTEGER)
                             THEN tdm.data_movement_id
                         END
                  END AS pipelineid
            FROM module_access,nabu_ui.tag_data_movement tdm
            WHERE tdm.valid_to_ts = '9999-12-31'
            GROUP BY 1,2,3

		UNION ALL

		SELECT access_id,role_id
			,CASE WHEN condition_type_id = 7
					THEN CASE WHEN data_movement_name = matched_pipeline_name
								THEN dmp.data_movement_id
						END
				  WHEN condition_type_id = 8
					 THEN CASE WHEN data_movement_name ~* matched_pipeline_name
								THEN dmp.data_movement_id
						END
			 END AS datap_id
		FROM module_access,nabu.data_movement_physical dmp
		WHERE dmp.valid_to_ts = '9999-12-31'
		GROUP BY 1,2,3

		UNION ALL

		SELECT ui_access_type_id AS access_id,0 as role_id,data_movement_id as pipelineid
		FROM nabu_ui.ui_module_access_lookup umal,nabu.data_movement_physical dmp4
		WHERE crt_by ~* '$data.userDetails.userId$'
		AND dmp4.valid_to_ts = '9999-12-31'
		AND ui_module_name = 'Pipelines'
		GROUP BY 1,2,3
	) b
	GROUP BY 1,2,3
	)
	select distinct case when $if(data.input_data.pipeline_id)$ $data.input_data.pipeline_id$ $else$ $data.input_data.data_movement_id$ $endif$ in (select distinct pipelineid from pipeline_access
    where pipelineid is not null and access_id = 4) then true else false
    end as "access"
$else$
    select true as "access"
$endif$
>>

ValidComputeEngineCheck(data)::=<<
exists(select from nabu.compute_engine where valid_to_ts = '9999-12-31' and compute_engine_id in (
        select compute_engine_id
        from nabu.data_movement
        where $if(data.asMap.data_movement_id)$ data_movement_id=$data.asMap.data_movement_id$ $else$ data_movement_id=$data.asMap.pipeline_id$ $endif$ )
) as "compute_engine_valid"
>>

ValidDatadomain(data)::=<<
exists( select * from nabu.datastore where valid_to_ts='9999-12-31' and datastore_id = $data.asMap.data_domain_id$ ) "valid"
>>


datastoreAccessCheck(data)::=<<
$if(first(data.checkAccess).check_access)$
with module_access AS (
	SELECT mam.role_id
		,mam.access_id
		,env_group_name
		,condition_type_id
		,unnest(string_to_array(substring(VALUES, 3, length (VALUES) - 4), '","')) AS matched_data_domain
	FROM nabu_ui.env_group_role_info egri
	INNER JOIN nabu_ui.module_access_mapping mam ON egri.role_id = mam.role_id
		AND env_group_name in ('$data.userDetails.userId$'$if(data.userDetails.groups)$,$resolveListString(data.userDetails.groups)$$endif$)
		$if(data.userDetails.roleId)$ and mam.role_id in ($data.userDetails.roleId$) $endif$
		AND (
			condition_type_id = 13
			OR condition_type_id = 14
			OR condition_type_id = 15
			)
	GROUP BY 1,2,3,4,5
)
,data_domain_access AS (
	select access_id,datadomainid from (
			select * from (
				select access_id,
				case when tag_label_id =cast(matched_data_domain as integer)
				then td.datastore_id
				end as datadomainid
				from (select * from module_access where condition_type_id in (15)) a ,nabu_ui.tag_datastore td
				where td.valid_to_ts='9999-12-31'
		        ) a where datadomainid is not null
		union all
		        select * from (
				select access_id,
				case when condition_type_id =13 then
				case when datastore_name = matched_data_domain
				then dp.datastore_id
				end
				when condition_type_id =14 then
				case when datastore_name ~* matched_data_domain
				then dp.datastore_id
				end
				end as datadomainid
				from (select * from module_access where condition_type_id in (13,14)) a,nabu.datastore_physical dp
				where valid_to_ts = '9999-12-31'
		        ) a where datadomainid is not null
		union all
			SELECT ui_access_type_id as access_id,datastore_id as datadomainid
			from nabu_ui.ui_module_access_lookup umal,nabu.datastore_physical ce
			where ce.crt_by ~* '$data.userDetails.userId$' and ce.valid_to_ts = '9999-12-31' and ui_module_name ='Data Domains'
        ) b GROUP BY 2,1
)
	select distinct case when $data.input_data.data_domain_id$ in (select distinct datadomainid from data_domain_access
    where datadomainid is not null and access_id =4) then true else false
    end as "access"
$else$
    select true as "access"
$endif$
>>

dataSourceAccesscheck(modify,data)::=<<
$if(first(data.checkAccess).check_access)$
with module_access AS (
     	SELECT mam.role_id,mam.access_id,env_group_name,condition_type_id
     	,unnest(string_to_array(substring(VALUES, 3, length (VALUES) - 4), '","')) AS matched_dataplace_name
     	FROM nabu_ui.env_group_role_info egri
     	INNER JOIN nabu_ui.module_access_mapping mam ON egri.role_id = mam.role_id
     	AND env_group_name in ('$data.userDetails.userId$'$if(data.userDetails.groups)$,$resolveListString(data.userDetails.groups)$$endif$)
     	AND (condition_type_id = 1 OR condition_type_id = 2 OR condition_type_id = 3)
     	GROUP BY 1,2,3,4,5
     	)
     ,dataplace_id_access AS (
     	select access_id,role_id,dataplaceid from (
     			select * from (
     				select access_id,role_id,
     				case when tag_label_id =cast(matched_dataplace_name as integer)
     				then td.dataplace_id
     				end as dataplaceid
     				from (select * from module_access where condition_type_id in (3)) a ,nabu_ui.tag_dataplace td
     				where td.valid_to_ts='9999-12-31'
     		        ) a where dataplaceid is not null
     		union all
     		        select * from (
     				select access_id,role_id,
     				case when condition_type_id =1 then
     				case when dataplace_name = matched_dataplace_name
     				then dp.dataplace_id
     				end
     				when condition_type_id =2 then
     				case when dataplace_name ~* matched_dataplace_name
     				then dp.dataplace_id
     				end
     				end as dataplaceid
     				from (select * from module_access where condition_type_id in (1,2)) a,nabu.dataplace_physical dp
     				where dp.valid_to_ts ='9999-12-31'
     		        ) a where dataplaceid is not null
     		union all
     			SELECT ui_access_type_id as access_id,0 as role_id,dataplace_id as dataplaceid
     			from nabu_ui.ui_module_access_lookup umal,nabu.dataplace_physical ce
     			where ce.crt_by ~* '$data.userDetails.userId$' and ce.valid_to_ts ='9999-12-31' and ui_module_name ='Data Connections'
             ) b GROUP BY 3,2,1
     )
	select distinct case when $if(data.input_data.data_connection_id)$ $data.input_data.data_connection_id$ $else$ $data.input_data.dataplace_id$ $endif$ in (select distinct dataplaceid from dataplace_id_access
    where dataplaceid is not null and access_id = $if(modify)$2 $else$4$endif$ ) then true else false
    end as "access"
$else$
    select true as "access"
$endif$
>>

ActiveCuration(data)::=<<
(select is_active from nabu.workspace_pipeline where workspace_pipeline_id=$data.asMap.workspace_pipeline_id$) "active"
>>

workspaceAccessCheck(data)::=<<
$if(first(data.checkAccess).check_access)$
with module_access as(
        select mam.role_id,mam.access_id,env_group_name,condition_type_id,
        unnest(string_to_array(substring(values,3,length(values)-4),'","')) as matched_workspace_name
        from nabu_ui.env_group_role_info egri
        inner join nabu_ui.module_access_mapping mam
        on egri.role_id =mam.role_id
        and env_group_name in ('$data.userDetails.userId$'$if(data.userDetails.groups)$,$resolveListString(data.userDetails.groups)$$endif$)
        $if(data.userDetails.roleId)$ and mam.role_id in ($data.userDetails.roleId$) $endif$
        and (condition_type_id=19 or condition_type_id=20 or condition_type_id=21)
        group by 1,2,3,4,5
)
,workspace_access as
(
SELECT access_id,workspace_id
FROM (
	select access_id,workspace_id from (
			select * from (
				select access_id,
				case when tag_label_id =cast(matched_workspace_name as integer)
				then td.workspace_id
				end as workspace_id
				from (select * from module_access where condition_type_id in (21)) a ,nabu_ui.tag_workspace td
				where td.valid_to_ts='9999-12-31'
		        ) a where workspace_id is not null
		union all
		        select * from (
				select access_id,
				case when condition_type_id =19 then
				case when workspace_name =matched_workspace_name
				then dp.workspace_id
				end
				when condition_type_id =20 then
				case when workspace_name~*matched_workspace_name
				then dp.workspace_id
				end
				end as workspace_id
				from (select * from module_access where condition_type_id in (19,20)) a,nabu.workspace dp
				where dp.is_deleted is false
		        ) a where workspace_id is not null

		union all
			SELECT ui_access_type_id as access_id,workspace_id
			from nabu_ui.ui_module_access_lookup umal,nabu.workspace ce
			where ce.crt_by ~* '$data.userDetails.userId$' and is_deleted is false and ui_module_name ='Workspaces'

        ) b GROUP BY 2,1
)a group by 2,1
)
	select distinct case when  $data.input_data.workspace_id$  in (select distinct workspace_id from workspace_access
    where workspace_id is not null and access_id =3) then true else false
    end as "access"
$else$
    select true as "access"
$endif$
>>

checkWorkspaceAccess(data)::=<<
$if(first(data.checkAccess).check_access)$
    with module_access as(
            select mam.role_id,mam.access_id,env_group_name,condition_type_id,
            unnest(string_to_array(substring(values,3,length(values)-4),'","')) as matched_workspace_name
            from nabu_ui.env_group_role_info egri
            inner join nabu_ui.module_access_mapping mam
            on egri.role_id =mam.role_id
            and env_group_name in ('$data.userDetails.userId$'$if(data.userDetails.groups)$,$resolveListString(data.userDetails.groups)$$endif$)
            and (condition_type_id=19 or condition_type_id=20 or condition_type_id=21)
            group by 1,2,3,4,5
    )
    ,workspace_access as(
    SELECT access_id,workspace_id
    FROM (
        select access_id,role_id,workspace_id from (
                select * from (
                    select access_id,role_id,
                    case when tag_label_id =cast(matched_workspace_name as integer)
                    then td.workspace_id
                    end as workspace_id
                    from (select * from module_access where condition_type_id in (21)) a ,nabu_ui.tag_workspace td
                    where td.valid_to_ts='9999-12-31'
                    ) a where workspace_id is not null
            union all
                    select * from (
                    select access_id,role_id,
                    case when condition_type_id =19 then
                    case when workspace_name =matched_workspace_name
                    then dp.workspace_id
                    end
                    when condition_type_id =20 then
                    case when workspace_name~*matched_workspace_name
                    then dp.workspace_id
                    end
                    end as workspace_id
                    from (select * from module_access where condition_type_id in (19,20)) a,nabu.workspace dp
                    where dp.is_deleted is false
                    ) a where workspace_id is not null
            union all
                SELECT ui_access_type_id as access_id,0 as role_id,workspace_id
                from nabu_ui.ui_module_access_lookup umal,nabu.workspace ce
                where ce.crt_by ~* '$data.userDetails.userId$' and is_deleted is false and ui_module_name ='Workspaces'
            ) b GROUP BY 3,2,1
    )a group by 1,2
    )
	select distinct case when $data.input_data.workspace_pipeline_id$ in ( select workspace_pipeline_id from workspace_access wa
    inner join nabu.workspace_pipeline wp on wp.workspace_id = wa.workspace_id
    where wa.workspace_id is not null and wa.access_id =2 ) then true else false
    end as "access"
$else$
    select true as "access"
$endif$
>>


//Templates below are used by ChecksProcessor

dataMovementChecks(data)::=<<
select $ValidDataMovement(data)$, ($dataMovementAccesscheck(data)$) as "access", $ValidComputeEngineCheck(data)$
>>

onDemandDataConnection_checks(data)::=<<
select $ValidDatasource(data)$, ($false:dataSourceAccesscheck(data)$) as "access"
>>

onDemandcurationPipeline_checks(data)::=<<
select $ValidCuration(data)$, $ActiveCuration(data)$, ($checkWorkspaceAccess(data)$) as "access"
>>

onDemandDatastore_checks(data)::=<<
select $ValidDatadomain(data)$ ,  ($datastoreAccessCheck(data)$) as "access"
>>

dataConnection_checks(data)::=<<
select $ValidDatasource(data)$, ($true:dataSourceAccesscheck(data)$) as "access"
>>

dataMovement_checks(data)::=<<
select $ValidDataMovement(data)$, ($dataMovementAccesscheck(data)$) as "access"
>>

curationPipeline_checks(data)::=<<
select exists( select * from nabu.workspace_pipeline_object_details where valid_to_ts='9999-12-31' and workspace_pipeline_id = $data.asMap.workspace_pipeline_id$ ) "valid"
>>

dataDomain_checks(data)::=<<
select $ValidDatadomain(data)$, ($datastoreAccessCheck(data)$) as "access"
>>


useRabbitMQ::=[ "": true, default: key ]

